
Semaforo_Pedestre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006424  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  080065e8  080065e8  000165e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b38  08006b38  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b40  08006b40  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b40  08006b40  00016b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000010  08006b58  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08006b58  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d81  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e61  00000000  00000000  00031dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00033c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00034ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211d9  00000000  00000000  00035900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c8a  00000000  00000000  00056ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d217c  00000000  00000000  00067763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001398df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa0  00000000  00000000  00139934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080065d0 	.word	0x080065d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080065d0 	.word	0x080065d0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b085      	sub	sp, #20
 8000500:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f004 f941 	bl	8004788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f8f3 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f9d9 	bl	80008c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 f9ad 	bl	800086c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000512:	f000 f95b 	bl	80007cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Sequência de inicialização do LCD

 	    tft_gpio_init();                  //Inicializa os GPIOs do LCD (evita uso do CubeMX)
 8000516:	f004 f89b 	bl	8004650 <tft_gpio_init>

 	    HAL_TIM_Base_Start(&htim1);      //Inicializa o Timer1 (base de tempo de uso do LCD)
 800051a:	486e      	ldr	r0, [pc, #440]	; (80006d4 <main+0x1d8>)
 800051c:	f005 fa30 	bl	8005980 <HAL_TIM_Base_Start>

 	    ID = tft_readID();               //Lê o ID do LCD (poderia ser chamada pela inicialização do LCD)
 8000520:	f001 ff76 	bl	8002410 <readID>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	4b6b      	ldr	r3, [pc, #428]	; (80006d8 <main+0x1dc>)
 800052a:	801a      	strh	r2, [r3, #0]

 	    HAL_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f004 f99d 	bl	800486c <HAL_Delay>

 	    tft_init (ID);                   //Inicializa o LCD de acordo com seu ID
 8000532:	4b69      	ldr	r3, [pc, #420]	; (80006d8 <main+0x1dc>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f001 fbe4 	bl	8001d04 <tft_init>
 	   //Inverte as cores do display (efeito negativo)
 	    //\invertDisplay(1);


 	   //HAL_Delay(5000);
 	   setRotation(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f002 fe97 	bl	8003270 <setRotation>
 	  fillScreen(BLACK);               //Preenche a tela em uma só cor
 8000542:	2000      	movs	r0, #0
 8000544:	f003 fc6a 	bl	8003e1c <fillScreen>



//FSM
 cState = Vm;	//Estado inicial
 8000548:	4b64      	ldr	r3, [pc, #400]	; (80006dc <main+0x1e0>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Preparação da tela
	  fillRect(250, 30, 60, 120, WHITE);
 800054e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2378      	movs	r3, #120	; 0x78
 8000556:	223c      	movs	r2, #60	; 0x3c
 8000558:	211e      	movs	r1, #30
 800055a:	20fa      	movs	r0, #250	; 0xfa
 800055c:	f003 fe3c 	bl	80041d8 <fillRect>
	  fillRect(260, 40, 40, 40, BLACK);
 8000560:	2300      	movs	r3, #0
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2328      	movs	r3, #40	; 0x28
 8000566:	2228      	movs	r2, #40	; 0x28
 8000568:	2128      	movs	r1, #40	; 0x28
 800056a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800056e:	f003 fe33 	bl	80041d8 <fillRect>
	  fillRect(260, 100, 40, 40, BLACK);
 8000572:	2300      	movs	r3, #0
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2328      	movs	r3, #40	; 0x28
 8000578:	2228      	movs	r2, #40	; 0x28
 800057a:	2164      	movs	r1, #100	; 0x64
 800057c:	f44f 7082 	mov.w	r0, #260	; 0x104
 8000580:	f003 fe2a 	bl	80041d8 <fillRect>
	  fillRect(40, 30, 60, 160, WHITE);
 8000584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	23a0      	movs	r3, #160	; 0xa0
 800058c:	223c      	movs	r2, #60	; 0x3c
 800058e:	211e      	movs	r1, #30
 8000590:	2028      	movs	r0, #40	; 0x28
 8000592:	f003 fe21 	bl	80041d8 <fillRect>
	  fillCircle(70, 60, 25, BLACK);
 8000596:	2300      	movs	r3, #0
 8000598:	2219      	movs	r2, #25
 800059a:	213c      	movs	r1, #60	; 0x3c
 800059c:	2046      	movs	r0, #70	; 0x46
 800059e:	f003 fd1c 	bl	8003fda <fillCircle>
	  fillCircle(70, 110, 20, BLACK);
 80005a2:	2300      	movs	r3, #0
 80005a4:	2214      	movs	r2, #20
 80005a6:	216e      	movs	r1, #110	; 0x6e
 80005a8:	2046      	movs	r0, #70	; 0x46
 80005aa:	f003 fd16 	bl	8003fda <fillCircle>
	  fillCircle(70, 160, 20, BLACK);
 80005ae:	2300      	movs	r3, #0
 80005b0:	2214      	movs	r2, #20
 80005b2:	21a0      	movs	r1, #160	; 0xa0
 80005b4:	2046      	movs	r0, #70	; 0x46
 80005b6:	f003 fd10 	bl	8003fda <fillCircle>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //1. Saída baseada no estado atual

	  switch (Fsm[cState].out) {
 80005ba:	4b48      	ldr	r3, [pc, #288]	; (80006dc <main+0x1e0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <main+0x1e4>)
 80005c2:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 80005c6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d01f      	beq.n	800060e <main+0x112>
 80005ce:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80005d2:	4293      	cmp	r3, r2
 80005d4:	dc47      	bgt.n	8000666 <main+0x16a>
 80005d6:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 80005da:	d02e      	beq.n	800063a <main+0x13e>
 80005dc:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 80005e0:	d141      	bne.n	8000666 <main+0x16a>
		case RED:
			fillCircle(70, 60, 25, Fsm[cState].out);
 80005e2:	4b3e      	ldr	r3, [pc, #248]	; (80006dc <main+0x1e0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <main+0x1e4>)
 80005ea:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 80005ee:	2219      	movs	r2, #25
 80005f0:	213c      	movs	r1, #60	; 0x3c
 80005f2:	2046      	movs	r0, #70	; 0x46
 80005f4:	f003 fcf1 	bl	8003fda <fillCircle>
			fillRect(260, 100, 40, 40, GREEN);
 80005f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2328      	movs	r3, #40	; 0x28
 8000600:	2228      	movs	r2, #40	; 0x28
 8000602:	2164      	movs	r1, #100	; 0x64
 8000604:	f44f 7082 	mov.w	r0, #260	; 0x104
 8000608:	f003 fde6 	bl	80041d8 <fillRect>
			break;
 800060c:	e02c      	b.n	8000668 <main+0x16c>
		case YELLOW:
			fillCircle(70, 110, 20, Fsm[cState].out);
 800060e:	4b33      	ldr	r3, [pc, #204]	; (80006dc <main+0x1e0>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <main+0x1e4>)
 8000616:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800061a:	2214      	movs	r2, #20
 800061c:	216e      	movs	r1, #110	; 0x6e
 800061e:	2046      	movs	r0, #70	; 0x46
 8000620:	f003 fcdb 	bl	8003fda <fillCircle>
			fillRect(260, 40, 40, 40, RED);
 8000624:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2328      	movs	r3, #40	; 0x28
 800062c:	2228      	movs	r2, #40	; 0x28
 800062e:	2128      	movs	r1, #40	; 0x28
 8000630:	f44f 7082 	mov.w	r0, #260	; 0x104
 8000634:	f003 fdd0 	bl	80041d8 <fillRect>
			break;
 8000638:	e016      	b.n	8000668 <main+0x16c>
		case GREEN:
			fillCircle(70, 160, 20, Fsm[cState].out);
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <main+0x1e0>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <main+0x1e4>)
 8000642:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000646:	2214      	movs	r2, #20
 8000648:	21a0      	movs	r1, #160	; 0xa0
 800064a:	2046      	movs	r0, #70	; 0x46
 800064c:	f003 fcc5 	bl	8003fda <fillCircle>
			fillRect(260, 40, 40, 40, RED);
 8000650:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2328      	movs	r3, #40	; 0x28
 8000658:	2228      	movs	r2, #40	; 0x28
 800065a:	2128      	movs	r1, #40	; 0x28
 800065c:	f44f 7082 	mov.w	r0, #260	; 0x104
 8000660:	f003 fdba 	bl	80041d8 <fillRect>
			break;
 8000664:	e000      	b.n	8000668 <main+0x16c>
		default:
			break;
 8000666:	bf00      	nop



	  //2. Aguarda o tempo predefinido para o estado

	  HAL_Delay(Fsm[cState].wait);
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <main+0x1e0>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <main+0x1e4>)
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	4413      	add	r3, r2
 8000672:	885b      	ldrh	r3, [r3, #2]
 8000674:	4618      	mov	r0, r3
 8000676:	f004 f8f9 	bl	800486c <HAL_Delay>
	  //3. Lê a entrada

	  input = ((!HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin))<<1) | ((!HAL_GPIO_ReadPin(B2PORT,B2PIN)<<0));
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4819      	ldr	r0, [pc, #100]	; (80006e4 <main+0x1e8>)
 8000680:	f004 fb92 	bl	8004da8 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <main+0x192>
 800068a:	2402      	movs	r4, #2
 800068c:	e000      	b.n	8000690 <main+0x194>
 800068e:	2400      	movs	r4, #0
 8000690:	2104      	movs	r1, #4
 8000692:	4815      	ldr	r0, [pc, #84]	; (80006e8 <main+0x1ec>)
 8000694:	f004 fb88 	bl	8004da8 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	bf0c      	ite	eq
 800069e:	2301      	moveq	r3, #1
 80006a0:	2300      	movne	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	4323      	orrs	r3, r4
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	71fb      	strb	r3, [r7, #7]

	  //4. Vai para o próximo estado, que depende da entrada atual
	  HAL_UART_Transmit(&huart2, (uint8_t *)input, 4, 100);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4619      	mov	r1, r3
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	2204      	movs	r2, #4
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <main+0x1f0>)
 80006b6:	f005 fc96 	bl	8005fe6 <HAL_UART_Transmit>


	  cState = Fsm[cState].next[input];
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <main+0x1e0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	461a      	mov	r2, r3
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4907      	ldr	r1, [pc, #28]	; (80006e0 <main+0x1e4>)
 80006c4:	00d2      	lsls	r2, r2, #3
 80006c6:	440a      	add	r2, r1
 80006c8:	4413      	add	r3, r2
 80006ca:	3304      	adds	r3, #4
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <main+0x1e0>)
 80006d0:	701a      	strb	r2, [r3, #0]
	  fillRect(250, 30, 60, 120, WHITE);
 80006d2:	e73c      	b.n	800054e <main+0x52>
 80006d4:	20000038 	.word	0x20000038
 80006d8:	2000002c 	.word	0x2000002c
 80006dc:	20000034 	.word	0x20000034
 80006e0:	080065ec 	.word	0x080065ec
 80006e4:	40020800 	.word	0x40020800
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	20000080 	.word	0x20000080

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2234      	movs	r2, #52	; 0x34
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 ff5e 	bl	80065c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <SystemClock_Config+0xd4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a29      	ldr	r2, [pc, #164]	; (80007c4 <SystemClock_Config+0xd4>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <SystemClock_Config+0xd4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <SystemClock_Config+0xd8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800073c:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <SystemClock_Config+0xd8>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <SystemClock_Config+0xd8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000764:	2310      	movs	r3, #16
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000768:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800076c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076e:	2304      	movs	r3, #4
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fe10 	bl	80053a4 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800078a:	f000 f923 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2302      	movs	r3, #2
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	2102      	movs	r1, #2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 fb2e 	bl	8004e0c <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007b6:	f000 f90d 	bl	80009d4 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	; 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_TIM1_Init+0x98>)
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <MX_TIM1_Init+0x9c>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_TIM1_Init+0x98>)
 80007f0:	2253      	movs	r2, #83	; 0x53
 80007f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_TIM1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_TIM1_Init+0x98>)
 80007fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000800:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_TIM1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_TIM1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_TIM1_Init+0x98>)
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000814:	4813      	ldr	r0, [pc, #76]	; (8000864 <MX_TIM1_Init+0x98>)
 8000816:	f005 f863 	bl	80058e0 <HAL_TIM_Base_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000820:	f000 f8d8 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	4619      	mov	r1, r3
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_TIM1_Init+0x98>)
 8000832:	f005 f90d 	bl	8005a50 <HAL_TIM_ConfigClockSource>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800083c:	f000 f8ca 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_TIM1_Init+0x98>)
 800084e:	f005 fb01 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000858:	f000 f8bc 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000038 	.word	0x20000038
 8000868:	40010000 	.word	0x40010000

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART2_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f005 fb52 	bl	8005f4c <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f891 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000080 	.word	0x20000080
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <MX_GPIO_Init+0x104>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a39      	ldr	r2, [pc, #228]	; (80009c4 <MX_GPIO_Init+0x104>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <MX_GPIO_Init+0x104>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_GPIO_Init+0x104>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a32      	ldr	r2, [pc, #200]	; (80009c4 <MX_GPIO_Init+0x104>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_GPIO_Init+0x104>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <MX_GPIO_Init+0x104>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <MX_GPIO_Init+0x104>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x104>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <MX_GPIO_Init+0x104>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a24      	ldr	r2, [pc, #144]	; (80009c4 <MX_GPIO_Init+0x104>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_GPIO_Init+0x104>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_GPIO_Init+0x104>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <MX_GPIO_Init+0x104>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_GPIO_Init+0x104>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <MX_GPIO_Init+0x108>)
 8000968:	f004 fa36 	bl	8004dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000972:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <MX_GPIO_Init+0x10c>)
 8000984:	f004 f87c 	bl	8004a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000988:	2320      	movs	r3, #32
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480a      	ldr	r0, [pc, #40]	; (80009c8 <MX_GPIO_Init+0x108>)
 80009a0:	f004 f86e 	bl	8004a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009a4:	2304      	movs	r3, #4
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_GPIO_Init+0x110>)
 80009b8:	f004 f862 	bl	8004a80 <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1e:	2007      	movs	r0, #7
 8000a20:	f003 fffa 	bl	8004a18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_TIM_Base_MspInit+0x3c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10d      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_TIM_Base_MspInit+0x40>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <HAL_TIM_Base_MspInit+0x40>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <HAL_TIM_Base_MspInit+0x40>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40010000 	.word	0x40010000
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0x84>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12b      	bne.n	8000aee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_UART_MspInit+0x8c>)
 8000aea:	f003 ffc9 	bl	8004a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40004400 	.word	0x40004400
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f003 fe6c 	bl	800482c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f004 f922 	bl	8004dd8 <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	2201      	movs	r2, #1
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f004 f912 	bl	8004dd8 <HAL_GPIO_WritePin>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f003 ff50 	bl	8004a80 <HAL_GPIO_Init>
}
 8000be0:	bf00      	nop
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	4619      	mov	r1, r3
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f003 ff38 	bl	8004a80 <HAL_GPIO_Init>
}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <width+0x14>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000004 	.word	0x20000004

08000c30 <height>:

uint16_t height(void)
{ return _height; }
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <height+0x14>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000006 	.word	0x20000006

08000c48 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8000c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c5a:	b21a      	sxth	r2, r3
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b21a      	sxth	r2, r3
 8000c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	b29b      	uxth	r3, r3
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	115b      	asrs	r3, r3, #5
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	f003 0320 	and.w	r3, r3, #32
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	105b      	asrs	r3, r3, #1
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	b29b      	uxth	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	121b      	asrs	r3, r3, #8
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	f023 0307 	bic.w	r3, r3, #7
 8000cde:	b2db      	uxtb	r3, r3
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	10db      	asrs	r3, r3, #3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f023 0303 	bic.w	r3, r3, #3
 8000d00:	b2db      	uxtb	r3, r3
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	b2db      	uxtb	r3, r3
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	460b      	mov	r3, r1
 8000d36:	71bb      	strb	r3, [r7, #6]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	717b      	strb	r3, [r7, #5]
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000d46:	f023 0307 	bic.w	r3, r3, #7
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	797b      	ldrb	r3, [r7, #5]
 8000d5e:	08db      	lsrs	r3, r3, #3
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af02      	add	r7, sp, #8
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	460a      	mov	r2, r1
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	4613      	mov	r3, r2
 8000d84:	80bb      	strh	r3, [r7, #4]
 8000d86:	f107 020e 	add.w	r2, r7, #14
 8000d8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d92:	2301      	movs	r3, #1
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	f001 fc7a 	bl	8002690 <readGRAM>
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	460a      	mov	r2, r1
 8000db0:	80fb      	strh	r3, [r7, #6]
 8000db2:	4613      	mov	r3, r2
 8000db4:	80bb      	strh	r3, [r7, #4]
 8000db6:	88ba      	ldrh	r2, [r7, #4]
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f973 	bl	80010a8 <writecmddata>
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	6039      	str	r1, [r7, #0]
 8000dd4:	80fb      	strh	r3, [r7, #6]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	717b      	strb	r3, [r7, #5]
 8000dda:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fab6 	bl	8001354 <WriteCmdParamN>
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <setReadDir>:
uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df8:	4811      	ldr	r0, [pc, #68]	; (8000e40 <setReadDir+0x50>)
 8000dfa:	f7ff fedf 	bl	8000bbc <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	4810      	ldr	r0, [pc, #64]	; (8000e44 <setReadDir+0x54>)
 8000e02:	f7ff fedb 	bl	8000bbc <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <setReadDir+0x50>)
 8000e0c:	f7ff fed6 	bl	8000bbc <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000e10:	2108      	movs	r1, #8
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <setReadDir+0x58>)
 8000e14:	f7ff fed2 	bl	8000bbc <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000e18:	2120      	movs	r1, #32
 8000e1a:	480b      	ldr	r0, [pc, #44]	; (8000e48 <setReadDir+0x58>)
 8000e1c:	f7ff fece 	bl	8000bbc <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000e20:	2110      	movs	r1, #16
 8000e22:	4809      	ldr	r0, [pc, #36]	; (8000e48 <setReadDir+0x58>)
 8000e24:	f7ff feca 	bl	8000bbc <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <setReadDir+0x58>)
 8000e2e:	f7ff fec5 	bl	8000bbc <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	4802      	ldr	r0, [pc, #8]	; (8000e40 <setReadDir+0x50>)
 8000e38:	f7ff fec0 	bl	8000bbc <PIN_INPUT>
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020400 	.word	0x40020400

08000e4c <setWriteDir>:

void setWriteDir (void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <setWriteDir+0x50>)
 8000e56:	f7ff fec7 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <setWriteDir+0x54>)
 8000e5e:	f7ff fec3 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <setWriteDir+0x50>)
 8000e68:	f7ff febe 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <setWriteDir+0x58>)
 8000e70:	f7ff feba 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000e74:	2120      	movs	r1, #32
 8000e76:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <setWriteDir+0x58>)
 8000e78:	f7ff feb6 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <setWriteDir+0x58>)
 8000e80:	f7ff feb2 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000e84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <setWriteDir+0x58>)
 8000e8a:	f7ff fead 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	4802      	ldr	r0, [pc, #8]	; (8000e9c <setWriteDir+0x50>)
 8000e94:	f7ff fea8 	bl	8000be8 <PIN_OUTPUT>
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <write24>:
    CS_IDLE;
}


static void write24(uint16_t color)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff08 	bl	8000cca <color565_to_r>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff13 	bl	8000cec <color565_to_g>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff1e 	bl	8000d0e <color565_to_b>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	737b      	strb	r3, [r7, #13]
    write8(r);
 8000ed6:	4b71      	ldr	r3, [pc, #452]	; (800109c <write24+0x1f4>)
 8000ed8:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000edc:	619a      	str	r2, [r3, #24]
 8000ede:	4b70      	ldr	r3, [pc, #448]	; (80010a0 <write24+0x1f8>)
 8000ee0:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000ee4:	619a      	str	r2, [r3, #24]
 8000ee6:	4b6f      	ldr	r3, [pc, #444]	; (80010a4 <write24+0x1fc>)
 8000ee8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000eec:	619a      	str	r2, [r3, #24]
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efe:	431a      	orrs	r2, r3
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	4b64      	ldr	r3, [pc, #400]	; (800109c <write24+0x1f4>)
 8000f0c:	619a      	str	r2, [r3, #24]
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	105b      	asrs	r3, r3, #1
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	f003 0320 	and.w	r3, r3, #32
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <write24+0x1f8>)
 8000f34:	619a      	str	r2, [r3, #24]
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	019b      	lsls	r3, r3, #6
 8000f3a:	4a5a      	ldr	r2, [pc, #360]	; (80010a4 <write24+0x1fc>)
 8000f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	2102      	movs	r1, #2
 8000f44:	4855      	ldr	r0, [pc, #340]	; (800109c <write24+0x1f4>)
 8000f46:	f7ff fe19 	bl	8000b7c <PIN_LOW>
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4853      	ldr	r0, [pc, #332]	; (800109c <write24+0x1f4>)
 8000f4e:	f7ff fe15 	bl	8000b7c <PIN_LOW>
 8000f52:	2102      	movs	r1, #2
 8000f54:	4851      	ldr	r0, [pc, #324]	; (800109c <write24+0x1f4>)
 8000f56:	f7ff fe11 	bl	8000b7c <PIN_LOW>
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	484f      	ldr	r0, [pc, #316]	; (800109c <write24+0x1f4>)
 8000f5e:	f7ff fe1d 	bl	8000b9c <PIN_HIGH>
 8000f62:	2102      	movs	r1, #2
 8000f64:	484d      	ldr	r0, [pc, #308]	; (800109c <write24+0x1f4>)
 8000f66:	f7ff fe19 	bl	8000b9c <PIN_HIGH>
    write8(g);
 8000f6a:	4b4c      	ldr	r3, [pc, #304]	; (800109c <write24+0x1f4>)
 8000f6c:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000f70:	619a      	str	r2, [r3, #24]
 8000f72:	4b4b      	ldr	r3, [pc, #300]	; (80010a0 <write24+0x1f8>)
 8000f74:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000f78:	619a      	str	r2, [r3, #24]
 8000f7a:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <write24+0x1fc>)
 8000f7c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f80:	619a      	str	r2, [r3, #24]
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f92:	431a      	orrs	r2, r3
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	; (800109c <write24+0x1f4>)
 8000fa0:	619a      	str	r2, [r3, #24]
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	105b      	asrs	r3, r3, #1
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	f003 0320 	and.w	r3, r3, #32
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <write24+0x1f8>)
 8000fc8:	619a      	str	r2, [r3, #24]
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	019b      	lsls	r3, r3, #6
 8000fce:	4a35      	ldr	r2, [pc, #212]	; (80010a4 <write24+0x1fc>)
 8000fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4830      	ldr	r0, [pc, #192]	; (800109c <write24+0x1f4>)
 8000fda:	f7ff fdcf 	bl	8000b7c <PIN_LOW>
 8000fde:	2102      	movs	r1, #2
 8000fe0:	482e      	ldr	r0, [pc, #184]	; (800109c <write24+0x1f4>)
 8000fe2:	f7ff fdcb 	bl	8000b7c <PIN_LOW>
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	482c      	ldr	r0, [pc, #176]	; (800109c <write24+0x1f4>)
 8000fea:	f7ff fdc7 	bl	8000b7c <PIN_LOW>
 8000fee:	2102      	movs	r1, #2
 8000ff0:	482a      	ldr	r0, [pc, #168]	; (800109c <write24+0x1f4>)
 8000ff2:	f7ff fdd3 	bl	8000b9c <PIN_HIGH>
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4828      	ldr	r0, [pc, #160]	; (800109c <write24+0x1f4>)
 8000ffa:	f7ff fdcf 	bl	8000b9c <PIN_HIGH>
    write8(b);
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <write24+0x1f4>)
 8001000:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001004:	619a      	str	r2, [r3, #24]
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <write24+0x1f8>)
 8001008:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800100c:	619a      	str	r2, [r3, #24]
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <write24+0x1fc>)
 8001010:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001014:	619a      	str	r2, [r3, #24]
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001026:	431a      	orrs	r2, r3
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	025b      	lsls	r3, r3, #9
 800102c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001030:	431a      	orrs	r2, r3
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <write24+0x1f4>)
 8001034:	619a      	str	r2, [r3, #24]
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	105b      	asrs	r3, r3, #1
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	431a      	orrs	r2, r3
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	431a      	orrs	r2, r3
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	431a      	orrs	r2, r3
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <write24+0x1f8>)
 800105c:	619a      	str	r2, [r3, #24]
 800105e:	7b7b      	ldrb	r3, [r7, #13]
 8001060:	019b      	lsls	r3, r3, #6
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <write24+0x1fc>)
 8001064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	2102      	movs	r1, #2
 800106c:	480b      	ldr	r0, [pc, #44]	; (800109c <write24+0x1f4>)
 800106e:	f7ff fd85 	bl	8000b7c <PIN_LOW>
 8001072:	2102      	movs	r1, #2
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <write24+0x1f4>)
 8001076:	f7ff fd81 	bl	8000b7c <PIN_LOW>
 800107a:	2102      	movs	r1, #2
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <write24+0x1f4>)
 800107e:	f7ff fd7d 	bl	8000b7c <PIN_LOW>
 8001082:	2102      	movs	r1, #2
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <write24+0x1f4>)
 8001086:	f7ff fd89 	bl	8000b9c <PIN_HIGH>
 800108a:	2102      	movs	r1, #2
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <write24+0x1f4>)
 800108e:	f7ff fd85 	bl	8000b9c <PIN_HIGH>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020800 	.word	0x40020800

080010a8 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	80fb      	strh	r3, [r7, #6]
 80010b4:	4613      	mov	r3, r2
 80010b6:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80010b8:	2101      	movs	r1, #1
 80010ba:	48a3      	ldr	r0, [pc, #652]	; (8001348 <writecmddata+0x2a0>)
 80010bc:	f7ff fd5e 	bl	8000b7c <PIN_LOW>
    WriteCmd(cmd);
 80010c0:	2110      	movs	r1, #16
 80010c2:	48a2      	ldr	r0, [pc, #648]	; (800134c <writecmddata+0x2a4>)
 80010c4:	f7ff fd5a 	bl	8000b7c <PIN_LOW>
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	73bb      	strb	r3, [r7, #14]
 80010d4:	4b9d      	ldr	r3, [pc, #628]	; (800134c <writecmddata+0x2a4>)
 80010d6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80010da:	619a      	str	r2, [r3, #24]
 80010dc:	4b9a      	ldr	r3, [pc, #616]	; (8001348 <writecmddata+0x2a0>)
 80010de:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80010e2:	619a      	str	r2, [r3, #24]
 80010e4:	4b9a      	ldr	r3, [pc, #616]	; (8001350 <writecmddata+0x2a8>)
 80010e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010ea:	619a      	str	r2, [r3, #24]
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fc:	431a      	orrs	r2, r3
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	025b      	lsls	r3, r3, #9
 8001102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001106:	431a      	orrs	r2, r3
 8001108:	4b90      	ldr	r3, [pc, #576]	; (800134c <writecmddata+0x2a4>)
 800110a:	619a      	str	r2, [r3, #24]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	105b      	asrs	r3, r3, #1
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	431a      	orrs	r2, r3
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	431a      	orrs	r2, r3
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	431a      	orrs	r2, r3
 8001130:	4b85      	ldr	r3, [pc, #532]	; (8001348 <writecmddata+0x2a0>)
 8001132:	619a      	str	r2, [r3, #24]
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	019b      	lsls	r3, r3, #6
 8001138:	4a85      	ldr	r2, [pc, #532]	; (8001350 <writecmddata+0x2a8>)
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	2102      	movs	r1, #2
 8001142:	4882      	ldr	r0, [pc, #520]	; (800134c <writecmddata+0x2a4>)
 8001144:	f7ff fd1a 	bl	8000b7c <PIN_LOW>
 8001148:	2102      	movs	r1, #2
 800114a:	4880      	ldr	r0, [pc, #512]	; (800134c <writecmddata+0x2a4>)
 800114c:	f7ff fd16 	bl	8000b7c <PIN_LOW>
 8001150:	2102      	movs	r1, #2
 8001152:	487e      	ldr	r0, [pc, #504]	; (800134c <writecmddata+0x2a4>)
 8001154:	f7ff fd12 	bl	8000b7c <PIN_LOW>
 8001158:	2102      	movs	r1, #2
 800115a:	487c      	ldr	r0, [pc, #496]	; (800134c <writecmddata+0x2a4>)
 800115c:	f7ff fd1e 	bl	8000b9c <PIN_HIGH>
 8001160:	2102      	movs	r1, #2
 8001162:	487a      	ldr	r0, [pc, #488]	; (800134c <writecmddata+0x2a4>)
 8001164:	f7ff fd1a 	bl	8000b9c <PIN_HIGH>
 8001168:	4b78      	ldr	r3, [pc, #480]	; (800134c <writecmddata+0x2a4>)
 800116a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800116e:	619a      	str	r2, [r3, #24]
 8001170:	4b75      	ldr	r3, [pc, #468]	; (8001348 <writecmddata+0x2a0>)
 8001172:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001176:	619a      	str	r2, [r3, #24]
 8001178:	4b75      	ldr	r3, [pc, #468]	; (8001350 <writecmddata+0x2a8>)
 800117a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001188:	7bbb      	ldrb	r3, [r7, #14]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001190:	431a      	orrs	r2, r3
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	025b      	lsls	r3, r3, #9
 8001196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119a:	431a      	orrs	r2, r3
 800119c:	4b6b      	ldr	r3, [pc, #428]	; (800134c <writecmddata+0x2a4>)
 800119e:	619a      	str	r2, [r3, #24]
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	105b      	asrs	r3, r3, #1
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	431a      	orrs	r2, r3
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	f003 0320 	and.w	r3, r3, #32
 80011ba:	431a      	orrs	r2, r3
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	431a      	orrs	r2, r3
 80011c4:	4b60      	ldr	r3, [pc, #384]	; (8001348 <writecmddata+0x2a0>)
 80011c6:	619a      	str	r2, [r3, #24]
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	019b      	lsls	r3, r3, #6
 80011cc:	4a60      	ldr	r2, [pc, #384]	; (8001350 <writecmddata+0x2a8>)
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	2102      	movs	r1, #2
 80011d6:	485d      	ldr	r0, [pc, #372]	; (800134c <writecmddata+0x2a4>)
 80011d8:	f7ff fcd0 	bl	8000b7c <PIN_LOW>
 80011dc:	2102      	movs	r1, #2
 80011de:	485b      	ldr	r0, [pc, #364]	; (800134c <writecmddata+0x2a4>)
 80011e0:	f7ff fccc 	bl	8000b7c <PIN_LOW>
 80011e4:	2102      	movs	r1, #2
 80011e6:	4859      	ldr	r0, [pc, #356]	; (800134c <writecmddata+0x2a4>)
 80011e8:	f7ff fcc8 	bl	8000b7c <PIN_LOW>
 80011ec:	2102      	movs	r1, #2
 80011ee:	4857      	ldr	r0, [pc, #348]	; (800134c <writecmddata+0x2a4>)
 80011f0:	f7ff fcd4 	bl	8000b9c <PIN_HIGH>
 80011f4:	2102      	movs	r1, #2
 80011f6:	4855      	ldr	r0, [pc, #340]	; (800134c <writecmddata+0x2a4>)
 80011f8:	f7ff fcd0 	bl	8000b9c <PIN_HIGH>
 80011fc:	2110      	movs	r1, #16
 80011fe:	4853      	ldr	r0, [pc, #332]	; (800134c <writecmddata+0x2a4>)
 8001200:	f7ff fccc 	bl	8000b9c <PIN_HIGH>
    WriteData(dat);
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	0a1b      	lsrs	r3, r3, #8
 8001208:	b29b      	uxth	r3, r3
 800120a:	737b      	strb	r3, [r7, #13]
 800120c:	88bb      	ldrh	r3, [r7, #4]
 800120e:	733b      	strb	r3, [r7, #12]
 8001210:	4b4e      	ldr	r3, [pc, #312]	; (800134c <writecmddata+0x2a4>)
 8001212:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001216:	619a      	str	r2, [r3, #24]
 8001218:	4b4b      	ldr	r3, [pc, #300]	; (8001348 <writecmddata+0x2a0>)
 800121a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800121e:	619a      	str	r2, [r3, #24]
 8001220:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <writecmddata+0x2a8>)
 8001222:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001226:	619a      	str	r2, [r3, #24]
 8001228:	7b7b      	ldrb	r3, [r7, #13]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001230:	7b7b      	ldrb	r3, [r7, #13]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001238:	431a      	orrs	r2, r3
 800123a:	7b7b      	ldrb	r3, [r7, #13]
 800123c:	025b      	lsls	r3, r3, #9
 800123e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001242:	431a      	orrs	r2, r3
 8001244:	4b41      	ldr	r3, [pc, #260]	; (800134c <writecmddata+0x2a4>)
 8001246:	619a      	str	r2, [r3, #24]
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001250:	7b7b      	ldrb	r3, [r7, #13]
 8001252:	105b      	asrs	r3, r3, #1
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	431a      	orrs	r2, r3
 800125a:	7b7b      	ldrb	r3, [r7, #13]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	431a      	orrs	r2, r3
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	431a      	orrs	r2, r3
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <writecmddata+0x2a0>)
 800126e:	619a      	str	r2, [r3, #24]
 8001270:	7b7b      	ldrb	r3, [r7, #13]
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	4a36      	ldr	r2, [pc, #216]	; (8001350 <writecmddata+0x2a8>)
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	2102      	movs	r1, #2
 800127e:	4833      	ldr	r0, [pc, #204]	; (800134c <writecmddata+0x2a4>)
 8001280:	f7ff fc7c 	bl	8000b7c <PIN_LOW>
 8001284:	2102      	movs	r1, #2
 8001286:	4831      	ldr	r0, [pc, #196]	; (800134c <writecmddata+0x2a4>)
 8001288:	f7ff fc78 	bl	8000b7c <PIN_LOW>
 800128c:	2102      	movs	r1, #2
 800128e:	482f      	ldr	r0, [pc, #188]	; (800134c <writecmddata+0x2a4>)
 8001290:	f7ff fc74 	bl	8000b7c <PIN_LOW>
 8001294:	2102      	movs	r1, #2
 8001296:	482d      	ldr	r0, [pc, #180]	; (800134c <writecmddata+0x2a4>)
 8001298:	f7ff fc80 	bl	8000b9c <PIN_HIGH>
 800129c:	2102      	movs	r1, #2
 800129e:	482b      	ldr	r0, [pc, #172]	; (800134c <writecmddata+0x2a4>)
 80012a0:	f7ff fc7c 	bl	8000b9c <PIN_HIGH>
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <writecmddata+0x2a4>)
 80012a6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80012aa:	619a      	str	r2, [r3, #24]
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <writecmddata+0x2a0>)
 80012ae:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80012b2:	619a      	str	r2, [r3, #24]
 80012b4:	4b26      	ldr	r3, [pc, #152]	; (8001350 <writecmddata+0x2a8>)
 80012b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	7b3b      	ldrb	r3, [r7, #12]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80012c4:	7b3b      	ldrb	r3, [r7, #12]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	431a      	orrs	r2, r3
 80012ce:	7b3b      	ldrb	r3, [r7, #12]
 80012d0:	025b      	lsls	r3, r3, #9
 80012d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012d6:	431a      	orrs	r2, r3
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <writecmddata+0x2a4>)
 80012da:	619a      	str	r2, [r3, #24]
 80012dc:	7b3b      	ldrb	r3, [r7, #12]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80012e4:	7b3b      	ldrb	r3, [r7, #12]
 80012e6:	105b      	asrs	r3, r3, #1
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	431a      	orrs	r2, r3
 80012ee:	7b3b      	ldrb	r3, [r7, #12]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	431a      	orrs	r2, r3
 80012f8:	7b3b      	ldrb	r3, [r7, #12]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	431a      	orrs	r2, r3
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <writecmddata+0x2a0>)
 8001302:	619a      	str	r2, [r3, #24]
 8001304:	7b3b      	ldrb	r3, [r7, #12]
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <writecmddata+0x2a8>)
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	2102      	movs	r1, #2
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <writecmddata+0x2a4>)
 8001314:	f7ff fc32 	bl	8000b7c <PIN_LOW>
 8001318:	2102      	movs	r1, #2
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <writecmddata+0x2a4>)
 800131c:	f7ff fc2e 	bl	8000b7c <PIN_LOW>
 8001320:	2102      	movs	r1, #2
 8001322:	480a      	ldr	r0, [pc, #40]	; (800134c <writecmddata+0x2a4>)
 8001324:	f7ff fc2a 	bl	8000b7c <PIN_LOW>
 8001328:	2102      	movs	r1, #2
 800132a:	4808      	ldr	r0, [pc, #32]	; (800134c <writecmddata+0x2a4>)
 800132c:	f7ff fc36 	bl	8000b9c <PIN_HIGH>
 8001330:	2102      	movs	r1, #2
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <writecmddata+0x2a4>)
 8001334:	f7ff fc32 	bl	8000b9c <PIN_HIGH>
    CS_IDLE;
 8001338:	2101      	movs	r1, #1
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <writecmddata+0x2a0>)
 800133c:	f7ff fc2e 	bl	8000b9c <PIN_HIGH>
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40020400 	.word	0x40020400
 800134c:	40020000 	.word	0x40020000
 8001350:	40020800 	.word	0x40020800

08001354 <WriteCmdParamN>:


static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	603a      	str	r2, [r7, #0]
 800135e:	80fb      	strh	r3, [r7, #6]
 8001360:	460b      	mov	r3, r1
 8001362:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8001364:	2101      	movs	r1, #1
 8001366:	4853      	ldr	r0, [pc, #332]	; (80014b4 <WriteCmdParamN+0x160>)
 8001368:	f7ff fc08 	bl	8000b7c <PIN_LOW>
    WriteCmd(cmd);
 800136c:	2110      	movs	r1, #16
 800136e:	4852      	ldr	r0, [pc, #328]	; (80014b8 <WriteCmdParamN+0x164>)
 8001370:	f7ff fc04 	bl	8000b7c <PIN_LOW>
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29b      	uxth	r3, r3
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	73bb      	strb	r3, [r7, #14]
 8001380:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <WriteCmdParamN+0x164>)
 8001382:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <WriteCmdParamN+0x160>)
 800138a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800138e:	619a      	str	r2, [r3, #24]
 8001390:	4b4a      	ldr	r3, [pc, #296]	; (80014bc <WriteCmdParamN+0x168>)
 8001392:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	431a      	orrs	r2, r3
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b2:	431a      	orrs	r2, r3
 80013b4:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <WriteCmdParamN+0x164>)
 80013b6:	619a      	str	r2, [r3, #24]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	105b      	asrs	r3, r3, #1
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	431a      	orrs	r2, r3
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	431a      	orrs	r2, r3
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	431a      	orrs	r2, r3
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <WriteCmdParamN+0x160>)
 80013de:	619a      	str	r2, [r3, #24]
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	019b      	lsls	r3, r3, #6
 80013e4:	4a35      	ldr	r2, [pc, #212]	; (80014bc <WriteCmdParamN+0x168>)
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	2102      	movs	r1, #2
 80013ee:	4832      	ldr	r0, [pc, #200]	; (80014b8 <WriteCmdParamN+0x164>)
 80013f0:	f7ff fbc4 	bl	8000b7c <PIN_LOW>
 80013f4:	2102      	movs	r1, #2
 80013f6:	4830      	ldr	r0, [pc, #192]	; (80014b8 <WriteCmdParamN+0x164>)
 80013f8:	f7ff fbc0 	bl	8000b7c <PIN_LOW>
 80013fc:	2102      	movs	r1, #2
 80013fe:	482e      	ldr	r0, [pc, #184]	; (80014b8 <WriteCmdParamN+0x164>)
 8001400:	f7ff fbbc 	bl	8000b7c <PIN_LOW>
 8001404:	2102      	movs	r1, #2
 8001406:	482c      	ldr	r0, [pc, #176]	; (80014b8 <WriteCmdParamN+0x164>)
 8001408:	f7ff fbc8 	bl	8000b9c <PIN_HIGH>
 800140c:	2102      	movs	r1, #2
 800140e:	482a      	ldr	r0, [pc, #168]	; (80014b8 <WriteCmdParamN+0x164>)
 8001410:	f7ff fbc4 	bl	8000b9c <PIN_HIGH>
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <WriteCmdParamN+0x164>)
 8001416:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <WriteCmdParamN+0x160>)
 800141e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001422:	619a      	str	r2, [r3, #24]
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <WriteCmdParamN+0x168>)
 8001426:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800142a:	619a      	str	r2, [r3, #24]
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143c:	431a      	orrs	r2, r3
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	025b      	lsls	r3, r3, #9
 8001442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001446:	431a      	orrs	r2, r3
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <WriteCmdParamN+0x164>)
 800144a:	619a      	str	r2, [r3, #24]
 800144c:	7bbb      	ldrb	r3, [r7, #14]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	105b      	asrs	r3, r3, #1
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	431a      	orrs	r2, r3
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	431a      	orrs	r2, r3
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	431a      	orrs	r2, r3
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <WriteCmdParamN+0x160>)
 8001472:	619a      	str	r2, [r3, #24]
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	019b      	lsls	r3, r3, #6
 8001478:	4a10      	ldr	r2, [pc, #64]	; (80014bc <WriteCmdParamN+0x168>)
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	2102      	movs	r1, #2
 8001482:	480d      	ldr	r0, [pc, #52]	; (80014b8 <WriteCmdParamN+0x164>)
 8001484:	f7ff fb7a 	bl	8000b7c <PIN_LOW>
 8001488:	2102      	movs	r1, #2
 800148a:	480b      	ldr	r0, [pc, #44]	; (80014b8 <WriteCmdParamN+0x164>)
 800148c:	f7ff fb76 	bl	8000b7c <PIN_LOW>
 8001490:	2102      	movs	r1, #2
 8001492:	4809      	ldr	r0, [pc, #36]	; (80014b8 <WriteCmdParamN+0x164>)
 8001494:	f7ff fb72 	bl	8000b7c <PIN_LOW>
 8001498:	2102      	movs	r1, #2
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <WriteCmdParamN+0x164>)
 800149c:	f7ff fb7e 	bl	8000b9c <PIN_HIGH>
 80014a0:	2102      	movs	r1, #2
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <WriteCmdParamN+0x164>)
 80014a4:	f7ff fb7a 	bl	8000b9c <PIN_HIGH>
 80014a8:	2110      	movs	r1, #16
 80014aa:	4803      	ldr	r0, [pc, #12]	; (80014b8 <WriteCmdParamN+0x164>)
 80014ac:	f7ff fb76 	bl	8000b9c <PIN_HIGH>
    while (N-- > 0) {
 80014b0:	e104      	b.n	80016bc <WriteCmdParamN+0x368>
 80014b2:	bf00      	nop
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	603a      	str	r2, [r7, #0]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	737b      	strb	r3, [r7, #13]
        write8(u8);
 80014ca:	4b85      	ldr	r3, [pc, #532]	; (80016e0 <WriteCmdParamN+0x38c>)
 80014cc:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80014d0:	619a      	str	r2, [r3, #24]
 80014d2:	4b84      	ldr	r3, [pc, #528]	; (80016e4 <WriteCmdParamN+0x390>)
 80014d4:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80014d8:	619a      	str	r2, [r3, #24]
 80014da:	4b83      	ldr	r3, [pc, #524]	; (80016e8 <WriteCmdParamN+0x394>)
 80014dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014e0:	619a      	str	r2, [r3, #24]
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80014ea:	7b7b      	ldrb	r3, [r7, #13]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f2:	431a      	orrs	r2, r3
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	025b      	lsls	r3, r3, #9
 80014f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014fc:	431a      	orrs	r2, r3
 80014fe:	4b78      	ldr	r3, [pc, #480]	; (80016e0 <WriteCmdParamN+0x38c>)
 8001500:	619a      	str	r2, [r3, #24]
 8001502:	7b7b      	ldrb	r3, [r7, #13]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800150a:	7b7b      	ldrb	r3, [r7, #13]
 800150c:	105b      	asrs	r3, r3, #1
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	431a      	orrs	r2, r3
 800151e:	7b7b      	ldrb	r3, [r7, #13]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	431a      	orrs	r2, r3
 8001526:	4b6f      	ldr	r3, [pc, #444]	; (80016e4 <WriteCmdParamN+0x390>)
 8001528:	619a      	str	r2, [r3, #24]
 800152a:	7b7b      	ldrb	r3, [r7, #13]
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	4a6e      	ldr	r2, [pc, #440]	; (80016e8 <WriteCmdParamN+0x394>)
 8001530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001534:	6193      	str	r3, [r2, #24]
 8001536:	2102      	movs	r1, #2
 8001538:	4869      	ldr	r0, [pc, #420]	; (80016e0 <WriteCmdParamN+0x38c>)
 800153a:	f7ff fb1f 	bl	8000b7c <PIN_LOW>
 800153e:	2102      	movs	r1, #2
 8001540:	4867      	ldr	r0, [pc, #412]	; (80016e0 <WriteCmdParamN+0x38c>)
 8001542:	f7ff fb1b 	bl	8000b7c <PIN_LOW>
 8001546:	2102      	movs	r1, #2
 8001548:	4865      	ldr	r0, [pc, #404]	; (80016e0 <WriteCmdParamN+0x38c>)
 800154a:	f7ff fb17 	bl	8000b7c <PIN_LOW>
 800154e:	2102      	movs	r1, #2
 8001550:	4863      	ldr	r0, [pc, #396]	; (80016e0 <WriteCmdParamN+0x38c>)
 8001552:	f7ff fb23 	bl	8000b9c <PIN_HIGH>
 8001556:	2102      	movs	r1, #2
 8001558:	4861      	ldr	r0, [pc, #388]	; (80016e0 <WriteCmdParamN+0x38c>)
 800155a:	f7ff fb1f 	bl	8000b9c <PIN_HIGH>
        if (N && is8347) {
 800155e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80aa 	beq.w	80016bc <WriteCmdParamN+0x368>
 8001568:	4b60      	ldr	r3, [pc, #384]	; (80016ec <WriteCmdParamN+0x398>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a5 	beq.w	80016bc <WriteCmdParamN+0x368>
            cmd++;
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	3301      	adds	r3, #1
 8001576:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8001578:	2110      	movs	r1, #16
 800157a:	4859      	ldr	r0, [pc, #356]	; (80016e0 <WriteCmdParamN+0x38c>)
 800157c:	f7ff fafe 	bl	8000b7c <PIN_LOW>
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	b29b      	uxth	r3, r3
 8001586:	733b      	strb	r3, [r7, #12]
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	72fb      	strb	r3, [r7, #11]
 800158c:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <WriteCmdParamN+0x38c>)
 800158e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001592:	619a      	str	r2, [r3, #24]
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <WriteCmdParamN+0x390>)
 8001596:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800159a:	619a      	str	r2, [r3, #24]
 800159c:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <WriteCmdParamN+0x394>)
 800159e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015a2:	619a      	str	r2, [r3, #24]
 80015a4:	7b3b      	ldrb	r3, [r7, #12]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80015ac:	7b3b      	ldrb	r3, [r7, #12]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	431a      	orrs	r2, r3
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	025b      	lsls	r3, r3, #9
 80015ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015be:	431a      	orrs	r2, r3
 80015c0:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <WriteCmdParamN+0x38c>)
 80015c2:	619a      	str	r2, [r3, #24]
 80015c4:	7b3b      	ldrb	r3, [r7, #12]
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80015cc:	7b3b      	ldrb	r3, [r7, #12]
 80015ce:	105b      	asrs	r3, r3, #1
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	431a      	orrs	r2, r3
 80015d6:	7b3b      	ldrb	r3, [r7, #12]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	431a      	orrs	r2, r3
 80015e0:	7b3b      	ldrb	r3, [r7, #12]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	431a      	orrs	r2, r3
 80015e8:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <WriteCmdParamN+0x390>)
 80015ea:	619a      	str	r2, [r3, #24]
 80015ec:	7b3b      	ldrb	r3, [r7, #12]
 80015ee:	019b      	lsls	r3, r3, #6
 80015f0:	4a3d      	ldr	r2, [pc, #244]	; (80016e8 <WriteCmdParamN+0x394>)
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	2102      	movs	r1, #2
 80015fa:	4839      	ldr	r0, [pc, #228]	; (80016e0 <WriteCmdParamN+0x38c>)
 80015fc:	f7ff fabe 	bl	8000b7c <PIN_LOW>
 8001600:	2102      	movs	r1, #2
 8001602:	4837      	ldr	r0, [pc, #220]	; (80016e0 <WriteCmdParamN+0x38c>)
 8001604:	f7ff faba 	bl	8000b7c <PIN_LOW>
 8001608:	2102      	movs	r1, #2
 800160a:	4835      	ldr	r0, [pc, #212]	; (80016e0 <WriteCmdParamN+0x38c>)
 800160c:	f7ff fab6 	bl	8000b7c <PIN_LOW>
 8001610:	2102      	movs	r1, #2
 8001612:	4833      	ldr	r0, [pc, #204]	; (80016e0 <WriteCmdParamN+0x38c>)
 8001614:	f7ff fac2 	bl	8000b9c <PIN_HIGH>
 8001618:	2102      	movs	r1, #2
 800161a:	4831      	ldr	r0, [pc, #196]	; (80016e0 <WriteCmdParamN+0x38c>)
 800161c:	f7ff fabe 	bl	8000b9c <PIN_HIGH>
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <WriteCmdParamN+0x38c>)
 8001622:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001626:	619a      	str	r2, [r3, #24]
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <WriteCmdParamN+0x390>)
 800162a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800162e:	619a      	str	r2, [r3, #24]
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <WriteCmdParamN+0x394>)
 8001632:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001636:	619a      	str	r2, [r3, #24]
 8001638:	7afb      	ldrb	r3, [r7, #11]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	431a      	orrs	r2, r3
 800164a:	7afb      	ldrb	r3, [r7, #11]
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001652:	431a      	orrs	r2, r3
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <WriteCmdParamN+0x38c>)
 8001656:	619a      	str	r2, [r3, #24]
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	105b      	asrs	r3, r3, #1
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	431a      	orrs	r2, r3
 800166a:	7afb      	ldrb	r3, [r7, #11]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	431a      	orrs	r2, r3
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	431a      	orrs	r2, r3
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <WriteCmdParamN+0x390>)
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	019b      	lsls	r3, r3, #6
 8001684:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <WriteCmdParamN+0x394>)
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	2102      	movs	r1, #2
 800168e:	4814      	ldr	r0, [pc, #80]	; (80016e0 <WriteCmdParamN+0x38c>)
 8001690:	f7ff fa74 	bl	8000b7c <PIN_LOW>
 8001694:	2102      	movs	r1, #2
 8001696:	4812      	ldr	r0, [pc, #72]	; (80016e0 <WriteCmdParamN+0x38c>)
 8001698:	f7ff fa70 	bl	8000b7c <PIN_LOW>
 800169c:	2102      	movs	r1, #2
 800169e:	4810      	ldr	r0, [pc, #64]	; (80016e0 <WriteCmdParamN+0x38c>)
 80016a0:	f7ff fa6c 	bl	8000b7c <PIN_LOW>
 80016a4:	2102      	movs	r1, #2
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <WriteCmdParamN+0x38c>)
 80016a8:	f7ff fa78 	bl	8000b9c <PIN_HIGH>
 80016ac:	2102      	movs	r1, #2
 80016ae:	480c      	ldr	r0, [pc, #48]	; (80016e0 <WriteCmdParamN+0x38c>)
 80016b0:	f7ff fa74 	bl	8000b9c <PIN_HIGH>
 80016b4:	2110      	movs	r1, #16
 80016b6:	480a      	ldr	r0, [pc, #40]	; (80016e0 <WriteCmdParamN+0x38c>)
 80016b8:	f7ff fa70 	bl	8000b9c <PIN_HIGH>
    while (N-- > 0) {
 80016bc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	3a01      	subs	r2, #1
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	717a      	strb	r2, [r7, #5]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f73f aef9 	bgt.w	80014c0 <WriteCmdParamN+0x16c>
        }
    }
    CS_IDLE;
 80016ce:	2101      	movs	r1, #1
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <WriteCmdParamN+0x390>)
 80016d2:	f7ff fa63 	bl	8000b9c <PIN_HIGH>
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	2000002f 	.word	0x2000002f

080016f0 <WriteCmdParam4>:


static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4604      	mov	r4, r0
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4623      	mov	r3, r4
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	4603      	mov	r3, r0
 8001704:	71bb      	strb	r3, [r7, #6]
 8001706:	460b      	mov	r3, r1
 8001708:	717b      	strb	r3, [r7, #5]
 800170a:	4613      	mov	r3, r2
 800170c:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	733b      	strb	r3, [r7, #12]
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	737b      	strb	r3, [r7, #13]
 8001716:	793b      	ldrb	r3, [r7, #4]
 8001718:	73bb      	strb	r3, [r7, #14]
 800171a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800171e:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	b29b      	uxth	r3, r3
 8001724:	f107 020c 	add.w	r2, r7, #12
 8001728:	2104      	movs	r1, #4
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fe12 	bl	8001354 <WriteCmdParamN>
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8001748:	e046      	b.n	80017d8 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	627a      	str	r2, [r7, #36]	; 0x24
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	627a      	str	r2, [r7, #36]	; 0x24
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8001762:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001766:	2b7f      	cmp	r3, #127	; 0x7f
 8001768:	d108      	bne.n	800177c <init_table+0x44>
        {
            delay(len);
 800176a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800176e:	4618      	mov	r0, r3
 8001770:	f002 ff56 	bl	8004620 <delay>
            len = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800177a:	e024      	b.n	80017c6 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001782:	e010      	b.n	80017a6 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	627a      	str	r2, [r7, #36]	; 0x24
 800178a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800178e:	7819      	ldrb	r1, [r3, #0]
 8001790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001794:	4413      	add	r3, r2
 8001796:	460a      	mov	r2, r1
 8001798:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 800179c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017a0:	3301      	adds	r3, #1
 80017a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017a6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80017aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3e8      	bcc.n	8001784 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 80017b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80017bc:	f107 0208 	add.w	r2, r7, #8
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fdc7 	bl	8001354 <WriteCmdParamN>
        }
        size -= len + 2;
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3b02      	subs	r3, #2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 80017d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	dcb4      	bgt.n	800174a <init_table+0x12>
    }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 80017fa:	e01d      	b.n	8001838 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1c9a      	adds	r2, r3, #2
 8001800:	60fa      	str	r2, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1c9a      	adds	r2, r3, #2
 800180a:	60fa      	str	r2, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001810:	897b      	ldrh	r3, [r7, #10]
 8001812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001816:	4293      	cmp	r3, r2
 8001818:	d104      	bne.n	8001824 <init_table16+0x3a>
            delay(d);
 800181a:	893b      	ldrh	r3, [r7, #8]
 800181c:	4618      	mov	r0, r3
 800181e:	f002 feff 	bl	8004620 <delay>
 8001822:	e005      	b.n	8001830 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8001824:	893a      	ldrh	r2, [r7, #8]
 8001826:	897b      	ldrh	r3, [r7, #10]
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc3c 	bl	80010a8 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	3b04      	subs	r3, #4
 8001834:	b29b      	uxth	r3, r3
 8001836:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001838:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800183c:	2b00      	cmp	r3, #0
 800183e:	dcdd      	bgt.n	80017fc <init_table16+0x12>
    }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <reset>:


void reset(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <reset+0x88>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8001856:	f7ff faf9 	bl	8000e4c <setWriteDir>
    CTL_INIT();
 800185a:	2101      	movs	r1, #1
 800185c:	481e      	ldr	r0, [pc, #120]	; (80018d8 <reset+0x8c>)
 800185e:	f7ff f9c3 	bl	8000be8 <PIN_OUTPUT>
 8001862:	2102      	movs	r1, #2
 8001864:	481c      	ldr	r0, [pc, #112]	; (80018d8 <reset+0x8c>)
 8001866:	f7ff f9bf 	bl	8000be8 <PIN_OUTPUT>
 800186a:	2110      	movs	r1, #16
 800186c:	481a      	ldr	r0, [pc, #104]	; (80018d8 <reset+0x8c>)
 800186e:	f7ff f9bb 	bl	8000be8 <PIN_OUTPUT>
 8001872:	2101      	movs	r1, #1
 8001874:	4819      	ldr	r0, [pc, #100]	; (80018dc <reset+0x90>)
 8001876:	f7ff f9b7 	bl	8000be8 <PIN_OUTPUT>
 800187a:	2102      	movs	r1, #2
 800187c:	4818      	ldr	r0, [pc, #96]	; (80018e0 <reset+0x94>)
 800187e:	f7ff f9b3 	bl	8000be8 <PIN_OUTPUT>
    CS_IDLE;
 8001882:	2101      	movs	r1, #1
 8001884:	4815      	ldr	r0, [pc, #84]	; (80018dc <reset+0x90>)
 8001886:	f7ff f989 	bl	8000b9c <PIN_HIGH>
    RD_IDLE;
 800188a:	2101      	movs	r1, #1
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <reset+0x8c>)
 800188e:	f7ff f985 	bl	8000b9c <PIN_HIGH>
    WR_IDLE;
 8001892:	2102      	movs	r1, #2
 8001894:	4810      	ldr	r0, [pc, #64]	; (80018d8 <reset+0x8c>)
 8001896:	f7ff f981 	bl	8000b9c <PIN_HIGH>
    RESET_IDLE;
 800189a:	2102      	movs	r1, #2
 800189c:	4810      	ldr	r0, [pc, #64]	; (80018e0 <reset+0x94>)
 800189e:	f7ff f97d 	bl	8000b9c <PIN_HIGH>
    delay(50);
 80018a2:	2032      	movs	r0, #50	; 0x32
 80018a4:	f002 febc 	bl	8004620 <delay>
    RESET_ACTIVE;
 80018a8:	2102      	movs	r1, #2
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <reset+0x94>)
 80018ac:	f7ff f966 	bl	8000b7c <PIN_LOW>
    delay(100);
 80018b0:	2064      	movs	r0, #100	; 0x64
 80018b2:	f002 feb5 	bl	8004620 <delay>
    RESET_IDLE;
 80018b6:	2102      	movs	r1, #2
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <reset+0x94>)
 80018ba:	f7ff f96f 	bl	8000b9c <PIN_HIGH>
    delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 80018be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c2:	f002 fead 	bl	8004620 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 80018c6:	2100      	movs	r1, #0
 80018c8:	20b0      	movs	r0, #176	; 0xb0
 80018ca:	f7ff fa6c 	bl	8000da6 <WriteCmdData>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000002e 	.word	0x2000002e
 80018d8:	40020000 	.word	0x40020000
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40020800 	.word	0x40020800

080018e4 <read16bits>:


static uint16_t read16bits(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 80018ea:	2101      	movs	r1, #1
 80018ec:	4873      	ldr	r0, [pc, #460]	; (8001abc <read16bits+0x1d8>)
 80018ee:	f7ff f955 	bl	8000b9c <PIN_HIGH>
 80018f2:	2101      	movs	r1, #1
 80018f4:	4871      	ldr	r0, [pc, #452]	; (8001abc <read16bits+0x1d8>)
 80018f6:	f7ff f941 	bl	8000b7c <PIN_LOW>
 80018fa:	2101      	movs	r1, #1
 80018fc:	486f      	ldr	r0, [pc, #444]	; (8001abc <read16bits+0x1d8>)
 80018fe:	f7ff f93d 	bl	8000b7c <PIN_LOW>
 8001902:	2101      	movs	r1, #1
 8001904:	486d      	ldr	r0, [pc, #436]	; (8001abc <read16bits+0x1d8>)
 8001906:	f7ff f939 	bl	8000b7c <PIN_LOW>
 800190a:	2101      	movs	r1, #1
 800190c:	486b      	ldr	r0, [pc, #428]	; (8001abc <read16bits+0x1d8>)
 800190e:	f7ff f935 	bl	8000b7c <PIN_LOW>
 8001912:	2101      	movs	r1, #1
 8001914:	4869      	ldr	r0, [pc, #420]	; (8001abc <read16bits+0x1d8>)
 8001916:	f7ff f931 	bl	8000b7c <PIN_LOW>
 800191a:	2101      	movs	r1, #1
 800191c:	4867      	ldr	r0, [pc, #412]	; (8001abc <read16bits+0x1d8>)
 800191e:	f7ff f92d 	bl	8000b7c <PIN_LOW>
 8001922:	2101      	movs	r1, #1
 8001924:	4865      	ldr	r0, [pc, #404]	; (8001abc <read16bits+0x1d8>)
 8001926:	f7ff f929 	bl	8000b7c <PIN_LOW>
 800192a:	4b64      	ldr	r3, [pc, #400]	; (8001abc <read16bits+0x1d8>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	b29b      	uxth	r3, r3
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <read16bits+0x1dc>)
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	b29b      	uxth	r3, r3
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	b29b      	uxth	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <read16bits+0x1dc>)
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	b29b      	uxth	r3, r3
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b29b      	uxth	r3, r3
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	b29b      	uxth	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b58      	ldr	r3, [pc, #352]	; (8001ac0 <read16bits+0x1dc>)
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	b29b      	uxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <read16bits+0x1dc>)
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	b29b      	uxth	r3, r3
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	b29b      	uxth	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <read16bits+0x1d8>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	b29b      	uxth	r3, r3
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	b29b      	uxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <read16bits+0x1e0>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	b29b      	uxth	r3, r3
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b45      	ldr	r3, [pc, #276]	; (8001abc <read16bits+0x1d8>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	0a5b      	lsrs	r3, r3, #9
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]
 80019b6:	2101      	movs	r1, #1
 80019b8:	4840      	ldr	r0, [pc, #256]	; (8001abc <read16bits+0x1d8>)
 80019ba:	f7ff f8ef 	bl	8000b9c <PIN_HIGH>
 80019be:	2101      	movs	r1, #1
 80019c0:	483e      	ldr	r0, [pc, #248]	; (8001abc <read16bits+0x1d8>)
 80019c2:	f7ff f8eb 	bl	8000b9c <PIN_HIGH>
    READ_8(lo);
 80019c6:	2101      	movs	r1, #1
 80019c8:	483c      	ldr	r0, [pc, #240]	; (8001abc <read16bits+0x1d8>)
 80019ca:	f7ff f8e7 	bl	8000b9c <PIN_HIGH>
 80019ce:	2101      	movs	r1, #1
 80019d0:	483a      	ldr	r0, [pc, #232]	; (8001abc <read16bits+0x1d8>)
 80019d2:	f7ff f8d3 	bl	8000b7c <PIN_LOW>
 80019d6:	2101      	movs	r1, #1
 80019d8:	4838      	ldr	r0, [pc, #224]	; (8001abc <read16bits+0x1d8>)
 80019da:	f7ff f8cf 	bl	8000b7c <PIN_LOW>
 80019de:	2101      	movs	r1, #1
 80019e0:	4836      	ldr	r0, [pc, #216]	; (8001abc <read16bits+0x1d8>)
 80019e2:	f7ff f8cb 	bl	8000b7c <PIN_LOW>
 80019e6:	2101      	movs	r1, #1
 80019e8:	4834      	ldr	r0, [pc, #208]	; (8001abc <read16bits+0x1d8>)
 80019ea:	f7ff f8c7 	bl	8000b7c <PIN_LOW>
 80019ee:	2101      	movs	r1, #1
 80019f0:	4832      	ldr	r0, [pc, #200]	; (8001abc <read16bits+0x1d8>)
 80019f2:	f7ff f8c3 	bl	8000b7c <PIN_LOW>
 80019f6:	2101      	movs	r1, #1
 80019f8:	4830      	ldr	r0, [pc, #192]	; (8001abc <read16bits+0x1d8>)
 80019fa:	f7ff f8bf 	bl	8000b7c <PIN_LOW>
 80019fe:	2101      	movs	r1, #1
 8001a00:	482e      	ldr	r0, [pc, #184]	; (8001abc <read16bits+0x1d8>)
 8001a02:	f7ff f8bb 	bl	8000b7c <PIN_LOW>
 8001a06:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <read16bits+0x1d8>)
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <read16bits+0x1dc>)
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <read16bits+0x1dc>)
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <read16bits+0x1dc>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <read16bits+0x1dc>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <read16bits+0x1d8>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <read16bits+0x1e0>)
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <read16bits+0x1d8>)
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	0a5b      	lsrs	r3, r3, #9
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	717b      	strb	r3, [r7, #5]
 8001a92:	2101      	movs	r1, #1
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <read16bits+0x1d8>)
 8001a96:	f7ff f881 	bl	8000b9c <PIN_HIGH>
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <read16bits+0x1d8>)
 8001a9e:	f7ff f87d 	bl	8000b9c <PIN_HIGH>
    return (ret << 8) | lo;
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b21a      	sxth	r2, r3
 8001aa8:	797b      	ldrb	r3, [r7, #5]
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	b29b      	uxth	r3, r3
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40020800 	.word	0x40020800

08001ac8 <readReg>:


uint16_t readReg(uint16_t reg, int8_t index)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	80fb      	strh	r3, [r7, #6]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8001ad8:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <readReg+0x1a8>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <readReg+0x1c>
        reset();
 8001ae0:	f7ff feb4 	bl	800184c <reset>
    CS_ACTIVE;
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4863      	ldr	r0, [pc, #396]	; (8001c74 <readReg+0x1ac>)
 8001ae8:	f7ff f848 	bl	8000b7c <PIN_LOW>
    WriteCmd(reg);
 8001aec:	2110      	movs	r1, #16
 8001aee:	4862      	ldr	r0, [pc, #392]	; (8001c78 <readReg+0x1b0>)
 8001af0:	f7ff f844 	bl	8000b7c <PIN_LOW>
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	73bb      	strb	r3, [r7, #14]
 8001b00:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <readReg+0x1b0>)
 8001b02:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001b06:	619a      	str	r2, [r3, #24]
 8001b08:	4b5a      	ldr	r3, [pc, #360]	; (8001c74 <readReg+0x1ac>)
 8001b0a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001b0e:	619a      	str	r2, [r3, #24]
 8001b10:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <readReg+0x1b4>)
 8001b12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b16:	619a      	str	r2, [r3, #24]
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b32:	431a      	orrs	r2, r3
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <readReg+0x1b0>)
 8001b36:	619a      	str	r2, [r3, #24]
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	105b      	asrs	r3, r3, #1
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	431a      	orrs	r2, r3
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <readReg+0x1ac>)
 8001b5e:	619a      	str	r2, [r3, #24]
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	019b      	lsls	r3, r3, #6
 8001b64:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <readReg+0x1b4>)
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	4842      	ldr	r0, [pc, #264]	; (8001c78 <readReg+0x1b0>)
 8001b70:	f7ff f804 	bl	8000b7c <PIN_LOW>
 8001b74:	2102      	movs	r1, #2
 8001b76:	4840      	ldr	r0, [pc, #256]	; (8001c78 <readReg+0x1b0>)
 8001b78:	f7ff f800 	bl	8000b7c <PIN_LOW>
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	483e      	ldr	r0, [pc, #248]	; (8001c78 <readReg+0x1b0>)
 8001b80:	f7fe fffc 	bl	8000b7c <PIN_LOW>
 8001b84:	2102      	movs	r1, #2
 8001b86:	483c      	ldr	r0, [pc, #240]	; (8001c78 <readReg+0x1b0>)
 8001b88:	f7ff f808 	bl	8000b9c <PIN_HIGH>
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	483a      	ldr	r0, [pc, #232]	; (8001c78 <readReg+0x1b0>)
 8001b90:	f7ff f804 	bl	8000b9c <PIN_HIGH>
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <readReg+0x1b0>)
 8001b96:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001b9a:	619a      	str	r2, [r3, #24]
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <readReg+0x1ac>)
 8001b9e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001ba2:	619a      	str	r2, [r3, #24]
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <readReg+0x1b4>)
 8001ba6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001baa:	619a      	str	r2, [r3, #24]
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	7bbb      	ldrb	r3, [r7, #14]
 8001bc0:	025b      	lsls	r3, r3, #9
 8001bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <readReg+0x1b0>)
 8001bca:	619a      	str	r2, [r3, #24]
 8001bcc:	7bbb      	ldrb	r3, [r7, #14]
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001bd4:	7bbb      	ldrb	r3, [r7, #14]
 8001bd6:	105b      	asrs	r3, r3, #1
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	7bbb      	ldrb	r3, [r7, #14]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	431a      	orrs	r2, r3
 8001be8:	7bbb      	ldrb	r3, [r7, #14]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <readReg+0x1ac>)
 8001bf2:	619a      	str	r2, [r3, #24]
 8001bf4:	7bbb      	ldrb	r3, [r7, #14]
 8001bf6:	019b      	lsls	r3, r3, #6
 8001bf8:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <readReg+0x1b4>)
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	2102      	movs	r1, #2
 8001c02:	481d      	ldr	r0, [pc, #116]	; (8001c78 <readReg+0x1b0>)
 8001c04:	f7fe ffba 	bl	8000b7c <PIN_LOW>
 8001c08:	2102      	movs	r1, #2
 8001c0a:	481b      	ldr	r0, [pc, #108]	; (8001c78 <readReg+0x1b0>)
 8001c0c:	f7fe ffb6 	bl	8000b7c <PIN_LOW>
 8001c10:	2102      	movs	r1, #2
 8001c12:	4819      	ldr	r0, [pc, #100]	; (8001c78 <readReg+0x1b0>)
 8001c14:	f7fe ffb2 	bl	8000b7c <PIN_LOW>
 8001c18:	2102      	movs	r1, #2
 8001c1a:	4817      	ldr	r0, [pc, #92]	; (8001c78 <readReg+0x1b0>)
 8001c1c:	f7fe ffbe 	bl	8000b9c <PIN_HIGH>
 8001c20:	2102      	movs	r1, #2
 8001c22:	4815      	ldr	r0, [pc, #84]	; (8001c78 <readReg+0x1b0>)
 8001c24:	f7fe ffba 	bl	8000b9c <PIN_HIGH>
 8001c28:	2110      	movs	r1, #16
 8001c2a:	4813      	ldr	r0, [pc, #76]	; (8001c78 <readReg+0x1b0>)
 8001c2c:	f7fe ffb6 	bl	8000b9c <PIN_HIGH>
    setReadDir();
 8001c30:	f7ff f8de 	bl	8000df0 <setReadDir>
    delay(1);    //1us should be adequate
 8001c34:	2001      	movs	r0, #1
 8001c36:	f002 fcf3 	bl	8004620 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001c3a:	f7ff fe53 	bl	80018e4 <read16bits>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	81bb      	strh	r3, [r7, #12]
 8001c42:	797b      	ldrb	r3, [r7, #5]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	717b      	strb	r3, [r7, #5]
 8001c4a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	daf3      	bge.n	8001c3a <readReg+0x172>
    RD_IDLE;
 8001c52:	2101      	movs	r1, #1
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <readReg+0x1b0>)
 8001c56:	f7fe ffa1 	bl	8000b9c <PIN_HIGH>
    CS_IDLE;
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <readReg+0x1ac>)
 8001c5e:	f7fe ff9d 	bl	8000b9c <PIN_HIGH>
    setWriteDir();
 8001c62:	f7ff f8f3 	bl	8000e4c <setWriteDir>
    return ret;
 8001c66:	89bb      	ldrh	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000002e 	.word	0x2000002e
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020800 	.word	0x40020800

08001c80 <readReg32>:


uint32_t readReg32(uint16_t reg)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff1a 	bl	8001ac8 <readReg>
 8001c94:	4603      	mov	r3, r0
 8001c96:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff13 	bl	8001ac8 <readReg>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8001ca6:	89fb      	ldrh	r3, [r7, #14]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	89bb      	ldrh	r3, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <readReg40>:


uint32_t readReg40(uint16_t reg)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff feff 	bl	8001ac8 <readReg>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fef8 	bl	8001ac8 <readReg>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fef1 	bl	8001ac8 <readReg>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	89ba      	ldrh	r2, [r7, #12]
 8001cf0:	0212      	lsls	r2, r2, #8
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	897a      	ldrh	r2, [r7, #10]
 8001cf6:	0a12      	lsrs	r2, r2, #8
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	4313      	orrs	r3, r2
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <tft_init>:


void tft_init(uint16_t ID)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8001d16:	4be1      	ldr	r3, [pc, #900]	; (800209c <tft_init+0x398>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8001d1c:	4ae0      	ldr	r2, [pc, #896]	; (80020a0 <tft_init+0x39c>)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	8013      	strh	r3, [r2, #0]
 8001d22:	4bdf      	ldr	r3, [pc, #892]	; (80020a0 <tft_init+0x39c>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	f000 82cc 	beq.w	80022c8 <tft_init+0x5c4>
 8001d30:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001d34:	4293      	cmp	r3, r2
 8001d36:	f300 8303 	bgt.w	8002340 <tft_init+0x63c>
 8001d3a:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	f000 82cb 	beq.w	80022da <tft_init+0x5d6>
 8001d44:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	f300 82f9 	bgt.w	8002340 <tft_init+0x63c>
 8001d4e:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001d52:	4293      	cmp	r3, r2
 8001d54:	f000 82b8 	beq.w	80022c8 <tft_init+0x5c4>
 8001d58:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	f300 82ef 	bgt.w	8002340 <tft_init+0x63c>
 8001d62:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001d66:	4293      	cmp	r3, r2
 8001d68:	f000 8239 	beq.w	80021de <tft_init+0x4da>
 8001d6c:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001d70:	4293      	cmp	r3, r2
 8001d72:	f300 82e5 	bgt.w	8002340 <tft_init+0x63c>
 8001d76:	f249 4288 	movw	r2, #38024	; 0x9488
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	f300 82e0 	bgt.w	8002340 <tft_init+0x63c>
 8001d80:	f249 4287 	movw	r2, #38023	; 0x9487
 8001d84:	4293      	cmp	r3, r2
 8001d86:	f280 8288 	bge.w	800229a <tft_init+0x596>
 8001d8a:	f249 4286 	movw	r2, #38022	; 0x9486
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	f000 8269 	beq.w	8002266 <tft_init+0x562>
 8001d94:	f249 4286 	movw	r2, #38022	; 0x9486
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	f300 82d1 	bgt.w	8002340 <tft_init+0x63c>
 8001d9e:	f249 4281 	movw	r2, #38017	; 0x9481
 8001da2:	4293      	cmp	r3, r2
 8001da4:	f000 8248 	beq.w	8002238 <tft_init+0x534>
 8001da8:	f249 4281 	movw	r2, #38017	; 0x9481
 8001dac:	4293      	cmp	r3, r2
 8001dae:	f300 82c7 	bgt.w	8002340 <tft_init+0x63c>
 8001db2:	f249 3241 	movw	r2, #37697	; 0x9341
 8001db6:	4293      	cmp	r3, r2
 8001db8:	f300 82c2 	bgt.w	8002340 <tft_init+0x63c>
 8001dbc:	f249 3202 	movw	r2, #37634	; 0x9302
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f280 80a5 	bge.w	8001f10 <tft_init+0x20c>
 8001dc6:	f249 0290 	movw	r2, #37008	; 0x9090
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	f000 818f 	beq.w	80020ee <tft_init+0x3ea>
 8001dd0:	f249 0290 	movw	r2, #37008	; 0x9090
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	f300 82b3 	bgt.w	8002340 <tft_init+0x63c>
 8001dda:	f248 3257 	movw	r2, #33623	; 0x8357
 8001dde:	4293      	cmp	r3, r2
 8001de0:	f000 8180 	beq.w	80020e4 <tft_init+0x3e0>
 8001de4:	f248 3257 	movw	r2, #33623	; 0x8357
 8001de8:	4293      	cmp	r3, r2
 8001dea:	f300 82a9 	bgt.w	8002340 <tft_init+0x63c>
 8001dee:	f248 0231 	movw	r2, #32817	; 0x8031
 8001df2:	4293      	cmp	r3, r2
 8001df4:	f000 816d 	beq.w	80020d2 <tft_init+0x3ce>
 8001df8:	f248 0231 	movw	r2, #32817	; 0x8031
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	f300 829f 	bgt.w	8002340 <tft_init+0x63c>
 8001e02:	f247 7296 	movw	r2, #30614	; 0x7796
 8001e06:	4293      	cmp	r3, r2
 8001e08:	f000 8242 	beq.w	8002290 <tft_init+0x58c>
 8001e0c:	f247 7296 	movw	r2, #30614	; 0x7796
 8001e10:	4293      	cmp	r3, r2
 8001e12:	f300 8295 	bgt.w	8002340 <tft_init+0x63c>
 8001e16:	f247 7293 	movw	r2, #30611	; 0x7793
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	f000 825d 	beq.w	80022da <tft_init+0x5d6>
 8001e20:	f247 7293 	movw	r2, #30611	; 0x7793
 8001e24:	4293      	cmp	r3, r2
 8001e26:	f300 828b 	bgt.w	8002340 <tft_init+0x63c>
 8001e2a:	f247 7289 	movw	r2, #30601	; 0x7789
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	f000 8146 	beq.w	80020c0 <tft_init+0x3bc>
 8001e34:	f247 7289 	movw	r2, #30601	; 0x7789
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	f300 8281 	bgt.w	8002340 <tft_init+0x63c>
 8001e3e:	f646 0209 	movw	r2, #26633	; 0x6809
 8001e42:	4293      	cmp	r3, r2
 8001e44:	f000 8194 	beq.w	8002170 <tft_init+0x46c>
 8001e48:	f646 0209 	movw	r2, #26633	; 0x6809
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	f300 8277 	bgt.w	8002340 <tft_init+0x63c>
 8001e52:	f245 4208 	movw	r2, #21512	; 0x5408
 8001e56:	4293      	cmp	r3, r2
 8001e58:	f000 817a 	beq.w	8002150 <tft_init+0x44c>
 8001e5c:	f245 4208 	movw	r2, #21512	; 0x5408
 8001e60:	4293      	cmp	r3, r2
 8001e62:	f300 826d 	bgt.w	8002340 <tft_init+0x63c>
 8001e66:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	f000 8100 	beq.w	8002070 <tft_init+0x36c>
 8001e70:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e74:	4293      	cmp	r3, r2
 8001e76:	f300 8263 	bgt.w	8002340 <tft_init+0x63c>
 8001e7a:	f242 0253 	movw	r2, #8275	; 0x2053
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	f000 81a8 	beq.w	80021d4 <tft_init+0x4d0>
 8001e84:	f242 0253 	movw	r2, #8275	; 0x2053
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	f300 8259 	bgt.w	8002340 <tft_init+0x63c>
 8001e8e:	f241 6202 	movw	r2, #5634	; 0x1602
 8001e92:	4293      	cmp	r3, r2
 8001e94:	f000 8195 	beq.w	80021c2 <tft_init+0x4be>
 8001e98:	f241 6202 	movw	r2, #5634	; 0x1602
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	f300 824f 	bgt.w	8002340 <tft_init+0x63c>
 8001ea2:	f241 5281 	movw	r2, #5505	; 0x1581
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	f000 81c1 	beq.w	800222e <tft_init+0x52a>
 8001eac:	f241 5281 	movw	r2, #5505	; 0x1581
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	f300 8245 	bgt.w	8002340 <tft_init+0x63c>
 8001eb6:	f241 5226 	movw	r2, #5414	; 0x1526
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	f000 80cf 	beq.w	800205e <tft_init+0x35a>
 8001ec0:	f241 5226 	movw	r2, #5414	; 0x1526
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	f300 823b 	bgt.w	8002340 <tft_init+0x63c>
 8001eca:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001ece:	f000 80bd 	beq.w	800204c <tft_init+0x348>
 8001ed2:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001ed6:	f300 8233 	bgt.w	8002340 <tft_init+0x63c>
 8001eda:	f241 5211 	movw	r2, #5393	; 0x1511
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	f000 80a0 	beq.w	8002024 <tft_init+0x320>
 8001ee4:	f241 5211 	movw	r2, #5393	; 0x1511
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	f300 8229 	bgt.w	8002340 <tft_init+0x63c>
 8001eee:	f241 5205 	movw	r2, #5381	; 0x1505
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	f000 8131 	beq.w	800215a <tft_init+0x456>
 8001ef8:	f241 5205 	movw	r2, #5381	; 0x1505
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f300 821f 	bgt.w	8002340 <tft_init+0x63c>
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	f000 811f 	beq.w	8002146 <tft_init+0x442>
 8001f08:	2b99      	cmp	r3, #153	; 0x99
 8001f0a:	f000 8107 	beq.w	800211c <tft_init+0x418>
 8001f0e:	e217      	b.n	8002340 <tft_init+0x63c>
 8001f10:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 8001f14:	3b02      	subs	r3, #2
 8001f16:	2b3f      	cmp	r3, #63	; 0x3f
 8001f18:	f200 8212 	bhi.w	8002340 <tft_init+0x63c>
 8001f1c:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <tft_init+0x220>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	080021e9 	.word	0x080021e9
 8001f28:	08002341 	.word	0x08002341
 8001f2c:	08002341 	.word	0x08002341
 8001f30:	08002341 	.word	0x08002341
 8001f34:	08002341 	.word	0x08002341
 8001f38:	08002341 	.word	0x08002341
 8001f3c:	08002341 	.word	0x08002341
 8001f40:	08002341 	.word	0x08002341
 8001f44:	08002341 	.word	0x08002341
 8001f48:	08002341 	.word	0x08002341
 8001f4c:	08002341 	.word	0x08002341
 8001f50:	08002341 	.word	0x08002341
 8001f54:	08002341 	.word	0x08002341
 8001f58:	08002341 	.word	0x08002341
 8001f5c:	08002341 	.word	0x08002341
 8001f60:	08002341 	.word	0x08002341
 8001f64:	08002341 	.word	0x08002341
 8001f68:	08002341 	.word	0x08002341
 8001f6c:	08002341 	.word	0x08002341
 8001f70:	08002341 	.word	0x08002341
 8001f74:	08002341 	.word	0x08002341
 8001f78:	08002341 	.word	0x08002341
 8001f7c:	08002341 	.word	0x08002341
 8001f80:	08002341 	.word	0x08002341
 8001f84:	08002341 	.word	0x08002341
 8001f88:	08002341 	.word	0x08002341
 8001f8c:	08002341 	.word	0x08002341
 8001f90:	08002341 	.word	0x08002341
 8001f94:	08002341 	.word	0x08002341
 8001f98:	08002341 	.word	0x08002341
 8001f9c:	0800215b 	.word	0x0800215b
 8001fa0:	08002341 	.word	0x08002341
 8001fa4:	08002341 	.word	0x08002341
 8001fa8:	08002341 	.word	0x08002341
 8001fac:	08002341 	.word	0x08002341
 8001fb0:	0800217b 	.word	0x0800217b
 8001fb4:	08002341 	.word	0x08002341
 8001fb8:	0800219b 	.word	0x0800219b
 8001fbc:	0800217b 	.word	0x0800217b
 8001fc0:	080021fd 	.word	0x080021fd
 8001fc4:	08002341 	.word	0x08002341
 8001fc8:	08002341 	.word	0x08002341
 8001fcc:	08002341 	.word	0x08002341
 8001fd0:	08002341 	.word	0x08002341
 8001fd4:	08002341 	.word	0x08002341
 8001fd8:	08002341 	.word	0x08002341
 8001fdc:	08002341 	.word	0x08002341
 8001fe0:	08002185 	.word	0x08002185
 8001fe4:	08002341 	.word	0x08002341
 8001fe8:	08002341 	.word	0x08002341
 8001fec:	08002341 	.word	0x08002341
 8001ff0:	08002185 	.word	0x08002185
 8001ff4:	08002341 	.word	0x08002341
 8001ff8:	08002341 	.word	0x08002341
 8001ffc:	080021f3 	.word	0x080021f3
 8002000:	08002341 	.word	0x08002341
 8002004:	08002341 	.word	0x08002341
 8002008:	08002341 	.word	0x08002341
 800200c:	08002341 	.word	0x08002341
 8002010:	08002341 	.word	0x08002341
 8002014:	08002341 	.word	0x08002341
 8002018:	08002341 	.word	0x08002341
 800201c:	08002213 	.word	0x08002213
 8002020:	0800221d 	.word	0x0800221d
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <tft_init+0x3a0>)
 8002026:	2203      	movs	r2, #3
 8002028:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 800202a:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <tft_init+0x3a4>)
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	2303      	movs	r3, #3
 8002030:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <tft_init+0x3a8>)
 8002034:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800203c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <tft_init+0x3ac>)
 8002040:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002048:	801a      	strh	r2, [r3, #0]
        break;
 800204a:	e17f      	b.n	800234c <tft_init+0x648>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <tft_init+0x3a0>)
 800204e:	f240 4213 	movw	r2, #1043	; 0x413
 8002052:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <tft_init+0x3b0>)
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	2306      	movs	r3, #6
 800205a:	837b      	strh	r3, [r7, #26]
        break;
 800205c:	e176      	b.n	800234c <tft_init+0x648>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <tft_init+0x3a0>)
 8002060:	f240 4213 	movw	r2, #1043	; 0x413
 8002064:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <tft_init+0x3b4>)
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	230c      	movs	r3, #12
 800206c:	837b      	strh	r3, [r7, #26]
        break;
 800206e:	e16d      	b.n	800234c <tft_init+0x648>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <tft_init+0x3a0>)
 8002072:	f640 6213 	movw	r2, #3603	; 0xe13
 8002076:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <tft_init+0x3b8>)
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	2302      	movs	r3, #2
 800207e:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <tft_init+0x3a8>)
 8002082:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800208a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <tft_init+0x3ac>)
 800208e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002096:	801a      	strh	r2, [r3, #0]
        break;
 8002098:	e158      	b.n	800234c <tft_init+0x648>
 800209a:	bf00      	nop
 800209c:	200000e2 	.word	0x200000e2
 80020a0:	200000e0 	.word	0x200000e0
 80020a4:	200000d2 	.word	0x200000d2
 80020a8:	08006634 	.word	0x08006634
 80020ac:	08000c31 	.word	0x08000c31
 80020b0:	08000c19 	.word	0x08000c19
 80020b4:	08006638 	.word	0x08006638
 80020b8:	08006640 	.word	0x08006640
 80020bc:	0800664c 	.word	0x0800664c
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80020c0:	4b8d      	ldr	r3, [pc, #564]	; (80022f8 <tft_init+0x5f4>)
 80020c2:	f240 4213 	movw	r2, #1043	; 0x413
 80020c6:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80020c8:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <tft_init+0x5f8>)
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	2341      	movs	r3, #65	; 0x41
 80020ce:	837b      	strh	r3, [r7, #26]
        break;
 80020d0:	e13c      	b.n	800234c <tft_init+0x648>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80020d2:	4b89      	ldr	r3, [pc, #548]	; (80022f8 <tft_init+0x5f4>)
 80020d4:	f241 4213 	movw	r2, #5139	; 0x1413
 80020d8:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80020da:	4b89      	ldr	r3, [pc, #548]	; (8002300 <tft_init+0x5fc>)
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2312      	movs	r3, #18
 80020e0:	837b      	strh	r3, [r7, #26]
        break;
 80020e2:	e133      	b.n	800234c <tft_init+0x648>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80020e4:	4b84      	ldr	r3, [pc, #528]	; (80022f8 <tft_init+0x5f4>)
 80020e6:	f241 4203 	movw	r2, #5123	; 0x1403
 80020ea:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 80020ec:	e003      	b.n	80020f6 <tft_init+0x3f2>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80020ee:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <tft_init+0x5f4>)
 80020f0:	f241 4213 	movw	r2, #5139	; 0x1413
 80020f4:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 80020fa:	4b82      	ldr	r3, [pc, #520]	; (8002304 <tft_init+0x600>)
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	2302      	movs	r3, #2
 8002100:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002102:	4b81      	ldr	r3, [pc, #516]	; (8002308 <tft_init+0x604>)
 8002104:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800210c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800210e:	4b7f      	ldr	r3, [pc, #508]	; (800230c <tft_init+0x608>)
 8002110:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002118:	801a      	strh	r2, [r3, #0]
        break;
 800211a:	e117      	b.n	800234c <tft_init+0x648>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800211c:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <tft_init+0x5f4>)
 800211e:	f241 4213 	movw	r2, #5139	; 0x1413
 8002122:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8002124:	4b7a      	ldr	r3, [pc, #488]	; (8002310 <tft_init+0x60c>)
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	231d      	movs	r3, #29
 800212a:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800212c:	4b76      	ldr	r3, [pc, #472]	; (8002308 <tft_init+0x604>)
 800212e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002136:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002138:	4b74      	ldr	r3, [pc, #464]	; (800230c <tft_init+0x608>)
 800213a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002142:	801a      	strh	r2, [r3, #0]
        break;
 8002144:	e102      	b.n	800234c <tft_init+0x648>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <tft_init+0x5f4>)
 8002148:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 800214c:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 800214e:	e008      	b.n	8002162 <tft_init+0x45e>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8002150:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <tft_init+0x5f4>)
 8002152:	f241 0204 	movw	r2, #4100	; 0x1004
 8002156:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8002158:	e003      	b.n	8002162 <tft_init+0x45e>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 800215a:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <tft_init+0x5f4>)
 800215c:	f241 0204 	movw	r2, #4100	; 0x1004
 8002160:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8002162:	2301      	movs	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8002166:	21d8      	movs	r1, #216	; 0xd8
 8002168:	486a      	ldr	r0, [pc, #424]	; (8002314 <tft_init+0x610>)
 800216a:	f7ff fb3e 	bl	80017ea <init_table16>
        break;
 800216e:	e0ed      	b.n	800234c <tft_init+0x648>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <tft_init+0x5f4>)
 8002172:	f241 1202 	movw	r2, #4354	; 0x1102
 8002176:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8002178:	e008      	b.n	800218c <tft_init+0x488>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 800217a:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <tft_init+0x5f4>)
 800217c:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002180:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8002182:	e003      	b.n	800218c <tft_init+0x488>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8002184:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <tft_init+0x5f4>)
 8002186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800218a:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 800218c:	2301      	movs	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8002190:	21cc      	movs	r1, #204	; 0xcc
 8002192:	4861      	ldr	r0, [pc, #388]	; (8002318 <tft_init+0x614>)
 8002194:	f7ff fb29 	bl	80017ea <init_table16>
        break;
 8002198:	e0d8      	b.n	800234c <tft_init+0x648>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800219a:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <tft_init+0x5f4>)
 800219c:	f240 4203 	movw	r2, #1027	; 0x403
 80021a0:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80021a2:	4b5e      	ldr	r3, [pc, #376]	; (800231c <tft_init+0x618>)
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	231e      	movs	r3, #30
 80021a8:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80021aa:	4b57      	ldr	r3, [pc, #348]	; (8002308 <tft_init+0x604>)
 80021ac:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80021b4:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80021b6:	4b55      	ldr	r3, [pc, #340]	; (800230c <tft_init+0x608>)
 80021b8:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	22f0      	movs	r2, #240	; 0xf0
 80021be:	801a      	strh	r2, [r3, #0]
        break;
 80021c0:	e0c4      	b.n	800234c <tft_init+0x648>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 80021c2:	4b4d      	ldr	r3, [pc, #308]	; (80022f8 <tft_init+0x5f4>)
 80021c4:	f240 4203 	movw	r2, #1027	; 0x403
 80021c8:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 80021ca:	4b55      	ldr	r3, [pc, #340]	; (8002320 <tft_init+0x61c>)
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	2306      	movs	r3, #6
 80021d0:	837b      	strh	r3, [r7, #26]
        break;
 80021d2:	e0bb      	b.n	800234c <tft_init+0x648>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 80021d4:	4b48      	ldr	r3, [pc, #288]	; (80022f8 <tft_init+0x5f4>)
 80021d6:	f241 4217 	movw	r2, #5143	; 0x1417
 80021da:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021dc:	e012      	b.n	8002204 <tft_init+0x500>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <tft_init+0x5f4>)
 80021e0:	f241 4213 	movw	r2, #5139	; 0x1413
 80021e4:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021e6:	e00d      	b.n	8002204 <tft_init+0x500>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <tft_init+0x5f4>)
 80021ea:	f240 4203 	movw	r2, #1027	; 0x403
 80021ee:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021f0:	e008      	b.n	8002204 <tft_init+0x500>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <tft_init+0x5f4>)
 80021f4:	f240 4213 	movw	r2, #1043	; 0x413
 80021f8:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021fa:	e003      	b.n	8002204 <tft_init+0x500>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 80021fc:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <tft_init+0x5f4>)
 80021fe:	f241 6203 	movw	r2, #5635	; 0x1603
 8002202:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8002204:	2301      	movs	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8002208:	4b46      	ldr	r3, [pc, #280]	; (8002324 <tft_init+0x620>)
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	2303      	movs	r3, #3
 800220e:	837b      	strh	r3, [r7, #26]
        break;
 8002210:	e09c      	b.n	800234c <tft_init+0x648>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8002212:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <tft_init+0x5f4>)
 8002214:	f241 4213 	movw	r2, #5139	; 0x1413
 8002218:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 800221a:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <tft_init+0x5f4>)
 800221e:	f240 4213 	movw	r2, #1043	; 0x413
 8002222:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <tft_init+0x624>)
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	2365      	movs	r3, #101	; 0x65
 800222a:	837b      	strh	r3, [r7, #26]
        break;
 800222c:	e08e      	b.n	800234c <tft_init+0x648>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 800222e:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <tft_init+0x5f4>)
 8002230:	f240 4213 	movw	r2, #1043	; 0x413
 8002234:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8002236:	e003      	b.n	8002240 <tft_init+0x53c>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <tft_init+0x5f4>)
 800223a:	f240 4207 	movw	r2, #1031	; 0x407
 800223e:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8002240:	2301      	movs	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <tft_init+0x628>)
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	2345      	movs	r3, #69	; 0x45
 800224a:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <tft_init+0x604>)
 800224e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002256:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002258:	4b2c      	ldr	r3, [pc, #176]	; (800230c <tft_init+0x608>)
 800225a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002262:	801a      	strh	r2, [r3, #0]
        break;
 8002264:	e072      	b.n	800234c <tft_init+0x648>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <tft_init+0x5f4>)
 8002268:	f240 4203 	movw	r2, #1027	; 0x403
 800226c:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <tft_init+0x62c>)
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	233b      	movs	r3, #59	; 0x3b
 8002274:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <tft_init+0x604>)
 8002278:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002280:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <tft_init+0x608>)
 8002284:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800228c:	801a      	strh	r2, [r3, #0]
        break;
 800228e:	e05d      	b.n	800234c <tft_init+0x648>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <tft_init+0x5f4>)
 8002292:	f240 4203 	movw	r2, #1027	; 0x403
 8002296:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8002298:	e003      	b.n	80022a2 <tft_init+0x59e>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <tft_init+0x5f4>)
 800229c:	f240 4213 	movw	r2, #1043	; 0x413
 80022a0:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80022a6:	4b23      	ldr	r3, [pc, #140]	; (8002334 <tft_init+0x630>)
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	232b      	movs	r3, #43	; 0x2b
 80022ac:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <tft_init+0x604>)
 80022b0:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80022b8:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <tft_init+0x608>)
 80022bc:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022c4:	801a      	strh	r2, [r3, #0]
        break;
 80022c6:	e041      	b.n	800234c <tft_init+0x648>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <tft_init+0x5f4>)
 80022ca:	f241 0208 	movw	r2, #4104	; 0x1008
 80022ce:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 80022d0:	21b0      	movs	r1, #176	; 0xb0
 80022d2:	4819      	ldr	r0, [pc, #100]	; (8002338 <tft_init+0x634>)
 80022d4:	f7ff fa89 	bl	80017ea <init_table16>
        break;
 80022d8:	e038      	b.n	800234c <tft_init+0x648>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <tft_init+0x5f4>)
 80022dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e0:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80022e2:	21c0      	movs	r1, #192	; 0xc0
 80022e4:	4815      	ldr	r0, [pc, #84]	; (800233c <tft_init+0x638>)
 80022e6:	f7ff fa80 	bl	80017ea <init_table16>
        p16 = (int16_t *) & height;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <tft_init+0x604>)
 80022ec:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022f4:	801a      	strh	r2, [r3, #0]
        break;
 80022f6:	e029      	b.n	800234c <tft_init+0x648>
 80022f8:	200000d2 	.word	0x200000d2
 80022fc:	08006650 	.word	0x08006650
 8002300:	08006694 	.word	0x08006694
 8002304:	080066a8 	.word	0x080066a8
 8002308:	08000c31 	.word	0x08000c31
 800230c:	08000c19 	.word	0x08000c19
 8002310:	080066ac 	.word	0x080066ac
 8002314:	080066cc 	.word	0x080066cc
 8002318:	080067a4 	.word	0x080067a4
 800231c:	08006870 	.word	0x08006870
 8002320:	08006890 	.word	0x08006890
 8002324:	08006898 	.word	0x08006898
 8002328:	0800689c 	.word	0x0800689c
 800232c:	08006904 	.word	0x08006904
 8002330:	0800694c 	.word	0x0800694c
 8002334:	08006988 	.word	0x08006988
 8002338:	080069b4 	.word	0x080069b4
 800233c:	08006a64 	.word	0x08006a64
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <tft_init+0x6f0>)
 8002342:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2200      	movs	r2, #0
 8002348:	801a      	strh	r2, [r3, #0]
        break;
 800234a:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800234c:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <tft_init+0x6f4>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf14      	ite	ne
 8002358:	2301      	movne	r3, #1
 800235a:	2300      	moveq	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <tft_init+0x6f8>)
 8002362:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00d      	beq.n	8002386 <tft_init+0x682>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800236a:	2109      	movs	r1, #9
 800236c:	4824      	ldr	r0, [pc, #144]	; (8002400 <tft_init+0x6fc>)
 800236e:	f7ff f9e3 	bl	8001738 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8002372:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002376:	4619      	mov	r1, r3
 8002378:	69f8      	ldr	r0, [r7, #28]
 800237a:	f7ff f9dd 	bl	8001738 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 800237e:	2106      	movs	r1, #6
 8002380:	4820      	ldr	r0, [pc, #128]	; (8002404 <tft_init+0x700>)
 8002382:	f7ff f9d9 	bl	8001738 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8002386:	2000      	movs	r0, #0
 8002388:	f000 ff72 	bl	8003270 <setRotation>
    invertDisplay(false);
 800238c:	2000      	movs	r0, #0
 800238e:	f001 fd5f 	bl	8003e50 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <tft_init+0x704>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	f249 4288 	movw	r2, #38024	; 0x9488
 800239a:	4293      	cmp	r3, r2
 800239c:	d125      	bne.n	80023ea <tft_init+0x6e6>
		is555 = 0;
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <tft_init+0x708>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80023a4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2000      	movs	r0, #0
 80023ac:	f001 f9e6 	bl	800377c <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 80023b0:	2100      	movs	r1, #0
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7fe fcdf 	bl	8000d76 <readPixel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	f64f 731f 	movw	r3, #65311	; 0xff1f
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d112      	bne.n	80023ea <tft_init+0x6e6>
			uint8_t pixfmt = 0x06;
 80023c4:	2306      	movs	r3, #6
 80023c6:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 80023c8:	f107 030f 	add.w	r3, r7, #15
 80023cc:	2201      	movs	r2, #1
 80023ce:	4619      	mov	r1, r3
 80023d0:	203a      	movs	r0, #58	; 0x3a
 80023d2:	f7fe fcfa 	bl	8000dca <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <tft_init+0x6f4>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	f023 0310 	bic.w	r3, r3, #16
 80023de:	b29a      	uxth	r2, r3
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <tft_init+0x6f4>)
 80023e2:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <tft_init+0x708>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 80023ea:	bf00      	nop
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08000c19 	.word	0x08000c19
 80023f8:	200000d2 	.word	0x200000d2
 80023fc:	200000d6 	.word	0x200000d6
 8002400:	08006b24 	.word	0x08006b24
 8002404:	08006b30 	.word	0x08006b30
 8002408:	200000e0 	.word	0x200000e0
 800240c:	20000030 	.word	0x20000030

08002410 <readID>:


uint16_t readID(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8002416:	2100      	movs	r1, #0
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff fb55 	bl	8001ac8 <readReg>
 800241e:	4603      	mov	r3, r0
 8002420:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8002422:	89fb      	ldrh	r3, [r7, #14]
 8002424:	f245 4208 	movw	r2, #21512	; 0x5408
 8002428:	4293      	cmp	r3, r2
 800242a:	d102      	bne.n	8002432 <readID+0x22>
        return 0x5408;
 800242c:	f245 4308 	movw	r3, #21512	; 0x5408
 8002430:	e128      	b.n	8002684 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	f245 4220 	movw	r2, #21536	; 0x5420
 8002438:	4293      	cmp	r3, r2
 800243a:	d102      	bne.n	8002442 <readID+0x32>
        return 0x5420;
 800243c:	f245 4320 	movw	r3, #21536	; 0x5420
 8002440:	e120      	b.n	8002684 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8002442:	89fb      	ldrh	r3, [r7, #14]
 8002444:	f648 1289 	movw	r2, #35209	; 0x8989
 8002448:	4293      	cmp	r3, r2
 800244a:	d102      	bne.n	8002452 <readID+0x42>
        return 0x1289;
 800244c:	f241 2389 	movw	r3, #4745	; 0x1289
 8002450:	e118      	b.n	8002684 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8002452:	2100      	movs	r1, #0
 8002454:	2067      	movs	r0, #103	; 0x67
 8002456:	f7ff fb37 	bl	8001ac8 <readReg>
 800245a:	4603      	mov	r3, r0
 800245c:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 800245e:	89fb      	ldrh	r3, [r7, #14]
 8002460:	f244 7247 	movw	r2, #18247	; 0x4747
 8002464:	4293      	cmp	r3, r2
 8002466:	d102      	bne.n	800246e <readID+0x5e>
        return 0x8347;
 8002468:	f248 3347 	movw	r3, #33607	; 0x8347
 800246c:	e10a      	b.n	8002684 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 800246e:	20a1      	movs	r0, #161	; 0xa1
 8002470:	f7ff fc06 	bl	8001c80 <readReg32>
 8002474:	4603      	mov	r3, r0
 8002476:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8002478:	89fb      	ldrh	r3, [r7, #14]
 800247a:	f246 1201 	movw	r2, #24833	; 0x6101
 800247e:	4293      	cmp	r3, r2
 8002480:	d102      	bne.n	8002488 <readID+0x78>
        return 0x1963;
 8002482:	f641 1363 	movw	r3, #6499	; 0x1963
 8002486:	e0fd      	b.n	8002684 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800248e:	4293      	cmp	r3, r2
 8002490:	d102      	bne.n	8002498 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8002492:	f241 5326 	movw	r3, #5414	; 0x1526
 8002496:	e0f5      	b.n	8002684 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8002498:	20bf      	movs	r0, #191	; 0xbf
 800249a:	f7ff fc0c 	bl	8001cb6 <readReg40>
 800249e:	4603      	mov	r3, r0
 80024a0:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80024a2:	89fb      	ldrh	r3, [r7, #14]
 80024a4:	f248 3257 	movw	r2, #33623	; 0x8357
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d102      	bne.n	80024b2 <readID+0xa2>
        return 0x8357;
 80024ac:	f248 3357 	movw	r3, #33623	; 0x8357
 80024b0:	e0e8      	b.n	8002684 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80024b2:	89fb      	ldrh	r3, [r7, #14]
 80024b4:	f249 4281 	movw	r2, #38017	; 0x9481
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <readID+0xb2>
        return 0x9481;
 80024bc:	f249 4381 	movw	r3, #38017	; 0x9481
 80024c0:	e0e0      	b.n	8002684 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 80024c2:	89fb      	ldrh	r3, [r7, #14]
 80024c4:	f241 5211 	movw	r2, #5393	; 0x1511
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d102      	bne.n	80024d2 <readID+0xc2>
        return 0x1511;
 80024cc:	f241 5311 	movw	r3, #5393	; 0x1511
 80024d0:	e0d8      	b.n	8002684 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 80024d2:	89fb      	ldrh	r3, [r7, #14]
 80024d4:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80024d8:	d102      	bne.n	80024e0 <readID+0xd0>
        return 0x1520;
 80024da:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 80024de:	e0d1      	b.n	8002684 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	f241 5226 	movw	r2, #5414	; 0x1526
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d102      	bne.n	80024f0 <readID+0xe0>
        return 0x1526;
 80024ea:	f241 5326 	movw	r3, #5414	; 0x1526
 80024ee:	e0c9      	b.n	8002684 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	f241 5281 	movw	r2, #5505	; 0x1581
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d102      	bne.n	8002500 <readID+0xf0>
        return 0x1581;
 80024fa:	f241 5381 	movw	r3, #5505	; 0x1581
 80024fe:	e0c1      	b.n	8002684 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002506:	d102      	bne.n	800250e <readID+0xfe>
        return 0x6814;
 8002508:	f646 0314 	movw	r3, #26644	; 0x6814
 800250c:	e0ba      	b.n	8002684 <readID+0x274>
    ret = readReg32(0xD4);
 800250e:	20d4      	movs	r0, #212	; 0xd4
 8002510:	f7ff fbb6 	bl	8001c80 <readReg32>
 8002514:	4603      	mov	r3, r0
 8002516:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8002518:	89fb      	ldrh	r3, [r7, #14]
 800251a:	f245 3210 	movw	r2, #21264	; 0x5310
 800251e:	4293      	cmp	r3, r2
 8002520:	d102      	bne.n	8002528 <readID+0x118>
        return 0x5310;
 8002522:	f245 3310 	movw	r3, #21264	; 0x5310
 8002526:	e0ad      	b.n	8002684 <readID+0x274>
    ret = readReg32(0xD7);
 8002528:	20d7      	movs	r0, #215	; 0xd7
 800252a:	f7ff fba9 	bl	8001c80 <readReg32>
 800252e:	4603      	mov	r3, r0
 8002530:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8002532:	89fb      	ldrh	r3, [r7, #14]
 8002534:	f248 0231 	movw	r2, #32817	; 0x8031
 8002538:	4293      	cmp	r3, r2
 800253a:	d102      	bne.n	8002542 <readID+0x132>
        return 0x8031;
 800253c:	f248 0331 	movw	r3, #32817	; 0x8031
 8002540:	e0a0      	b.n	8002684 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8002542:	20ef      	movs	r0, #239	; 0xef
 8002544:	f7ff fbb7 	bl	8001cb6 <readReg40>
 8002548:	4603      	mov	r3, r0
 800254a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 800254c:	89fb      	ldrh	r3, [r7, #14]
 800254e:	f249 3227 	movw	r2, #37671	; 0x9327
 8002552:	4293      	cmp	r3, r2
 8002554:	d102      	bne.n	800255c <readID+0x14c>
        return 0x9327;
 8002556:	f249 3327 	movw	r3, #37671	; 0x9327
 800255a:	e093      	b.n	8002684 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 800255c:	20fe      	movs	r0, #254	; 0xfe
 800255e:	f7ff fb8f 	bl	8001c80 <readReg32>
 8002562:	4603      	mov	r3, r0
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	f242 0253 	movw	r2, #8275	; 0x2053
 800256e:	4293      	cmp	r3, r2
 8002570:	d102      	bne.n	8002578 <readID+0x168>
        return 0x2053;
 8002572:	f242 0353 	movw	r3, #8275	; 0x2053
 8002576:	e085      	b.n	8002684 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8002578:	2004      	movs	r0, #4
 800257a:	f7ff fb81 	bl	8001c80 <readReg32>
 800257e:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	0c1b      	lsrs	r3, r3, #16
 8002584:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d122      	bne.n	80025d6 <readID+0x1c6>
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002596:	d11e      	bne.n	80025d6 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8002598:	4a3c      	ldr	r2, [pc, #240]	; (800268c <readID+0x27c>)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4611      	mov	r1, r2
 80025a0:	8019      	strh	r1, [r3, #0]
 80025a2:	3302      	adds	r3, #2
 80025a4:	0c12      	lsrs	r2, r2, #16
 80025a6:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	2203      	movs	r2, #3
 80025ac:	4619      	mov	r1, r3
 80025ae:	20b9      	movs	r0, #185	; 0xb9
 80025b0:	f7fe fc0b 	bl	8000dca <pushCommand>
        msb = readReg(0xD0,0);
 80025b4:	2100      	movs	r1, #0
 80025b6:	20d0      	movs	r0, #208	; 0xd0
 80025b8:	f7ff fa86 	bl	8001ac8 <readReg>
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b99      	cmp	r3, #153	; 0x99
 80025c4:	d101      	bne.n	80025ca <readID+0x1ba>
 80025c6:	2399      	movs	r3, #153	; 0x99
 80025c8:	e05c      	b.n	8002684 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	2b90      	cmp	r3, #144	; 0x90
 80025ce:	d102      	bne.n	80025d6 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 80025d0:	f249 0390 	movw	r3, #37008	; 0x9090
 80025d4:	e056      	b.n	8002684 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 80025d6:	89fb      	ldrh	r3, [r7, #14]
 80025d8:	f241 5226 	movw	r2, #5414	; 0x1526
 80025dc:	4293      	cmp	r3, r2
 80025de:	d102      	bne.n	80025e6 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 80025e0:	f241 5326 	movw	r3, #5414	; 0x1526
 80025e4:	e04e      	b.n	8002684 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	f648 12f0 	movw	r2, #35312	; 0x89f0
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d102      	bne.n	80025f6 <readID+0x1e6>
        return 0x7735;
 80025f0:	f247 7335 	movw	r3, #30517	; 0x7735
 80025f4:	e046      	b.n	8002684 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	f248 5252 	movw	r2, #34130	; 0x8552
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d102      	bne.n	8002606 <readID+0x1f6>
        return 0x7789;
 8002600:	f247 7389 	movw	r3, #30601	; 0x7789
 8002604:	e03e      	b.n	8002684 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8002606:	89fb      	ldrh	r3, [r7, #14]
 8002608:	f64a 4211 	movw	r2, #44049	; 0xac11
 800260c:	4293      	cmp	r3, r2
 800260e:	d102      	bne.n	8002616 <readID+0x206>
        return 0xAC11;
 8002610:	f64a 4311 	movw	r3, #44049	; 0xac11
 8002614:	e036      	b.n	8002684 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8002616:	20d3      	movs	r0, #211	; 0xd3
 8002618:	f7ff fb32 	bl	8001c80 <readReg32>
 800261c:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8002624:	89fb      	ldrh	r3, [r7, #14]
 8002626:	f249 1263 	movw	r2, #37219	; 0x9163
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <readID+0x222>
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	e028      	b.n	8002684 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8002632:	20d3      	movs	r0, #211	; 0xd3
 8002634:	f7ff fb24 	bl	8001c80 <readReg32>
 8002638:	4603      	mov	r3, r0
 800263a:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 800263c:	89fb      	ldrh	r3, [r7, #14]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	b29b      	uxth	r3, r3
 8002642:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2b93      	cmp	r3, #147	; 0x93
 8002648:	d00b      	beq.n	8002662 <readID+0x252>
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2b94      	cmp	r3, #148	; 0x94
 800264e:	d008      	beq.n	8002662 <readID+0x252>
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b98      	cmp	r3, #152	; 0x98
 8002654:	d005      	beq.n	8002662 <readID+0x252>
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	2b77      	cmp	r3, #119	; 0x77
 800265a:	d002      	beq.n	8002662 <readID+0x252>
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b16      	cmp	r3, #22
 8002660:	d101      	bne.n	8002666 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8002662:	89fb      	ldrh	r3, [r7, #14]
 8002664:	e00e      	b.n	8002684 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8002666:	89fb      	ldrh	r3, [r7, #14]
 8002668:	2bd3      	cmp	r3, #211	; 0xd3
 800266a:	d004      	beq.n	8002676 <readID+0x266>
 800266c:	89fb      	ldrh	r3, [r7, #14]
 800266e:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <readID+0x26a>
        return ret;             //16-bit write-only bus
 8002676:	89fb      	ldrh	r3, [r7, #14]
 8002678:	e004      	b.n	8002684 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 800267a:	2100      	movs	r1, #0
 800267c:	2000      	movs	r0, #0
 800267e:	f7ff fa23 	bl	8001ac8 <readReg>
 8002682:	4603      	mov	r3, r0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	080065e8 	.word	0x080065e8

08002690 <readGRAM>:


// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af00      	add	r7, sp, #0
 8002696:	60ba      	str	r2, [r7, #8]
 8002698:	461a      	mov	r2, r3
 800269a:	4603      	mov	r3, r0
 800269c:	81fb      	strh	r3, [r7, #14]
 800269e:	460b      	mov	r3, r1
 80026a0:	81bb      	strh	r3, [r7, #12]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <readGRAM+0x88>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 80026ac:	88fa      	ldrh	r2, [r7, #6]
 80026ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026b0:	fb12 f303 	smulbb	r3, r2, r3
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80026b8:	2300      	movs	r3, #0
 80026ba:	843b      	strh	r3, [r7, #32]
 80026bc:	2300      	movs	r3, #0
 80026be:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <readGRAM+0x8c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <readGRAM+0x48>
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <readGRAM+0x90>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <readGRAM+0x48>
        _MR = 0x2E;
 80026d4:	232e      	movs	r3, #46	; 0x2e
 80026d6:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <readGRAM+0x94>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	f241 6202 	movw	r2, #5634	; 0x1602
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d101      	bne.n	80026e8 <readGRAM+0x58>
 80026e4:	232e      	movs	r3, #46	; 0x2e
 80026e6:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80026e8:	89fa      	ldrh	r2, [r7, #14]
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	4413      	add	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b21c      	sxth	r4, r3
 80026f6:	89ba      	ldrh	r2, [r7, #12]
 80026f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026fa:	4413      	add	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29b      	uxth	r3, r3
 8002702:	b21b      	sxth	r3, r3
 8002704:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002708:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800270c:	4622      	mov	r2, r4
 800270e:	f001 f93b 	bl	8003988 <setAddrWindow>
    while (n > 0) {
 8002712:	f000 bd86 	b.w	8003222 <readGRAM+0xb92>
 8002716:	bf00      	nop
 8002718:	200000d0 	.word	0x200000d0
 800271c:	2000002f 	.word	0x2000002f
 8002720:	200000d2 	.word	0x200000d2
 8002724:	200000e0 	.word	0x200000e0
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8002728:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <readGRAM+0x31c>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 8002734:	4b9e      	ldr	r3, [pc, #632]	; (80029b0 <readGRAM+0x320>)
 8002736:	8818      	ldrh	r0, [r3, #0]
 8002738:	89fa      	ldrh	r2, [r7, #14]
 800273a:	8bfb      	ldrh	r3, [r7, #30]
 800273c:	4413      	add	r3, r2
 800273e:	b29b      	uxth	r3, r3
 8002740:	4619      	mov	r1, r3
 8002742:	f7fe fb30 	bl	8000da6 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8002746:	4b9b      	ldr	r3, [pc, #620]	; (80029b4 <readGRAM+0x324>)
 8002748:	8818      	ldrh	r0, [r3, #0]
 800274a:	89ba      	ldrh	r2, [r7, #12]
 800274c:	8c3b      	ldrh	r3, [r7, #32]
 800274e:	4413      	add	r3, r2
 8002750:	b29b      	uxth	r3, r3
 8002752:	4619      	mov	r1, r3
 8002754:	f7fe fb27 	bl	8000da6 <WriteCmdData>
        }
        CS_ACTIVE;
 8002758:	2101      	movs	r1, #1
 800275a:	4897      	ldr	r0, [pc, #604]	; (80029b8 <readGRAM+0x328>)
 800275c:	f7fe fa0e 	bl	8000b7c <PIN_LOW>
        WriteCmd(_MR);
 8002760:	2110      	movs	r1, #16
 8002762:	4896      	ldr	r0, [pc, #600]	; (80029bc <readGRAM+0x32c>)
 8002764:	f7fe fa0a 	bl	8000b7c <PIN_LOW>
 8002768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	b29b      	uxth	r3, r3
 800276e:	777b      	strb	r3, [r7, #29]
 8002770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002772:	773b      	strb	r3, [r7, #28]
 8002774:	4b91      	ldr	r3, [pc, #580]	; (80029bc <readGRAM+0x32c>)
 8002776:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800277a:	619a      	str	r2, [r3, #24]
 800277c:	4b8e      	ldr	r3, [pc, #568]	; (80029b8 <readGRAM+0x328>)
 800277e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002782:	619a      	str	r2, [r3, #24]
 8002784:	4b8e      	ldr	r3, [pc, #568]	; (80029c0 <readGRAM+0x330>)
 8002786:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800278a:	619a      	str	r2, [r3, #24]
 800278c:	7f7b      	ldrb	r3, [r7, #29]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002794:	7f7b      	ldrb	r3, [r7, #29]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	431a      	orrs	r2, r3
 800279e:	7f7b      	ldrb	r3, [r7, #29]
 80027a0:	025b      	lsls	r3, r3, #9
 80027a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a6:	431a      	orrs	r2, r3
 80027a8:	4b84      	ldr	r3, [pc, #528]	; (80029bc <readGRAM+0x32c>)
 80027aa:	619a      	str	r2, [r3, #24]
 80027ac:	7f7b      	ldrb	r3, [r7, #29]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80027b4:	7f7b      	ldrb	r3, [r7, #29]
 80027b6:	105b      	asrs	r3, r3, #1
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	431a      	orrs	r2, r3
 80027be:	7f7b      	ldrb	r3, [r7, #29]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	431a      	orrs	r2, r3
 80027c8:	7f7b      	ldrb	r3, [r7, #29]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	431a      	orrs	r2, r3
 80027d0:	4b79      	ldr	r3, [pc, #484]	; (80029b8 <readGRAM+0x328>)
 80027d2:	619a      	str	r2, [r3, #24]
 80027d4:	7f7b      	ldrb	r3, [r7, #29]
 80027d6:	019b      	lsls	r3, r3, #6
 80027d8:	4a79      	ldr	r2, [pc, #484]	; (80029c0 <readGRAM+0x330>)
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	2102      	movs	r1, #2
 80027e2:	4876      	ldr	r0, [pc, #472]	; (80029bc <readGRAM+0x32c>)
 80027e4:	f7fe f9ca 	bl	8000b7c <PIN_LOW>
 80027e8:	2102      	movs	r1, #2
 80027ea:	4874      	ldr	r0, [pc, #464]	; (80029bc <readGRAM+0x32c>)
 80027ec:	f7fe f9c6 	bl	8000b7c <PIN_LOW>
 80027f0:	2102      	movs	r1, #2
 80027f2:	4872      	ldr	r0, [pc, #456]	; (80029bc <readGRAM+0x32c>)
 80027f4:	f7fe f9c2 	bl	8000b7c <PIN_LOW>
 80027f8:	2102      	movs	r1, #2
 80027fa:	4870      	ldr	r0, [pc, #448]	; (80029bc <readGRAM+0x32c>)
 80027fc:	f7fe f9ce 	bl	8000b9c <PIN_HIGH>
 8002800:	2102      	movs	r1, #2
 8002802:	486e      	ldr	r0, [pc, #440]	; (80029bc <readGRAM+0x32c>)
 8002804:	f7fe f9ca 	bl	8000b9c <PIN_HIGH>
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <readGRAM+0x32c>)
 800280a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800280e:	619a      	str	r2, [r3, #24]
 8002810:	4b69      	ldr	r3, [pc, #420]	; (80029b8 <readGRAM+0x328>)
 8002812:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002816:	619a      	str	r2, [r3, #24]
 8002818:	4b69      	ldr	r3, [pc, #420]	; (80029c0 <readGRAM+0x330>)
 800281a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800281e:	619a      	str	r2, [r3, #24]
 8002820:	7f3b      	ldrb	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002828:	7f3b      	ldrb	r3, [r7, #28]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	431a      	orrs	r2, r3
 8002832:	7f3b      	ldrb	r3, [r7, #28]
 8002834:	025b      	lsls	r3, r3, #9
 8002836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283a:	431a      	orrs	r2, r3
 800283c:	4b5f      	ldr	r3, [pc, #380]	; (80029bc <readGRAM+0x32c>)
 800283e:	619a      	str	r2, [r3, #24]
 8002840:	7f3b      	ldrb	r3, [r7, #28]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002848:	7f3b      	ldrb	r3, [r7, #28]
 800284a:	105b      	asrs	r3, r3, #1
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	431a      	orrs	r2, r3
 8002852:	7f3b      	ldrb	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	431a      	orrs	r2, r3
 800285c:	7f3b      	ldrb	r3, [r7, #28]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	431a      	orrs	r2, r3
 8002864:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <readGRAM+0x328>)
 8002866:	619a      	str	r2, [r3, #24]
 8002868:	7f3b      	ldrb	r3, [r7, #28]
 800286a:	019b      	lsls	r3, r3, #6
 800286c:	4a54      	ldr	r2, [pc, #336]	; (80029c0 <readGRAM+0x330>)
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	2102      	movs	r1, #2
 8002876:	4851      	ldr	r0, [pc, #324]	; (80029bc <readGRAM+0x32c>)
 8002878:	f7fe f980 	bl	8000b7c <PIN_LOW>
 800287c:	2102      	movs	r1, #2
 800287e:	484f      	ldr	r0, [pc, #316]	; (80029bc <readGRAM+0x32c>)
 8002880:	f7fe f97c 	bl	8000b7c <PIN_LOW>
 8002884:	2102      	movs	r1, #2
 8002886:	484d      	ldr	r0, [pc, #308]	; (80029bc <readGRAM+0x32c>)
 8002888:	f7fe f978 	bl	8000b7c <PIN_LOW>
 800288c:	2102      	movs	r1, #2
 800288e:	484b      	ldr	r0, [pc, #300]	; (80029bc <readGRAM+0x32c>)
 8002890:	f7fe f984 	bl	8000b9c <PIN_HIGH>
 8002894:	2102      	movs	r1, #2
 8002896:	4849      	ldr	r0, [pc, #292]	; (80029bc <readGRAM+0x32c>)
 8002898:	f7fe f980 	bl	8000b9c <PIN_HIGH>
 800289c:	2110      	movs	r1, #16
 800289e:	4847      	ldr	r0, [pc, #284]	; (80029bc <readGRAM+0x32c>)
 80028a0:	f7fe f97c 	bl	8000b9c <PIN_HIGH>
        setReadDir();
 80028a4:	f7fe faa4 	bl	8000df0 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 80028a8:	4b40      	ldr	r3, [pc, #256]	; (80029ac <readGRAM+0x31c>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 816d 	bne.w	8002b90 <readGRAM+0x500>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 80028b6:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <readGRAM+0x31c>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <readGRAM+0x23e>
 80028c2:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <readGRAM+0x334>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	f241 2289 	movw	r2, #4745	; 0x1289
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d17c      	bne.n	80029c8 <readGRAM+0x338>
            READ_8(r);
 80028ce:	2101      	movs	r1, #1
 80028d0:	483a      	ldr	r0, [pc, #232]	; (80029bc <readGRAM+0x32c>)
 80028d2:	f7fe f963 	bl	8000b9c <PIN_HIGH>
 80028d6:	2101      	movs	r1, #1
 80028d8:	4838      	ldr	r0, [pc, #224]	; (80029bc <readGRAM+0x32c>)
 80028da:	f7fe f94f 	bl	8000b7c <PIN_LOW>
 80028de:	2101      	movs	r1, #1
 80028e0:	4836      	ldr	r0, [pc, #216]	; (80029bc <readGRAM+0x32c>)
 80028e2:	f7fe f94b 	bl	8000b7c <PIN_LOW>
 80028e6:	2101      	movs	r1, #1
 80028e8:	4834      	ldr	r0, [pc, #208]	; (80029bc <readGRAM+0x32c>)
 80028ea:	f7fe f947 	bl	8000b7c <PIN_LOW>
 80028ee:	2101      	movs	r1, #1
 80028f0:	4832      	ldr	r0, [pc, #200]	; (80029bc <readGRAM+0x32c>)
 80028f2:	f7fe f943 	bl	8000b7c <PIN_LOW>
 80028f6:	2101      	movs	r1, #1
 80028f8:	4830      	ldr	r0, [pc, #192]	; (80029bc <readGRAM+0x32c>)
 80028fa:	f7fe f93f 	bl	8000b7c <PIN_LOW>
 80028fe:	2101      	movs	r1, #1
 8002900:	482e      	ldr	r0, [pc, #184]	; (80029bc <readGRAM+0x32c>)
 8002902:	f7fe f93b 	bl	8000b7c <PIN_LOW>
 8002906:	2101      	movs	r1, #1
 8002908:	482c      	ldr	r0, [pc, #176]	; (80029bc <readGRAM+0x32c>)
 800290a:	f7fe f937 	bl	8000b7c <PIN_LOW>
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <readGRAM+0x32c>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <readGRAM+0x328>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <readGRAM+0x328>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <readGRAM+0x328>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	b2db      	uxtb	r3, r3
 8002950:	4313      	orrs	r3, r2
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <readGRAM+0x328>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4313      	orrs	r3, r2
 8002962:	b2da      	uxtb	r2, r3
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <readGRAM+0x32c>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	b2db      	uxtb	r3, r3
 8002972:	4313      	orrs	r3, r2
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <readGRAM+0x330>)
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4313      	orrs	r3, r2
 8002986:	b2da      	uxtb	r2, r3
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <readGRAM+0x32c>)
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	0a5b      	lsrs	r3, r3, #9
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	75fb      	strb	r3, [r7, #23]
 800299a:	2101      	movs	r1, #1
 800299c:	4807      	ldr	r0, [pc, #28]	; (80029bc <readGRAM+0x32c>)
 800299e:	f7fe f8fd 	bl	8000b9c <PIN_HIGH>
 80029a2:	2101      	movs	r1, #1
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <readGRAM+0x32c>)
 80029a6:	f7fe f8f9 	bl	8000b9c <PIN_HIGH>
 80029aa:	e0f1      	b.n	8002b90 <readGRAM+0x500>
 80029ac:	200000d2 	.word	0x200000d2
 80029b0:	200000da 	.word	0x200000da
 80029b4:	200000d8 	.word	0x200000d8
 80029b8:	40020400 	.word	0x40020400
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020800 	.word	0x40020800
 80029c4:	200000e0 	.word	0x200000e0
        } else {
            READ_16(dummy);
 80029c8:	2101      	movs	r1, #1
 80029ca:	48ac      	ldr	r0, [pc, #688]	; (8002c7c <readGRAM+0x5ec>)
 80029cc:	f7fe f8e6 	bl	8000b9c <PIN_HIGH>
 80029d0:	2101      	movs	r1, #1
 80029d2:	48aa      	ldr	r0, [pc, #680]	; (8002c7c <readGRAM+0x5ec>)
 80029d4:	f7fe f8d2 	bl	8000b7c <PIN_LOW>
 80029d8:	2101      	movs	r1, #1
 80029da:	48a8      	ldr	r0, [pc, #672]	; (8002c7c <readGRAM+0x5ec>)
 80029dc:	f7fe f8ce 	bl	8000b7c <PIN_LOW>
 80029e0:	2101      	movs	r1, #1
 80029e2:	48a6      	ldr	r0, [pc, #664]	; (8002c7c <readGRAM+0x5ec>)
 80029e4:	f7fe f8ca 	bl	8000b7c <PIN_LOW>
 80029e8:	2101      	movs	r1, #1
 80029ea:	48a4      	ldr	r0, [pc, #656]	; (8002c7c <readGRAM+0x5ec>)
 80029ec:	f7fe f8c6 	bl	8000b7c <PIN_LOW>
 80029f0:	2101      	movs	r1, #1
 80029f2:	48a2      	ldr	r0, [pc, #648]	; (8002c7c <readGRAM+0x5ec>)
 80029f4:	f7fe f8c2 	bl	8000b7c <PIN_LOW>
 80029f8:	2101      	movs	r1, #1
 80029fa:	48a0      	ldr	r0, [pc, #640]	; (8002c7c <readGRAM+0x5ec>)
 80029fc:	f7fe f8be 	bl	8000b7c <PIN_LOW>
 8002a00:	2101      	movs	r1, #1
 8002a02:	489e      	ldr	r0, [pc, #632]	; (8002c7c <readGRAM+0x5ec>)
 8002a04:	f7fe f8ba 	bl	8000b7c <PIN_LOW>
 8002a08:	4b9c      	ldr	r3, [pc, #624]	; (8002c7c <readGRAM+0x5ec>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b9a      	ldr	r3, [pc, #616]	; (8002c80 <readGRAM+0x5f0>)
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4313      	orrs	r3, r2
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b95      	ldr	r3, [pc, #596]	; (8002c80 <readGRAM+0x5f0>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b90      	ldr	r3, [pc, #576]	; (8002c80 <readGRAM+0x5f0>)
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b8c      	ldr	r3, [pc, #560]	; (8002c80 <readGRAM+0x5f0>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b87      	ldr	r3, [pc, #540]	; (8002c7c <readGRAM+0x5ec>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b84      	ldr	r3, [pc, #528]	; (8002c84 <readGRAM+0x5f4>)
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b7e      	ldr	r3, [pc, #504]	; (8002c7c <readGRAM+0x5ec>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	0a5b      	lsrs	r3, r3, #9
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	4313      	orrs	r3, r2
 8002a92:	76fb      	strb	r3, [r7, #27]
 8002a94:	2101      	movs	r1, #1
 8002a96:	4879      	ldr	r0, [pc, #484]	; (8002c7c <readGRAM+0x5ec>)
 8002a98:	f7fe f880 	bl	8000b9c <PIN_HIGH>
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4877      	ldr	r0, [pc, #476]	; (8002c7c <readGRAM+0x5ec>)
 8002aa0:	f7fe f87c 	bl	8000b9c <PIN_HIGH>
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4875      	ldr	r0, [pc, #468]	; (8002c7c <readGRAM+0x5ec>)
 8002aa8:	f7fe f878 	bl	8000b9c <PIN_HIGH>
 8002aac:	2101      	movs	r1, #1
 8002aae:	4873      	ldr	r0, [pc, #460]	; (8002c7c <readGRAM+0x5ec>)
 8002ab0:	f7fe f864 	bl	8000b7c <PIN_LOW>
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4871      	ldr	r0, [pc, #452]	; (8002c7c <readGRAM+0x5ec>)
 8002ab8:	f7fe f860 	bl	8000b7c <PIN_LOW>
 8002abc:	2101      	movs	r1, #1
 8002abe:	486f      	ldr	r0, [pc, #444]	; (8002c7c <readGRAM+0x5ec>)
 8002ac0:	f7fe f85c 	bl	8000b7c <PIN_LOW>
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	486d      	ldr	r0, [pc, #436]	; (8002c7c <readGRAM+0x5ec>)
 8002ac8:	f7fe f858 	bl	8000b7c <PIN_LOW>
 8002acc:	2101      	movs	r1, #1
 8002ace:	486b      	ldr	r0, [pc, #428]	; (8002c7c <readGRAM+0x5ec>)
 8002ad0:	f7fe f854 	bl	8000b7c <PIN_LOW>
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4869      	ldr	r0, [pc, #420]	; (8002c7c <readGRAM+0x5ec>)
 8002ad8:	f7fe f850 	bl	8000b7c <PIN_LOW>
 8002adc:	2101      	movs	r1, #1
 8002ade:	4867      	ldr	r0, [pc, #412]	; (8002c7c <readGRAM+0x5ec>)
 8002ae0:	f7fe f84c 	bl	8000b7c <PIN_LOW>
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <readGRAM+0x5ec>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <readGRAM+0x5f0>)
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4313      	orrs	r3, r2
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <readGRAM+0x5f0>)
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4313      	orrs	r3, r2
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <readGRAM+0x5f0>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4313      	orrs	r3, r2
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b55      	ldr	r3, [pc, #340]	; (8002c80 <readGRAM+0x5f0>)
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	4313      	orrs	r3, r2
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <readGRAM+0x5ec>)
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <readGRAM+0x5f4>)
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <readGRAM+0x5ec>)
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	0a5b      	lsrs	r3, r3, #9
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	833b      	strh	r3, [r7, #24]
 8002b70:	2101      	movs	r1, #1
 8002b72:	4842      	ldr	r0, [pc, #264]	; (8002c7c <readGRAM+0x5ec>)
 8002b74:	f7fe f812 	bl	8000b9c <PIN_HIGH>
 8002b78:	2101      	movs	r1, #1
 8002b7a:	4840      	ldr	r0, [pc, #256]	; (8002c7c <readGRAM+0x5ec>)
 8002b7c:	f7fe f80e 	bl	8000b9c <PIN_HIGH>
 8002b80:	7efb      	ldrb	r3, [r7, #27]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	b21a      	sxth	r2, r3
 8002b86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8002b90:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <readGRAM+0x5f8>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	f241 5211 	movw	r2, #5393	; 0x1511
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	f040 830f 	bne.w	80031bc <readGRAM+0xb2c>
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	4836      	ldr	r0, [pc, #216]	; (8002c7c <readGRAM+0x5ec>)
 8002ba2:	f7fd fffb 	bl	8000b9c <PIN_HIGH>
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4834      	ldr	r0, [pc, #208]	; (8002c7c <readGRAM+0x5ec>)
 8002baa:	f7fd ffe7 	bl	8000b7c <PIN_LOW>
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4832      	ldr	r0, [pc, #200]	; (8002c7c <readGRAM+0x5ec>)
 8002bb2:	f7fd ffe3 	bl	8000b7c <PIN_LOW>
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4830      	ldr	r0, [pc, #192]	; (8002c7c <readGRAM+0x5ec>)
 8002bba:	f7fd ffdf 	bl	8000b7c <PIN_LOW>
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	482e      	ldr	r0, [pc, #184]	; (8002c7c <readGRAM+0x5ec>)
 8002bc2:	f7fd ffdb 	bl	8000b7c <PIN_LOW>
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	482c      	ldr	r0, [pc, #176]	; (8002c7c <readGRAM+0x5ec>)
 8002bca:	f7fd ffd7 	bl	8000b7c <PIN_LOW>
 8002bce:	2101      	movs	r1, #1
 8002bd0:	482a      	ldr	r0, [pc, #168]	; (8002c7c <readGRAM+0x5ec>)
 8002bd2:	f7fd ffd3 	bl	8000b7c <PIN_LOW>
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4828      	ldr	r0, [pc, #160]	; (8002c7c <readGRAM+0x5ec>)
 8002bda:	f7fd ffcf 	bl	8000b7c <PIN_LOW>
 8002bde:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <readGRAM+0x5ec>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <readGRAM+0x5f0>)
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <readGRAM+0x5f0>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <readGRAM+0x5f0>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	085b      	lsrs	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <readGRAM+0x5f0>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	4313      	orrs	r3, r2
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <readGRAM+0x5ec>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <readGRAM+0x5f4>)
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	099b      	lsrs	r3, r3, #6
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4313      	orrs	r3, r2
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <readGRAM+0x5ec>)
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	0a5b      	lsrs	r3, r3, #9
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	75fb      	strb	r3, [r7, #23]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4803      	ldr	r0, [pc, #12]	; (8002c7c <readGRAM+0x5ec>)
 8002c6e:	f7fd ff95 	bl	8000b9c <PIN_HIGH>
 8002c72:	2101      	movs	r1, #1
 8002c74:	4801      	ldr	r0, [pc, #4]	; (8002c7c <readGRAM+0x5ec>)
 8002c76:	f7fd ff91 	bl	8000b9c <PIN_HIGH>
        while (n)
 8002c7a:	e29f      	b.n	80031bc <readGRAM+0xb2c>
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40020800 	.word	0x40020800
 8002c88:	200000e0 	.word	0x200000e0
        {
            if (_lcd_capable & READ_24BITS)
 8002c8c:	4bab      	ldr	r3, [pc, #684]	; (8002f3c <readGRAM+0x8ac>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 816b 	beq.w	8002f70 <readGRAM+0x8e0>
            {
                READ_8(r);
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	48a8      	ldr	r0, [pc, #672]	; (8002f40 <readGRAM+0x8b0>)
 8002c9e:	f7fd ff7d 	bl	8000b9c <PIN_HIGH>
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	48a6      	ldr	r0, [pc, #664]	; (8002f40 <readGRAM+0x8b0>)
 8002ca6:	f7fd ff69 	bl	8000b7c <PIN_LOW>
 8002caa:	2101      	movs	r1, #1
 8002cac:	48a4      	ldr	r0, [pc, #656]	; (8002f40 <readGRAM+0x8b0>)
 8002cae:	f7fd ff65 	bl	8000b7c <PIN_LOW>
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	48a2      	ldr	r0, [pc, #648]	; (8002f40 <readGRAM+0x8b0>)
 8002cb6:	f7fd ff61 	bl	8000b7c <PIN_LOW>
 8002cba:	2101      	movs	r1, #1
 8002cbc:	48a0      	ldr	r0, [pc, #640]	; (8002f40 <readGRAM+0x8b0>)
 8002cbe:	f7fd ff5d 	bl	8000b7c <PIN_LOW>
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	489e      	ldr	r0, [pc, #632]	; (8002f40 <readGRAM+0x8b0>)
 8002cc6:	f7fd ff59 	bl	8000b7c <PIN_LOW>
 8002cca:	2101      	movs	r1, #1
 8002ccc:	489c      	ldr	r0, [pc, #624]	; (8002f40 <readGRAM+0x8b0>)
 8002cce:	f7fd ff55 	bl	8000b7c <PIN_LOW>
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	489a      	ldr	r0, [pc, #616]	; (8002f40 <readGRAM+0x8b0>)
 8002cd6:	f7fd ff51 	bl	8000b7c <PIN_LOW>
 8002cda:	4b99      	ldr	r3, [pc, #612]	; (8002f40 <readGRAM+0x8b0>)
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	4b96      	ldr	r3, [pc, #600]	; (8002f44 <readGRAM+0x8b4>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b92      	ldr	r3, [pc, #584]	; (8002f44 <readGRAM+0x8b4>)
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b8d      	ldr	r3, [pc, #564]	; (8002f44 <readGRAM+0x8b4>)
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	4b88      	ldr	r3, [pc, #544]	; (8002f44 <readGRAM+0x8b4>)
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b83      	ldr	r3, [pc, #524]	; (8002f40 <readGRAM+0x8b0>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <readGRAM+0x8b8>)
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	4b7a      	ldr	r3, [pc, #488]	; (8002f40 <readGRAM+0x8b0>)
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	0a5b      	lsrs	r3, r3, #9
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	75fb      	strb	r3, [r7, #23]
 8002d66:	2101      	movs	r1, #1
 8002d68:	4875      	ldr	r0, [pc, #468]	; (8002f40 <readGRAM+0x8b0>)
 8002d6a:	f7fd ff17 	bl	8000b9c <PIN_HIGH>
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4873      	ldr	r0, [pc, #460]	; (8002f40 <readGRAM+0x8b0>)
 8002d72:	f7fd ff13 	bl	8000b9c <PIN_HIGH>
                READ_8(g);
 8002d76:	2101      	movs	r1, #1
 8002d78:	4871      	ldr	r0, [pc, #452]	; (8002f40 <readGRAM+0x8b0>)
 8002d7a:	f7fd ff0f 	bl	8000b9c <PIN_HIGH>
 8002d7e:	2101      	movs	r1, #1
 8002d80:	486f      	ldr	r0, [pc, #444]	; (8002f40 <readGRAM+0x8b0>)
 8002d82:	f7fd fefb 	bl	8000b7c <PIN_LOW>
 8002d86:	2101      	movs	r1, #1
 8002d88:	486d      	ldr	r0, [pc, #436]	; (8002f40 <readGRAM+0x8b0>)
 8002d8a:	f7fd fef7 	bl	8000b7c <PIN_LOW>
 8002d8e:	2101      	movs	r1, #1
 8002d90:	486b      	ldr	r0, [pc, #428]	; (8002f40 <readGRAM+0x8b0>)
 8002d92:	f7fd fef3 	bl	8000b7c <PIN_LOW>
 8002d96:	2101      	movs	r1, #1
 8002d98:	4869      	ldr	r0, [pc, #420]	; (8002f40 <readGRAM+0x8b0>)
 8002d9a:	f7fd feef 	bl	8000b7c <PIN_LOW>
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4867      	ldr	r0, [pc, #412]	; (8002f40 <readGRAM+0x8b0>)
 8002da2:	f7fd feeb 	bl	8000b7c <PIN_LOW>
 8002da6:	2101      	movs	r1, #1
 8002da8:	4865      	ldr	r0, [pc, #404]	; (8002f40 <readGRAM+0x8b0>)
 8002daa:	f7fd fee7 	bl	8000b7c <PIN_LOW>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4863      	ldr	r0, [pc, #396]	; (8002f40 <readGRAM+0x8b0>)
 8002db2:	f7fd fee3 	bl	8000b7c <PIN_LOW>
 8002db6:	4b62      	ldr	r3, [pc, #392]	; (8002f40 <readGRAM+0x8b0>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4b5f      	ldr	r3, [pc, #380]	; (8002f44 <readGRAM+0x8b4>)
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	; (8002f44 <readGRAM+0x8b4>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4313      	orrs	r3, r2
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <readGRAM+0x8b4>)
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <readGRAM+0x8b4>)
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b4c      	ldr	r3, [pc, #304]	; (8002f40 <readGRAM+0x8b0>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <readGRAM+0x8b8>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	099b      	lsrs	r3, r3, #6
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <readGRAM+0x8b0>)
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	0a5b      	lsrs	r3, r3, #9
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	757b      	strb	r3, [r7, #21]
 8002e42:	2101      	movs	r1, #1
 8002e44:	483e      	ldr	r0, [pc, #248]	; (8002f40 <readGRAM+0x8b0>)
 8002e46:	f7fd fea9 	bl	8000b9c <PIN_HIGH>
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	483c      	ldr	r0, [pc, #240]	; (8002f40 <readGRAM+0x8b0>)
 8002e4e:	f7fd fea5 	bl	8000b9c <PIN_HIGH>
                READ_8(b);
 8002e52:	2101      	movs	r1, #1
 8002e54:	483a      	ldr	r0, [pc, #232]	; (8002f40 <readGRAM+0x8b0>)
 8002e56:	f7fd fea1 	bl	8000b9c <PIN_HIGH>
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4838      	ldr	r0, [pc, #224]	; (8002f40 <readGRAM+0x8b0>)
 8002e5e:	f7fd fe8d 	bl	8000b7c <PIN_LOW>
 8002e62:	2101      	movs	r1, #1
 8002e64:	4836      	ldr	r0, [pc, #216]	; (8002f40 <readGRAM+0x8b0>)
 8002e66:	f7fd fe89 	bl	8000b7c <PIN_LOW>
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4834      	ldr	r0, [pc, #208]	; (8002f40 <readGRAM+0x8b0>)
 8002e6e:	f7fd fe85 	bl	8000b7c <PIN_LOW>
 8002e72:	2101      	movs	r1, #1
 8002e74:	4832      	ldr	r0, [pc, #200]	; (8002f40 <readGRAM+0x8b0>)
 8002e76:	f7fd fe81 	bl	8000b7c <PIN_LOW>
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	4830      	ldr	r0, [pc, #192]	; (8002f40 <readGRAM+0x8b0>)
 8002e7e:	f7fd fe7d 	bl	8000b7c <PIN_LOW>
 8002e82:	2101      	movs	r1, #1
 8002e84:	482e      	ldr	r0, [pc, #184]	; (8002f40 <readGRAM+0x8b0>)
 8002e86:	f7fd fe79 	bl	8000b7c <PIN_LOW>
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	482c      	ldr	r0, [pc, #176]	; (8002f40 <readGRAM+0x8b0>)
 8002e8e:	f7fd fe75 	bl	8000b7c <PIN_LOW>
 8002e92:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <readGRAM+0x8b0>)
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <readGRAM+0x8b4>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <readGRAM+0x8b4>)
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <readGRAM+0x8b4>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <readGRAM+0x8b4>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <readGRAM+0x8b0>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <readGRAM+0x8b8>)
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <readGRAM+0x8b0>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	0a5b      	lsrs	r3, r3, #9
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	753b      	strb	r3, [r7, #20]
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4807      	ldr	r0, [pc, #28]	; (8002f40 <readGRAM+0x8b0>)
 8002f22:	f7fd fe3b 	bl	8000b9c <PIN_HIGH>
 8002f26:	2101      	movs	r1, #1
 8002f28:	4805      	ldr	r0, [pc, #20]	; (8002f40 <readGRAM+0x8b0>)
 8002f2a:	f7fd fe37 	bl	8000b9c <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8002f2e:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <readGRAM+0x8ac>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d011      	beq.n	8002f5e <readGRAM+0x8ce>
 8002f3a:	e007      	b.n	8002f4c <readGRAM+0x8bc>
 8002f3c:	200000d2 	.word	0x200000d2
 8002f40:	40020000 	.word	0x40020000
 8002f44:	40020400 	.word	0x40020400
 8002f48:	40020800 	.word	0x40020800
                    ret = color565(b, g, r);
 8002f4c:	7dfa      	ldrb	r2, [r7, #23]
 8002f4e:	7d79      	ldrb	r1, [r7, #21]
 8002f50:	7d3b      	ldrb	r3, [r7, #20]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fee9 	bl	8000d2a <color565>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f5c:	e113      	b.n	8003186 <readGRAM+0xaf6>
                else
                    ret = color565(r, g, b);
 8002f5e:	7d3a      	ldrb	r2, [r7, #20]
 8002f60:	7d79      	ldrb	r1, [r7, #21]
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fee0 	bl	8000d2a <color565>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f6e:	e10a      	b.n	8003186 <readGRAM+0xaf6>
            } else
            {
                READ_16(ret);
 8002f70:	2101      	movs	r1, #1
 8002f72:	4895      	ldr	r0, [pc, #596]	; (80031c8 <readGRAM+0xb38>)
 8002f74:	f7fd fe12 	bl	8000b9c <PIN_HIGH>
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4893      	ldr	r0, [pc, #588]	; (80031c8 <readGRAM+0xb38>)
 8002f7c:	f7fd fdfe 	bl	8000b7c <PIN_LOW>
 8002f80:	2101      	movs	r1, #1
 8002f82:	4891      	ldr	r0, [pc, #580]	; (80031c8 <readGRAM+0xb38>)
 8002f84:	f7fd fdfa 	bl	8000b7c <PIN_LOW>
 8002f88:	2101      	movs	r1, #1
 8002f8a:	488f      	ldr	r0, [pc, #572]	; (80031c8 <readGRAM+0xb38>)
 8002f8c:	f7fd fdf6 	bl	8000b7c <PIN_LOW>
 8002f90:	2101      	movs	r1, #1
 8002f92:	488d      	ldr	r0, [pc, #564]	; (80031c8 <readGRAM+0xb38>)
 8002f94:	f7fd fdf2 	bl	8000b7c <PIN_LOW>
 8002f98:	2101      	movs	r1, #1
 8002f9a:	488b      	ldr	r0, [pc, #556]	; (80031c8 <readGRAM+0xb38>)
 8002f9c:	f7fd fdee 	bl	8000b7c <PIN_LOW>
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4889      	ldr	r0, [pc, #548]	; (80031c8 <readGRAM+0xb38>)
 8002fa4:	f7fd fdea 	bl	8000b7c <PIN_LOW>
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4887      	ldr	r0, [pc, #540]	; (80031c8 <readGRAM+0xb38>)
 8002fac:	f7fd fde6 	bl	8000b7c <PIN_LOW>
 8002fb0:	4b85      	ldr	r3, [pc, #532]	; (80031c8 <readGRAM+0xb38>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b83      	ldr	r3, [pc, #524]	; (80031cc <readGRAM+0xb3c>)
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	4b7e      	ldr	r3, [pc, #504]	; (80031cc <readGRAM+0xb3c>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b79      	ldr	r3, [pc, #484]	; (80031cc <readGRAM+0xb3c>)
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4b75      	ldr	r3, [pc, #468]	; (80031cc <readGRAM+0xb3c>)
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	b2db      	uxtb	r3, r3
 8003002:	4313      	orrs	r3, r2
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b70      	ldr	r3, [pc, #448]	; (80031c8 <readGRAM+0xb38>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	b2da      	uxtb	r2, r3
 8003018:	4b6d      	ldr	r3, [pc, #436]	; (80031d0 <readGRAM+0xb40>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4313      	orrs	r3, r2
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b67      	ldr	r3, [pc, #412]	; (80031c8 <readGRAM+0xb38>)
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	0a5b      	lsrs	r3, r3, #9
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4313      	orrs	r3, r2
 800303a:	75bb      	strb	r3, [r7, #22]
 800303c:	2101      	movs	r1, #1
 800303e:	4862      	ldr	r0, [pc, #392]	; (80031c8 <readGRAM+0xb38>)
 8003040:	f7fd fdac 	bl	8000b9c <PIN_HIGH>
 8003044:	2101      	movs	r1, #1
 8003046:	4860      	ldr	r0, [pc, #384]	; (80031c8 <readGRAM+0xb38>)
 8003048:	f7fd fda8 	bl	8000b9c <PIN_HIGH>
 800304c:	2101      	movs	r1, #1
 800304e:	485e      	ldr	r0, [pc, #376]	; (80031c8 <readGRAM+0xb38>)
 8003050:	f7fd fda4 	bl	8000b9c <PIN_HIGH>
 8003054:	2101      	movs	r1, #1
 8003056:	485c      	ldr	r0, [pc, #368]	; (80031c8 <readGRAM+0xb38>)
 8003058:	f7fd fd90 	bl	8000b7c <PIN_LOW>
 800305c:	2101      	movs	r1, #1
 800305e:	485a      	ldr	r0, [pc, #360]	; (80031c8 <readGRAM+0xb38>)
 8003060:	f7fd fd8c 	bl	8000b7c <PIN_LOW>
 8003064:	2101      	movs	r1, #1
 8003066:	4858      	ldr	r0, [pc, #352]	; (80031c8 <readGRAM+0xb38>)
 8003068:	f7fd fd88 	bl	8000b7c <PIN_LOW>
 800306c:	2101      	movs	r1, #1
 800306e:	4856      	ldr	r0, [pc, #344]	; (80031c8 <readGRAM+0xb38>)
 8003070:	f7fd fd84 	bl	8000b7c <PIN_LOW>
 8003074:	2101      	movs	r1, #1
 8003076:	4854      	ldr	r0, [pc, #336]	; (80031c8 <readGRAM+0xb38>)
 8003078:	f7fd fd80 	bl	8000b7c <PIN_LOW>
 800307c:	2101      	movs	r1, #1
 800307e:	4852      	ldr	r0, [pc, #328]	; (80031c8 <readGRAM+0xb38>)
 8003080:	f7fd fd7c 	bl	8000b7c <PIN_LOW>
 8003084:	2101      	movs	r1, #1
 8003086:	4850      	ldr	r0, [pc, #320]	; (80031c8 <readGRAM+0xb38>)
 8003088:	f7fd fd78 	bl	8000b7c <PIN_LOW>
 800308c:	4b4e      	ldr	r3, [pc, #312]	; (80031c8 <readGRAM+0xb38>)
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	b29b      	uxth	r3, r3
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	b29a      	uxth	r2, r3
 800309a:	4b4c      	ldr	r3, [pc, #304]	; (80031cc <readGRAM+0xb3c>)
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4313      	orrs	r3, r2
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b47      	ldr	r3, [pc, #284]	; (80031cc <readGRAM+0xb3c>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	4313      	orrs	r3, r2
 80030be:	b29a      	uxth	r2, r3
 80030c0:	4b42      	ldr	r3, [pc, #264]	; (80031cc <readGRAM+0xb3c>)
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <readGRAM+0xb3c>)
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4313      	orrs	r3, r2
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <readGRAM+0xb38>)
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4313      	orrs	r3, r2
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <readGRAM+0xb40>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	b29b      	uxth	r3, r3
 8003102:	4313      	orrs	r3, r2
 8003104:	b29a      	uxth	r2, r3
 8003106:	4b30      	ldr	r3, [pc, #192]	; (80031c8 <readGRAM+0xb38>)
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	0a5b      	lsrs	r3, r3, #9
 800310c:	b29b      	uxth	r3, r3
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	b29b      	uxth	r3, r3
 8003114:	4313      	orrs	r3, r2
 8003116:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003118:	2101      	movs	r1, #1
 800311a:	482b      	ldr	r0, [pc, #172]	; (80031c8 <readGRAM+0xb38>)
 800311c:	f7fd fd3e 	bl	8000b9c <PIN_HIGH>
 8003120:	2101      	movs	r1, #1
 8003122:	4829      	ldr	r0, [pc, #164]	; (80031c8 <readGRAM+0xb38>)
 8003124:	f7fd fd3a 	bl	8000b9c <PIN_HIGH>
 8003128:	7dbb      	ldrb	r3, [r7, #22]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	b21a      	sxth	r2, r3
 800312e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003132:	4313      	orrs	r3, r2
 8003134:	b21b      	sxth	r3, r3
 8003136:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <readGRAM+0xb44>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d009      	beq.n	8003158 <readGRAM+0xac8>
                    ret = (ret >> 8) | (ret << 8);
 8003144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	b29b      	uxth	r3, r3
 800314a:	b21a      	sxth	r2, r3
 800314c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	b21b      	sxth	r3, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	b21b      	sxth	r3, r3
 8003156:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <readGRAM+0xb44>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <readGRAM+0xaf6>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8003164:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003168:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800316c:	b21a      	sxth	r2, r3
 800316e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003170:	0adb      	lsrs	r3, r3, #11
 8003172:	b29b      	uxth	r3, r3
 8003174:	b21b      	sxth	r3, r3
 8003176:	4313      	orrs	r3, r2
 8003178:	b21a      	sxth	r2, r3
 800317a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800317c:	02db      	lsls	r3, r3, #11
 800317e:	b21b      	sxth	r3, r3
 8003180:	4313      	orrs	r3, r2
 8003182:	b21b      	sxth	r3, r3
 8003184:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <readGRAM+0xb48>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <readGRAM+0xb0a>
 800318e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fd79 	bl	8000c88 <color555_to_565>
 8003196:	4603      	mov	r3, r0
 8003198:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80031a2:	801a      	strh	r2, [r3, #0]
            n--;
 80031a4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <readGRAM+0xb44>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00f      	beq.n	80031dc <readGRAM+0xb4c>
        while (n)
 80031bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f47f ad63 	bne.w	8002c8c <readGRAM+0x5fc>
 80031c6:	e00a      	b.n	80031de <readGRAM+0xb4e>
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020400 	.word	0x40020400
 80031d0:	40020800 	.word	0x40020800
 80031d4:	200000d2 	.word	0x200000d2
 80031d8:	20000030 	.word	0x20000030
                break;
 80031dc:	bf00      	nop
        }
        if (++col >= w) {
 80031de:	8bfb      	ldrh	r3, [r7, #30]
 80031e0:	3301      	adds	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	83fb      	strh	r3, [r7, #30]
 80031e6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80031ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	db0d      	blt.n	800320e <readGRAM+0xb7e>
            col = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 80031f6:	8c3b      	ldrh	r3, [r7, #32]
 80031f8:	3301      	adds	r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	843b      	strh	r3, [r7, #32]
 80031fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003202:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8003206:	429a      	cmp	r2, r3
 8003208:	db01      	blt.n	800320e <readGRAM+0xb7e>
                row = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 800320e:	2101      	movs	r1, #1
 8003210:	4814      	ldr	r0, [pc, #80]	; (8003264 <readGRAM+0xbd4>)
 8003212:	f7fd fcc3 	bl	8000b9c <PIN_HIGH>
        CS_IDLE;
 8003216:	2101      	movs	r1, #1
 8003218:	4813      	ldr	r0, [pc, #76]	; (8003268 <readGRAM+0xbd8>)
 800321a:	f7fd fcbf 	bl	8000b9c <PIN_HIGH>
        setWriteDir();
 800321e:	f7fd fe15 	bl	8000e4c <setWriteDir>
    while (n > 0) {
 8003222:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003226:	2b00      	cmp	r3, #0
 8003228:	f73f aa7e 	bgt.w	8002728 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <readGRAM+0xbdc>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d110      	bne.n	800325a <readGRAM+0xbca>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003238:	f7fd fcee 	bl	8000c18 <width>
 800323c:	4603      	mov	r3, r0
 800323e:	3b01      	subs	r3, #1
 8003240:	b29b      	uxth	r3, r3
 8003242:	b21c      	sxth	r4, r3
 8003244:	f7fd fcf4 	bl	8000c30 <height>
 8003248:	4603      	mov	r3, r0
 800324a:	3b01      	subs	r3, #1
 800324c:	b29b      	uxth	r3, r3
 800324e:	b21b      	sxth	r3, r3
 8003250:	4622      	mov	r2, r4
 8003252:	2100      	movs	r1, #0
 8003254:	2000      	movs	r0, #0
 8003256:	f000 fb97 	bl	8003988 <setAddrWindow>
    return 0;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	372c      	adds	r7, #44	; 0x2c
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}
 8003264:	40020000 	.word	0x40020000
 8003268:	40020400 	.word	0x40020400
 800326c:	200000d2 	.word	0x200000d2

08003270 <setRotation>:


void setRotation(uint8_t r)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800327a:	4bab      	ldr	r3, [pc, #684]	; (8003528 <setRotation+0x2b8>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	b2da      	uxtb	r2, r3
 8003288:	4ba8      	ldr	r3, [pc, #672]	; (800352c <setRotation+0x2bc>)
 800328a:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 800328c:	4ba7      	ldr	r3, [pc, #668]	; (800352c <setRotation+0x2bc>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <setRotation+0x2e>
 8003298:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800329c:	e000      	b.n	80032a0 <setRotation+0x30>
 800329e:	22f0      	movs	r2, #240	; 0xf0
 80032a0:	4ba3      	ldr	r3, [pc, #652]	; (8003530 <setRotation+0x2c0>)
 80032a2:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80032a4:	4ba1      	ldr	r3, [pc, #644]	; (800352c <setRotation+0x2bc>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <setRotation+0x44>
 80032b0:	22f0      	movs	r2, #240	; 0xf0
 80032b2:	e001      	b.n	80032b8 <setRotation+0x48>
 80032b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032b8:	4b9e      	ldr	r3, [pc, #632]	; (8003534 <setRotation+0x2c4>)
 80032ba:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80032bc:	4b9b      	ldr	r3, [pc, #620]	; (800352c <setRotation+0x2bc>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d817      	bhi.n	80032f4 <setRotation+0x84>
 80032c4:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <setRotation+0x5c>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032e3 	.word	0x080032e3
 80032d4:	080032e9 	.word	0x080032e9
 80032d8:	080032ef 	.word	0x080032ef
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80032dc:	2348      	movs	r3, #72	; 0x48
 80032de:	72fb      	strb	r3, [r7, #11]
       break;
 80032e0:	e008      	b.n	80032f4 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 80032e2:	2328      	movs	r3, #40	; 0x28
 80032e4:	72fb      	strb	r3, [r7, #11]
       break;
 80032e6:	e005      	b.n	80032f4 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 80032e8:	2398      	movs	r3, #152	; 0x98
 80032ea:	72fb      	strb	r3, [r7, #11]
       break;
 80032ec:	e002      	b.n	80032f4 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 80032ee:	23f8      	movs	r3, #248	; 0xf8
 80032f0:	72fb      	strb	r3, [r7, #11]
       break;
 80032f2:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 80032f4:	4b90      	ldr	r3, [pc, #576]	; (8003538 <setRotation+0x2c8>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <setRotation+0x9c>
       val ^= 0x80;
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8003306:	43db      	mvns	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 800330c:	4b8a      	ldr	r3, [pc, #552]	; (8003538 <setRotation+0x2c8>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <setRotation+0xb2>
       val ^= 0x40;
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800331e:	b2db      	uxtb	r3, r3
 8003320:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <setRotation+0x2c8>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <setRotation+0xc8>
       val ^= 0x08;
 800332e:	7afb      	ldrb	r3, [r7, #11]
 8003330:	f083 0308 	eor.w	r3, r3, #8
 8003334:	b2db      	uxtb	r3, r3
 8003336:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003338:	4b7f      	ldr	r3, [pc, #508]	; (8003538 <setRotation+0x2c8>)
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8119 	beq.w	8003578 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8003346:	4b7d      	ldr	r3, [pc, #500]	; (800353c <setRotation+0x2cc>)
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	f646 0214 	movw	r2, #26644	; 0x6814
 800334e:	4293      	cmp	r3, r2
 8003350:	d128      	bne.n	80033a4 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	b25b      	sxtb	r3, r3
 8003356:	105b      	asrs	r3, r3, #1
 8003358:	b25b      	sxtb	r3, r3
 800335a:	b29b      	uxth	r3, r3
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8003362:	7afb      	ldrb	r3, [r7, #11]
 8003364:	105b      	asrs	r3, r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 800336e:	7afb      	ldrb	r3, [r7, #11]
 8003370:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003374:	b2db      	uxtb	r3, r3
 8003376:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 800337c:	8a3b      	ldrh	r3, [r7, #16]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4313      	orrs	r3, r2
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8003390:	233b      	movs	r3, #59	; 0x3b
 8003392:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8003394:	f107 0308 	add.w	r3, r7, #8
 8003398:	461a      	mov	r2, r3
 800339a:	2103      	movs	r1, #3
 800339c:	20b6      	movs	r0, #182	; 0xb6
 800339e:	f7fd ffd9 	bl	8001354 <WriteCmdParamN>
           goto common_MC;
 80033a2:	e0a4      	b.n	80034ee <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 80033a4:	4b65      	ldr	r3, [pc, #404]	; (800353c <setRotation+0x2cc>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	f641 1263 	movw	r2, #6499	; 0x1963
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <setRotation+0x158>
 80033b0:	4b62      	ldr	r3, [pc, #392]	; (800353c <setRotation+0x2cc>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	f249 4281 	movw	r2, #38017	; 0x9481
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d005      	beq.n	80033c8 <setRotation+0x158>
 80033bc:	4b5f      	ldr	r3, [pc, #380]	; (800353c <setRotation+0x2cc>)
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	f241 5211 	movw	r2, #5393	; 0x1511
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d139      	bne.n	800343c <setRotation+0x1cc>
           if (val & 0x80)
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da04      	bge.n	80033da <setRotation+0x16a>
               val |= 0x01;    //GS
 80033d0:	7afb      	ldrb	r3, [r7, #11]
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 80033da:	7afb      	ldrb	r3, [r7, #11]
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <setRotation+0x17e>
               val |= 0x02;    //SS
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 80033ee:	4b53      	ldr	r3, [pc, #332]	; (800353c <setRotation+0x2cc>)
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	f641 1263 	movw	r2, #6499	; 0x1963
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d104      	bne.n	8003404 <setRotation+0x194>
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003400:	b2db      	uxtb	r3, r3
 8003402:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8003404:	4b4d      	ldr	r3, [pc, #308]	; (800353c <setRotation+0x2cc>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	f249 4281 	movw	r2, #38017	; 0x9481
 800340c:	4293      	cmp	r3, r2
 800340e:	d104      	bne.n	800341a <setRotation+0x1aa>
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8003416:	b2db      	uxtb	r3, r3
 8003418:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 800341a:	4b48      	ldr	r3, [pc, #288]	; (800353c <setRotation+0x2cc>)
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	f241 5211 	movw	r2, #5393	; 0x1511
 8003422:	4293      	cmp	r3, r2
 8003424:	d160      	bne.n	80034e8 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8003426:	7afb      	ldrb	r3, [r7, #11]
 8003428:	f023 0310 	bic.w	r3, r3, #16
 800342c:	b2db      	uxtb	r3, r3
 800342e:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8003430:	7afb      	ldrb	r3, [r7, #11]
 8003432:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003436:	b2db      	uxtb	r3, r3
 8003438:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 800343a:	e055      	b.n	80034e8 <setRotation+0x278>
      }
       else if (is8347) {
 800343c:	4b40      	ldr	r3, [pc, #256]	; (8003540 <setRotation+0x2d0>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d053      	beq.n	80034ec <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8003444:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <setRotation+0x2d4>)
 8003446:	2202      	movs	r2, #2
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <setRotation+0x2d8>)
 800344c:	2206      	movs	r2, #6
 800344e:	801a      	strh	r2, [r3, #0]
 8003450:	4b3e      	ldr	r3, [pc, #248]	; (800354c <setRotation+0x2dc>)
 8003452:	2222      	movs	r2, #34	; 0x22
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	4b3e      	ldr	r3, [pc, #248]	; (8003550 <setRotation+0x2e0>)
 8003458:	2202      	movs	r2, #2
 800345a:	801a      	strh	r2, [r3, #0]
 800345c:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <setRotation+0x2e4>)
 800345e:	2204      	movs	r2, #4
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	4b3d      	ldr	r3, [pc, #244]	; (8003558 <setRotation+0x2e8>)
 8003464:	2206      	movs	r2, #6
 8003466:	801a      	strh	r2, [r3, #0]
 8003468:	4b3c      	ldr	r3, [pc, #240]	; (800355c <setRotation+0x2ec>)
 800346a:	2208      	movs	r2, #8
 800346c:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 800346e:	4b33      	ldr	r3, [pc, #204]	; (800353c <setRotation+0x2cc>)
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	2b65      	cmp	r3, #101	; 0x65
 8003474:	d121      	bne.n	80034ba <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8003476:	7afb      	ldrb	r3, [r7, #11]
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <setRotation+0x226>
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8003490:	43db      	mvns	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <setRotation+0x23e>
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <setRotation+0x2d4>)
 80034a2:	2282      	movs	r2, #130	; 0x82
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <setRotation+0x2d8>)
 80034a8:	2280      	movs	r2, #128	; 0x80
 80034aa:	801a      	strh	r2, [r3, #0]
 80034ac:	e005      	b.n	80034ba <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 80034ae:	4b25      	ldr	r3, [pc, #148]	; (8003544 <setRotation+0x2d4>)
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	801a      	strh	r2, [r3, #0]
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <setRotation+0x2d8>)
 80034b6:	2282      	movs	r2, #130	; 0x82
 80034b8:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <setRotation+0x2cc>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	f245 2252 	movw	r2, #21074	; 0x5252
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d129      	bne.n	800351a <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 80034d0:	7afb      	ldrb	r3, [r7, #11]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01f      	beq.n	800351a <setRotation+0x2aa>
 80034da:	7afb      	ldrb	r3, [r7, #11]
 80034dc:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 80034e0:	43db      	mvns	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 80034e6:	e018      	b.n	800351a <setRotation+0x2aa>
           goto common_MC;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <setRotation+0x27e>
       }
     common_MC:
 80034ec:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <setRotation+0x2d4>)
 80034f0:	222a      	movs	r2, #42	; 0x2a
 80034f2:	801a      	strh	r2, [r3, #0]
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <setRotation+0x2d8>)
 80034f6:	222b      	movs	r2, #43	; 0x2b
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <setRotation+0x2dc>)
 80034fc:	222c      	movs	r2, #44	; 0x2c
 80034fe:	801a      	strh	r2, [r3, #0]
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <setRotation+0x2e0>)
 8003502:	222a      	movs	r2, #42	; 0x2a
 8003504:	801a      	strh	r2, [r3, #0]
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <setRotation+0x2e4>)
 8003508:	222a      	movs	r2, #42	; 0x2a
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <setRotation+0x2e8>)
 800350e:	222b      	movs	r2, #43	; 0x2b
 8003510:	801a      	strh	r2, [r3, #0]
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <setRotation+0x2ec>)
 8003514:	222b      	movs	r2, #43	; 0x2b
 8003516:	801a      	strh	r2, [r3, #0]
 8003518:	e000      	b.n	800351c <setRotation+0x2ac>
			goto common_BGR;
 800351a:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <setRotation+0x2d0>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01d      	beq.n	8003560 <setRotation+0x2f0>
 8003524:	2316      	movs	r3, #22
 8003526:	e01c      	b.n	8003562 <setRotation+0x2f2>
 8003528:	200000d6 	.word	0x200000d6
 800352c:	20000032 	.word	0x20000032
 8003530:	20000004 	.word	0x20000004
 8003534:	20000006 	.word	0x20000006
 8003538:	200000d2 	.word	0x200000d2
 800353c:	200000e0 	.word	0x200000e0
 8003540:	2000002f 	.word	0x2000002f
 8003544:	200000da 	.word	0x200000da
 8003548:	200000d8 	.word	0x200000d8
 800354c:	200000d0 	.word	0x200000d0
 8003550:	200000dc 	.word	0x200000dc
 8003554:	200000e4 	.word	0x200000e4
 8003558:	200000d4 	.word	0x200000d4
 800355c:	200000de 	.word	0x200000de
 8003560:	2336      	movs	r3, #54	; 0x36
 8003562:	f107 020b 	add.w	r2, r7, #11
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd fef3 	bl	8001354 <WriteCmdParamN>
       _lcd_madctl = val;
 800356e:	7afb      	ldrb	r3, [r7, #11]
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b77      	ldr	r3, [pc, #476]	; (8003750 <setRotation+0x4e0>)
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	e0a5      	b.n	80036c4 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8003578:	4b76      	ldr	r3, [pc, #472]	; (8003754 <setRotation+0x4e4>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <setRotation+0x33c>
 8003584:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003588:	4293      	cmp	r3, r2
 800358a:	dc4f      	bgt.n	800362c <setRotation+0x3bc>
 800358c:	f249 3226 	movw	r2, #37670	; 0x9326
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <setRotation+0x33c>
 8003594:	f249 3226 	movw	r2, #37670	; 0x9326
 8003598:	4293      	cmp	r3, r2
 800359a:	dc47      	bgt.n	800362c <setRotation+0x3bc>
 800359c:	f245 4220 	movw	r2, #21536	; 0x5420
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <setRotation+0x33c>
 80035a4:	f247 7293 	movw	r2, #30611	; 0x7793
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d13f      	bne.n	800362c <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80035ac:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <setRotation+0x4e8>)
 80035ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	4b69      	ldr	r3, [pc, #420]	; (800375c <setRotation+0x4ec>)
 80035b6:	f240 2201 	movw	r2, #513	; 0x201
 80035ba:	801a      	strh	r2, [r3, #0]
 80035bc:	4b68      	ldr	r3, [pc, #416]	; (8003760 <setRotation+0x4f0>)
 80035be:	f240 2202 	movw	r2, #514	; 0x202
 80035c2:	801a      	strh	r2, [r3, #0]
 80035c4:	4b67      	ldr	r3, [pc, #412]	; (8003764 <setRotation+0x4f4>)
 80035c6:	f44f 7204 	mov.w	r2, #528	; 0x210
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <setRotation+0x4f8>)
 80035ce:	f240 2211 	movw	r2, #529	; 0x211
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	4b65      	ldr	r3, [pc, #404]	; (800376c <setRotation+0x4fc>)
 80035d6:	f240 2212 	movw	r2, #530	; 0x212
 80035da:	801a      	strh	r2, [r3, #0]
 80035dc:	4b64      	ldr	r3, [pc, #400]	; (8003770 <setRotation+0x500>)
 80035de:	f240 2213 	movw	r2, #531	; 0x213
 80035e2:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80035e4:	7afb      	ldrb	r3, [r7, #11]
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035f2:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 80035f4:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80035f8:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 80035fa:	4b56      	ldr	r3, [pc, #344]	; (8003754 <setRotation+0x4e4>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	f249 3226 	movw	r2, #37670	; 0x9326
 8003602:	4293      	cmp	r3, r2
 8003604:	d005      	beq.n	8003612 <setRotation+0x3a2>
 8003606:	4b53      	ldr	r3, [pc, #332]	; (8003754 <setRotation+0x4e4>)
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	f245 4220 	movw	r2, #21536	; 0x5420
 800360e:	4293      	cmp	r3, r2
 8003610:	d102      	bne.n	8003618 <setRotation+0x3a8>
 8003612:	8abb      	ldrh	r3, [r7, #20]
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8003618:	8a3a      	ldrh	r2, [r7, #16]
 800361a:	8abb      	ldrh	r3, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	4619      	mov	r1, r3
 8003622:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003626:	f7fd fbbe 	bl	8000da6 <WriteCmdData>
           goto common_SS;
 800362a:	e024      	b.n	8003676 <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 800362c:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <setRotation+0x4e8>)
 800362e:	2220      	movs	r2, #32
 8003630:	801a      	strh	r2, [r3, #0]
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <setRotation+0x4ec>)
 8003634:	2221      	movs	r2, #33	; 0x21
 8003636:	801a      	strh	r2, [r3, #0]
 8003638:	4b49      	ldr	r3, [pc, #292]	; (8003760 <setRotation+0x4f0>)
 800363a:	2222      	movs	r2, #34	; 0x22
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	4b49      	ldr	r3, [pc, #292]	; (8003764 <setRotation+0x4f4>)
 8003640:	2250      	movs	r2, #80	; 0x50
 8003642:	801a      	strh	r2, [r3, #0]
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <setRotation+0x4f8>)
 8003646:	2251      	movs	r2, #81	; 0x51
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	4b48      	ldr	r3, [pc, #288]	; (800376c <setRotation+0x4fc>)
 800364c:	2252      	movs	r2, #82	; 0x52
 800364e:	801a      	strh	r2, [r3, #0]
 8003650:	4b47      	ldr	r3, [pc, #284]	; (8003770 <setRotation+0x500>)
 8003652:	2253      	movs	r2, #83	; 0x53
 8003654:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	b25b      	sxtb	r3, r3
 800365a:	b29b      	uxth	r3, r3
 800365c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003660:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003664:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8003666:	8a3b      	ldrh	r3, [r7, #16]
 8003668:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 800366c:	b29b      	uxth	r3, r3
 800366e:	4619      	mov	r1, r3
 8003670:	2060      	movs	r0, #96	; 0x60
 8003672:	f7fd fb98 	bl	8000da6 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8003676:	7afb      	ldrb	r3, [r7, #11]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	b29b      	uxth	r3, r3
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8003682:	89fb      	ldrh	r3, [r7, #14]
 8003684:	4619      	mov	r1, r3
 8003686:	2001      	movs	r0, #1
 8003688:	f7fd fb8d 	bl	8000da6 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 800368c:	7afb      	ldrb	r3, [r7, #11]
 800368e:	109b      	asrs	r3, r3, #2
 8003690:	b29b      	uxth	r3, r3
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8003698:	7afb      	ldrb	r3, [r7, #11]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 80036a2:	8afb      	ldrh	r3, [r7, #22]
 80036a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a8:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 80036aa:	8afb      	ldrh	r3, [r7, #22]
 80036ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	4b27      	ldr	r3, [pc, #156]	; (8003750 <setRotation+0x4e0>)
 80036b4:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80036b6:	4b26      	ldr	r3, [pc, #152]	; (8003750 <setRotation+0x4e0>)
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	4619      	mov	r1, r3
 80036bc:	2003      	movs	r0, #3
 80036be:	f7fd fb72 	bl	8000da6 <WriteCmdData>
           break;
 80036c2:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <setRotation+0x504>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d023      	beq.n	8003718 <setRotation+0x4a8>
 80036d0:	4b29      	ldr	r3, [pc, #164]	; (8003778 <setRotation+0x508>)
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11d      	bne.n	8003718 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <setRotation+0x4e8>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	81bb      	strh	r3, [r7, #12]
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <setRotation+0x4ec>)
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <setRotation+0x4e8>)
 80036e8:	801a      	strh	r2, [r3, #0]
 80036ea:	4a1c      	ldr	r2, [pc, #112]	; (800375c <setRotation+0x4ec>)
 80036ec:	89bb      	ldrh	r3, [r7, #12]
 80036ee:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 80036f0:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <setRotation+0x4f4>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	81bb      	strh	r3, [r7, #12]
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <setRotation+0x4fc>)
 80036f8:	881a      	ldrh	r2, [r3, #0]
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <setRotation+0x4f4>)
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	4a1b      	ldr	r2, [pc, #108]	; (800376c <setRotation+0x4fc>)
 8003700:	89bb      	ldrh	r3, [r7, #12]
 8003702:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <setRotation+0x4f8>)
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	81bb      	strh	r3, [r7, #12]
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <setRotation+0x500>)
 800370c:	881a      	ldrh	r2, [r3, #0]
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <setRotation+0x4f8>)
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	4a17      	ldr	r2, [pc, #92]	; (8003770 <setRotation+0x500>)
 8003714:	89bb      	ldrh	r3, [r7, #12]
 8003716:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8003718:	f7fd fa7e 	bl	8000c18 <width>
 800371c:	4603      	mov	r3, r0
 800371e:	3b01      	subs	r3, #1
 8003720:	b29b      	uxth	r3, r3
 8003722:	b21c      	sxth	r4, r3
 8003724:	f7fd fa84 	bl	8000c30 <height>
 8003728:	4603      	mov	r3, r0
 800372a:	3b01      	subs	r3, #1
 800372c:	b29b      	uxth	r3, r3
 800372e:	b21b      	sxth	r3, r3
 8003730:	4622      	mov	r2, r4
 8003732:	2100      	movs	r1, #0
 8003734:	2000      	movs	r0, #0
 8003736:	f000 f927 	bl	8003988 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 800373a:	2200      	movs	r2, #0
 800373c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003740:	2000      	movs	r0, #0
 8003742:	f000 fa45 	bl	8003bd0 <vertScroll>
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bd90      	pop	{r4, r7, pc}
 800374e:	bf00      	nop
 8003750:	200000e6 	.word	0x200000e6
 8003754:	200000e0 	.word	0x200000e0
 8003758:	200000da 	.word	0x200000da
 800375c:	200000d8 	.word	0x200000d8
 8003760:	200000d0 	.word	0x200000d0
 8003764:	200000dc 	.word	0x200000dc
 8003768:	200000e4 	.word	0x200000e4
 800376c:	200000d4 	.word	0x200000d4
 8003770:	200000de 	.word	0x200000de
 8003774:	20000032 	.word	0x20000032
 8003778:	200000d2 	.word	0x200000d2

0800377c <drawPixel>:


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]
 8003786:	460b      	mov	r3, r1
 8003788:	80bb      	strh	r3, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 800378e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f2c0 80e7 	blt.w	8003966 <drawPixel+0x1ea>
 8003798:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f2c0 80e2 	blt.w	8003966 <drawPixel+0x1ea>
 80037a2:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80037a6:	f7fd fa37 	bl	8000c18 <width>
 80037aa:	4603      	mov	r3, r0
 80037ac:	429c      	cmp	r4, r3
 80037ae:	f280 80da 	bge.w	8003966 <drawPixel+0x1ea>
 80037b2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80037b6:	f7fd fa3b 	bl	8000c30 <height>
 80037ba:	4603      	mov	r3, r0
 80037bc:	429c      	cmp	r4, r3
 80037be:	f280 80d2 	bge.w	8003966 <drawPixel+0x1ea>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 80037c2:	4b6b      	ldr	r3, [pc, #428]	; (8003970 <drawPixel+0x1f4>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <drawPixel+0x5a>
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd fa3b 	bl	8000c48 <color565_to_555>
 80037d2:	4603      	mov	r3, r0
 80037d4:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 80037d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037de:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80037e2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80037e6:	f000 f8cf 	bl	8003988 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 80037ea:	4b62      	ldr	r3, [pc, #392]	; (8003974 <drawPixel+0x1f8>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80b1 	beq.w	8003956 <drawPixel+0x1da>
 80037f4:	2101      	movs	r1, #1
 80037f6:	4860      	ldr	r0, [pc, #384]	; (8003978 <drawPixel+0x1fc>)
 80037f8:	f7fd f9c0 	bl	8000b7c <PIN_LOW>
 80037fc:	2110      	movs	r1, #16
 80037fe:	485f      	ldr	r0, [pc, #380]	; (800397c <drawPixel+0x200>)
 8003800:	f7fd f9bc 	bl	8000b7c <PIN_LOW>
 8003804:	4b5e      	ldr	r3, [pc, #376]	; (8003980 <drawPixel+0x204>)
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	b29b      	uxth	r3, r3
 800380c:	73fb      	strb	r3, [r7, #15]
 800380e:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <drawPixel+0x204>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	73bb      	strb	r3, [r7, #14]
 8003814:	4b59      	ldr	r3, [pc, #356]	; (800397c <drawPixel+0x200>)
 8003816:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800381a:	619a      	str	r2, [r3, #24]
 800381c:	4b56      	ldr	r3, [pc, #344]	; (8003978 <drawPixel+0x1fc>)
 800381e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003822:	619a      	str	r2, [r3, #24]
 8003824:	4b57      	ldr	r3, [pc, #348]	; (8003984 <drawPixel+0x208>)
 8003826:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800382a:	619a      	str	r2, [r3, #24]
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	431a      	orrs	r2, r3
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	025b      	lsls	r3, r3, #9
 8003842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003846:	431a      	orrs	r2, r3
 8003848:	4b4c      	ldr	r3, [pc, #304]	; (800397c <drawPixel+0x200>)
 800384a:	619a      	str	r2, [r3, #24]
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	105b      	asrs	r3, r3, #1
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	431a      	orrs	r2, r3
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	431a      	orrs	r2, r3
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <drawPixel+0x1fc>)
 8003872:	619a      	str	r2, [r3, #24]
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	019b      	lsls	r3, r3, #6
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <drawPixel+0x208>)
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	6193      	str	r3, [r2, #24]
 8003880:	2102      	movs	r1, #2
 8003882:	483e      	ldr	r0, [pc, #248]	; (800397c <drawPixel+0x200>)
 8003884:	f7fd f97a 	bl	8000b7c <PIN_LOW>
 8003888:	2102      	movs	r1, #2
 800388a:	483c      	ldr	r0, [pc, #240]	; (800397c <drawPixel+0x200>)
 800388c:	f7fd f976 	bl	8000b7c <PIN_LOW>
 8003890:	2102      	movs	r1, #2
 8003892:	483a      	ldr	r0, [pc, #232]	; (800397c <drawPixel+0x200>)
 8003894:	f7fd f972 	bl	8000b7c <PIN_LOW>
 8003898:	2102      	movs	r1, #2
 800389a:	4838      	ldr	r0, [pc, #224]	; (800397c <drawPixel+0x200>)
 800389c:	f7fd f97e 	bl	8000b9c <PIN_HIGH>
 80038a0:	2102      	movs	r1, #2
 80038a2:	4836      	ldr	r0, [pc, #216]	; (800397c <drawPixel+0x200>)
 80038a4:	f7fd f97a 	bl	8000b9c <PIN_HIGH>
 80038a8:	4b34      	ldr	r3, [pc, #208]	; (800397c <drawPixel+0x200>)
 80038aa:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80038ae:	619a      	str	r2, [r3, #24]
 80038b0:	4b31      	ldr	r3, [pc, #196]	; (8003978 <drawPixel+0x1fc>)
 80038b2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80038b6:	619a      	str	r2, [r3, #24]
 80038b8:	4b32      	ldr	r3, [pc, #200]	; (8003984 <drawPixel+0x208>)
 80038ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038be:	619a      	str	r2, [r3, #24]
 80038c0:	7bbb      	ldrb	r3, [r7, #14]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d0:	431a      	orrs	r2, r3
 80038d2:	7bbb      	ldrb	r3, [r7, #14]
 80038d4:	025b      	lsls	r3, r3, #9
 80038d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038da:	431a      	orrs	r2, r3
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <drawPixel+0x200>)
 80038de:	619a      	str	r2, [r3, #24]
 80038e0:	7bbb      	ldrb	r3, [r7, #14]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80038e8:	7bbb      	ldrb	r3, [r7, #14]
 80038ea:	105b      	asrs	r3, r3, #1
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	431a      	orrs	r2, r3
 80038f2:	7bbb      	ldrb	r3, [r7, #14]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	431a      	orrs	r2, r3
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	431a      	orrs	r2, r3
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <drawPixel+0x1fc>)
 8003906:	619a      	str	r2, [r3, #24]
 8003908:	7bbb      	ldrb	r3, [r7, #14]
 800390a:	019b      	lsls	r3, r3, #6
 800390c:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <drawPixel+0x208>)
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	6193      	str	r3, [r2, #24]
 8003914:	2102      	movs	r1, #2
 8003916:	4819      	ldr	r0, [pc, #100]	; (800397c <drawPixel+0x200>)
 8003918:	f7fd f930 	bl	8000b7c <PIN_LOW>
 800391c:	2102      	movs	r1, #2
 800391e:	4817      	ldr	r0, [pc, #92]	; (800397c <drawPixel+0x200>)
 8003920:	f7fd f92c 	bl	8000b7c <PIN_LOW>
 8003924:	2102      	movs	r1, #2
 8003926:	4815      	ldr	r0, [pc, #84]	; (800397c <drawPixel+0x200>)
 8003928:	f7fd f928 	bl	8000b7c <PIN_LOW>
 800392c:	2102      	movs	r1, #2
 800392e:	4813      	ldr	r0, [pc, #76]	; (800397c <drawPixel+0x200>)
 8003930:	f7fd f934 	bl	8000b9c <PIN_HIGH>
 8003934:	2102      	movs	r1, #2
 8003936:	4811      	ldr	r0, [pc, #68]	; (800397c <drawPixel+0x200>)
 8003938:	f7fd f930 	bl	8000b9c <PIN_HIGH>
 800393c:	2110      	movs	r1, #16
 800393e:	480f      	ldr	r0, [pc, #60]	; (800397c <drawPixel+0x200>)
 8003940:	f7fd f92c 	bl	8000b9c <PIN_HIGH>
 8003944:	887b      	ldrh	r3, [r7, #2]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd faae 	bl	8000ea8 <write24>
 800394c:	2101      	movs	r1, #1
 800394e:	480a      	ldr	r0, [pc, #40]	; (8003978 <drawPixel+0x1fc>)
 8003950:	f7fd f924 	bl	8000b9c <PIN_HIGH>
 8003954:	e008      	b.n	8003968 <drawPixel+0x1ec>
   WriteCmdData(_MW, color);
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <drawPixel+0x204>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f7fd fa21 	bl	8000da6 <WriteCmdData>
 8003964:	e000      	b.n	8003968 <drawPixel+0x1ec>
       return;
 8003966:	bf00      	nop
}
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bd90      	pop	{r4, r7, pc}
 800396e:	bf00      	nop
 8003970:	20000030 	.word	0x20000030
 8003974:	20000031 	.word	0x20000031
 8003978:	40020400 	.word	0x40020400
 800397c:	40020000 	.word	0x40020000
 8003980:	200000d0 	.word	0x200000d0
 8003984:	40020800 	.word	0x40020800

08003988 <setAddrWindow>:


void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b087      	sub	sp, #28
 800398c:	af02      	add	r7, sp, #8
 800398e:	4604      	mov	r4, r0
 8003990:	4608      	mov	r0, r1
 8003992:	4611      	mov	r1, r2
 8003994:	461a      	mov	r2, r3
 8003996:	4623      	mov	r3, r4
 8003998:	80fb      	strh	r3, [r7, #6]
 800399a:	4603      	mov	r3, r0
 800399c:	80bb      	strh	r3, [r7, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	807b      	strh	r3, [r7, #2]
 80039a2:	4613      	mov	r3, r2
 80039a4:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80039a6:	4b80      	ldr	r3, [pc, #512]	; (8003ba8 <setAddrWindow+0x220>)
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	f249 3227 	movw	r2, #37671	; 0x9327
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d117      	bne.n	80039e2 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80039b2:	4b7e      	ldr	r3, [pc, #504]	; (8003bac <setAddrWindow+0x224>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d107      	bne.n	80039ca <setAddrWindow+0x42>
 80039ba:	88bb      	ldrh	r3, [r7, #4]
 80039bc:	3320      	adds	r3, #32
 80039be:	b29b      	uxth	r3, r3
 80039c0:	80bb      	strh	r3, [r7, #4]
 80039c2:	883b      	ldrh	r3, [r7, #0]
 80039c4:	3320      	adds	r3, #32
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 80039ca:	4b78      	ldr	r3, [pc, #480]	; (8003bac <setAddrWindow+0x224>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d107      	bne.n	80039e2 <setAddrWindow+0x5a>
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	3320      	adds	r3, #32
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	80fb      	strh	r3, [r7, #6]
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	3320      	adds	r3, #32
 80039de:	b29b      	uxth	r3, r3
 80039e0:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80039e2:	4b71      	ldr	r3, [pc, #452]	; (8003ba8 <setAddrWindow+0x220>)
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	f241 5226 	movw	r2, #5414	; 0x1526
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d128      	bne.n	8003a40 <setAddrWindow+0xb8>
 80039ee:	4b6f      	ldr	r3, [pc, #444]	; (8003bac <setAddrWindow+0x224>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d022      	beq.n	8003a40 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	81fb      	strh	r3, [r7, #14]
 8003a04:	883a      	ldrh	r2, [r7, #0]
 8003a06:	88bb      	ldrh	r3, [r7, #4]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8003a0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <setAddrWindow+0x9c>
 8003a16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	803b      	strh	r3, [r7, #0]
 8003a22:	e00d      	b.n	8003a40 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <setAddrWindow+0xb8>
 8003a2c:	887a      	ldrh	r2, [r7, #2]
 8003a2e:	89bb      	ldrh	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	807b      	strh	r3, [r7, #2]
 8003a36:	883a      	ldrh	r2, [r7, #0]
 8003a38:	89bb      	ldrh	r3, [r7, #12]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003a40:	4b5b      	ldr	r3, [pc, #364]	; (8003bb0 <setAddrWindow+0x228>)
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d054      	beq.n	8003af6 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003a4c:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <setAddrWindow+0x22c>)
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b2d8      	uxtb	r0, r3
 8003a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a56:	121b      	asrs	r3, r3, #8
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	b2d9      	uxtb	r1, r3
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a64:	121b      	asrs	r3, r3, #8
 8003a66:	b21b      	sxth	r3, r3
 8003a68:	b2dc      	uxtb	r4, r3
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4623      	mov	r3, r4
 8003a72:	f7fd fe3d 	bl	80016f0 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8003a76:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <setAddrWindow+0x230>)
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b2d8      	uxtb	r0, r3
 8003a7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a80:	121b      	asrs	r3, r3, #8
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	b2d9      	uxtb	r1, r3
 8003a86:	88bb      	ldrh	r3, [r7, #4]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003a8e:	121b      	asrs	r3, r3, #8
 8003a90:	b21b      	sxth	r3, r3
 8003a92:	b2dc      	uxtb	r4, r3
 8003a94:	883b      	ldrh	r3, [r7, #0]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	f7fd fe28 	bl	80016f0 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8003aa0:	4b46      	ldr	r3, [pc, #280]	; (8003bbc <setAddrWindow+0x234>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d07b      	beq.n	8003ba0 <setAddrWindow+0x218>
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <setAddrWindow+0x220>)
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	2b65      	cmp	r3, #101	; 0x65
 8003aae:	d177      	bne.n	8003ba0 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8003ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ab4:	121b      	asrs	r3, r3, #8
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	723b      	strb	r3, [r7, #8]
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8003ac2:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <setAddrWindow+0x238>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	f107 0208 	add.w	r2, r7, #8
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fc41 	bl	8001354 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8003ad2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ad6:	121b      	asrs	r3, r3, #8
 8003ad8:	b21b      	sxth	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	723b      	strb	r3, [r7, #8]
 8003ade:	88bb      	ldrh	r3, [r7, #4]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8003ae4:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <setAddrWindow+0x23c>)
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	f107 0208 	add.w	r2, r7, #8
 8003aec:	2102      	movs	r1, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fc30 	bl	8001354 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8003af4:	e054      	b.n	8003ba0 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8003af6:	4b32      	ldr	r3, [pc, #200]	; (8003bc0 <setAddrWindow+0x238>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd f951 	bl	8000da6 <WriteCmdData>
       WriteCmdData(_MP, y);
 8003b04:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <setAddrWindow+0x23c>)
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	88ba      	ldrh	r2, [r7, #4]
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd f94a 	bl	8000da6 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8003b12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d105      	bne.n	8003b2a <setAddrWindow+0x1a2>
 8003b1e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d03a      	beq.n	8003ba0 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8003b2a:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <setAddrWindow+0x228>)
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d018      	beq.n	8003b68 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <setAddrWindow+0x224>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8003b42:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	b21a      	sxth	r2, r3
 8003b4a:	88bb      	ldrh	r3, [r7, #4]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	80bb      	strh	r3, [r7, #4]
 8003b50:	88bb      	ldrh	r3, [r7, #4]
 8003b52:	803b      	strh	r3, [r7, #0]
 8003b54:	e008      	b.n	8003b68 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8003b56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	b21a      	sxth	r2, r3
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	80fb      	strh	r3, [r7, #6]
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8003b68:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <setAddrWindow+0x22c>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd f918 	bl	8000da6 <WriteCmdData>
           WriteCmdData(_SP, y);
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <setAddrWindow+0x230>)
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	88ba      	ldrh	r2, [r7, #4]
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd f911 	bl	8000da6 <WriteCmdData>
           WriteCmdData(_EC, x1);
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <setAddrWindow+0x240>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	887a      	ldrh	r2, [r7, #2]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd f90a 	bl	8000da6 <WriteCmdData>
           WriteCmdData(_EP, y1);
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <setAddrWindow+0x244>)
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	883a      	ldrh	r2, [r7, #0]
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd f903 	bl	8000da6 <WriteCmdData>
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd90      	pop	{r4, r7, pc}
 8003ba8:	200000e0 	.word	0x200000e0
 8003bac:	20000032 	.word	0x20000032
 8003bb0:	200000d2 	.word	0x200000d2
 8003bb4:	200000dc 	.word	0x200000dc
 8003bb8:	200000d4 	.word	0x200000d4
 8003bbc:	2000002f 	.word	0x2000002f
 8003bc0:	200000da 	.word	0x200000da
 8003bc4:	200000d8 	.word	0x200000d8
 8003bc8:	200000e4 	.word	0x200000e4
 8003bcc:	200000de 	.word	0x200000de

08003bd0 <vertScroll>:


void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	80bb      	strh	r3, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003be2:	4b89      	ldr	r3, [pc, #548]	; (8003e08 <vertScroll+0x238>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	f249 3227 	movw	r2, #37671	; 0x9327
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10b      	bne.n	8003c06 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8003bee:	4b87      	ldr	r3, [pc, #540]	; (8003e0c <vertScroll+0x23c>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d003      	beq.n	8003bfe <vertScroll+0x2e>
 8003bf6:	4b85      	ldr	r3, [pc, #532]	; (8003e0c <vertScroll+0x23c>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d103      	bne.n	8003c06 <vertScroll+0x36>
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	3320      	adds	r3, #32
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	88bb      	ldrh	r3, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003c1a:	4b7b      	ldr	r3, [pc, #492]	; (8003e08 <vertScroll+0x238>)
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	f249 3227 	movw	r2, #37671	; 0x9327
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d103      	bne.n	8003c2e <vertScroll+0x5e>
 8003c26:	8afb      	ldrh	r3, [r7, #22]
 8003c28:	3320      	adds	r3, #32
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8003c2e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c36:	425b      	negs	r3, r3
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	dd05      	ble.n	8003c48 <vertScroll+0x78>
 8003c3c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	db01      	blt.n	8003c4c <vertScroll+0x7c>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	4413      	add	r3, r2
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8003c56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	da04      	bge.n	8003c68 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8003c5e:	8aba      	ldrh	r2, [r7, #20]
 8003c60:	88bb      	ldrh	r3, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	88bb      	ldrh	r3, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003c76:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <vertScroll+0x240>)
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d071      	beq.n	8003d66 <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8003c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c86:	121b      	asrs	r3, r3, #8
 8003c88:	b21b      	sxth	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8003c94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c98:	121b      	asrs	r3, r3, #8
 8003c9a:	b21b      	sxth	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8003ca0:	88bb      	ldrh	r3, [r7, #4]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8003ca6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003caa:	121b      	asrs	r3, r3, #8
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8003cb2:	8afb      	ldrh	r3, [r7, #22]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8003cb8:	4b56      	ldr	r3, [pc, #344]	; (8003e14 <vertScroll+0x244>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <vertScroll+0xf4>
 8003cc0:	230e      	movs	r3, #14
 8003cc2:	e000      	b.n	8003cc6 <vertScroll+0xf6>
 8003cc4:	2333      	movs	r3, #51	; 0x33
 8003cc6:	f107 020c 	add.w	r2, r7, #12
 8003cca:	2106      	movs	r1, #6
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fd fb41 	bl	8001354 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8003cd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cd6:	121b      	asrs	r3, r3, #8
 8003cd8:	b21b      	sxth	r3, r3
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8003cde:	8abb      	ldrh	r3, [r7, #20]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8003ce4:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <vertScroll+0x244>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <vertScroll+0x120>
 8003cec:	2314      	movs	r3, #20
 8003cee:	e000      	b.n	8003cf2 <vertScroll+0x122>
 8003cf0:	2337      	movs	r3, #55	; 0x37
 8003cf2:	f107 020c 	add.w	r2, r7, #12
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fd fb2b 	bl	8001354 <WriteCmdParamN>
		if (is8347) {
 8003cfe:	4b45      	ldr	r3, [pc, #276]	; (8003e14 <vertScroll+0x244>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01f      	beq.n	8003d46 <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8003d06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <vertScroll+0x152>
 8003d0e:	4b3e      	ldr	r3, [pc, #248]	; (8003e08 <vertScroll+0x238>)
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	f248 3247 	movw	r2, #33607	; 0x8347
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <vertScroll+0x14e>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e002      	b.n	8003d24 <vertScroll+0x154>
 8003d1e:	2308      	movs	r3, #8
 8003d20:	e000      	b.n	8003d24 <vertScroll+0x154>
 8003d22:	2300      	movs	r3, #0
 8003d24:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8003d26:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <vertScroll+0x238>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	f248 3247 	movw	r2, #33607	; 0x8347
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <vertScroll+0x166>
 8003d32:	2318      	movs	r3, #24
 8003d34:	e000      	b.n	8003d38 <vertScroll+0x168>
 8003d36:	2301      	movs	r3, #1
 8003d38:	f107 020c 	add.w	r2, r7, #12
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd fb08 	bl	8001354 <WriteCmdParamN>
 8003d44:	e05d      	b.n	8003e02 <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8003d46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d159      	bne.n	8003e02 <vertScroll+0x232>
 8003d4e:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <vertScroll+0x240>)
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d053      	beq.n	8003e02 <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	2013      	movs	r0, #19
 8003d60:	f7fd faf8 	bl	8001354 <WriteCmdParamN>
 8003d64:	e04d      	b.n	8003e02 <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003d66:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <vertScroll+0x238>)
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d027      	beq.n	8003dc2 <vertScroll+0x1f2>
 8003d72:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003d76:	4293      	cmp	r3, r2
 8003d78:	dc34      	bgt.n	8003de4 <vertScroll+0x214>
 8003d7a:	f249 3226 	movw	r2, #37670	; 0x9326
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01f      	beq.n	8003dc2 <vertScroll+0x1f2>
 8003d82:	f249 3226 	movw	r2, #37670	; 0x9326
 8003d86:	4293      	cmp	r3, r2
 8003d88:	dc2c      	bgt.n	8003de4 <vertScroll+0x214>
 8003d8a:	f247 7293 	movw	r2, #30611	; 0x7793
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d017      	beq.n	8003dc2 <vertScroll+0x1f2>
 8003d92:	f247 7293 	movw	r2, #30611	; 0x7793
 8003d96:	4293      	cmp	r3, r2
 8003d98:	dc24      	bgt.n	8003de4 <vertScroll+0x214>
 8003d9a:	f245 4220 	movw	r2, #21536	; 0x5420
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00f      	beq.n	8003dc2 <vertScroll+0x1f2>
 8003da2:	f247 7283 	movw	r2, #30595	; 0x7783
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d11c      	bne.n	8003de4 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <vertScroll+0x248>)
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	4619      	mov	r1, r3
 8003db0:	2061      	movs	r0, #97	; 0x61
 8003db2:	f7fc fff8 	bl	8000da6 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003db6:	8abb      	ldrh	r3, [r7, #20]
 8003db8:	4619      	mov	r1, r3
 8003dba:	206a      	movs	r0, #106	; 0x6a
 8003dbc:	f7fc fff3 	bl	8000da6 <WriteCmdData>
        break;
 8003dc0:	e01f      	b.n	8003e02 <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <vertScroll+0x248>)
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	f043 0302 	orr.w	r3, r3, #2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f240 4001 	movw	r0, #1025	; 0x401
 8003dd2:	f7fc ffe8 	bl	8000da6 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8003dd6:	8abb      	ldrh	r3, [r7, #20]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f240 4004 	movw	r0, #1028	; 0x404
 8003dde:	f7fc ffe2 	bl	8000da6 <WriteCmdData>
        break;
 8003de2:	e00e      	b.n	8003e02 <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <vertScroll+0x248>)
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	4619      	mov	r1, r3
 8003df0:	2061      	movs	r0, #97	; 0x61
 8003df2:	f7fc ffd8 	bl	8000da6 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003df6:	8abb      	ldrh	r3, [r7, #20]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	206a      	movs	r0, #106	; 0x6a
 8003dfc:	f7fc ffd3 	bl	8000da6 <WriteCmdData>
        break;
 8003e00:	bf00      	nop
    }
}
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	200000e0 	.word	0x200000e0
 8003e0c:	20000032 	.word	0x20000032
 8003e10:	200000d2 	.word	0x200000d2
 8003e14:	2000002f 	.word	0x2000002f
 8003e18:	200000d6 	.word	0x200000d6

08003e1c <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	4603      	mov	r3, r0
 8003e24:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <fillScreen+0x2c>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b21a      	sxth	r2, r3
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <fillScreen+0x30>)
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	b219      	sxth	r1, r3
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	460b      	mov	r3, r1
 8003e38:	2100      	movs	r1, #0
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f000 f9cc 	bl	80041d8 <fillRect>
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000004 	.word	0x20000004
 8003e4c:	20000006 	.word	0x20000006

08003e50 <invertDisplay>:


void invertDisplay(uint8_t i)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8003e5a:	4b4c      	ldr	r3, [pc, #304]	; (8003f8c <invertDisplay+0x13c>)
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	b21a      	sxth	r2, r3
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	4053      	eors	r3, r2
 8003e74:	b21b      	sxth	r3, r3
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <invertDisplay+0x140>)
 8003e7a:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003e7c:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <invertDisplay+0x13c>)
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d035      	beq.n	8003ef4 <invertDisplay+0xa4>
        if (is8347) {
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <invertDisplay+0x144>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d024      	beq.n	8003eda <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8003e90:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <invertDisplay+0x148>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	f248 3247 	movw	r2, #33607	; 0x8347
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d005      	beq.n	8003ea8 <invertDisplay+0x58>
 8003e9c:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <invertDisplay+0x148>)
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	f245 2252 	movw	r2, #21074	; 0x5252
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d108      	bne.n	8003eba <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <invertDisplay+0x140>)
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <invertDisplay+0x64>
 8003eb0:	2306      	movs	r3, #6
 8003eb2:	e000      	b.n	8003eb6 <invertDisplay+0x66>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	e007      	b.n	8003eca <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8003eba:	4b35      	ldr	r3, [pc, #212]	; (8003f90 <invertDisplay+0x140>)
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <invertDisplay+0x76>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	e000      	b.n	8003ec8 <invertDisplay+0x78>
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8003eca:	f107 030f 	add.w	r3, r7, #15
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	f7fd fa3e 	bl	8001354 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8003ed8:	e055      	b.n	8003f86 <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8003eda:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <invertDisplay+0x140>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <invertDisplay+0x96>
 8003ee2:	2321      	movs	r3, #33	; 0x21
 8003ee4:	e000      	b.n	8003ee8 <invertDisplay+0x98>
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd fa31 	bl	8001354 <WriteCmdParamN>
 8003ef2:	e048      	b.n	8003f86 <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003ef4:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <invertDisplay+0x148>)
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d030      	beq.n	8003f62 <invertDisplay+0x112>
 8003f00:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003f04:	4293      	cmp	r3, r2
 8003f06:	dc37      	bgt.n	8003f78 <invertDisplay+0x128>
 8003f08:	f249 3226 	movw	r2, #37670	; 0x9326
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d028      	beq.n	8003f62 <invertDisplay+0x112>
 8003f10:	f249 3226 	movw	r2, #37670	; 0x9326
 8003f14:	4293      	cmp	r3, r2
 8003f16:	dc2f      	bgt.n	8003f78 <invertDisplay+0x128>
 8003f18:	f249 2225 	movw	r2, #37413	; 0x9225
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <invertDisplay+0xf8>
 8003f20:	f249 2225 	movw	r2, #37413	; 0x9225
 8003f24:	4293      	cmp	r3, r2
 8003f26:	dc27      	bgt.n	8003f78 <invertDisplay+0x128>
 8003f28:	f247 7293 	movw	r2, #30611	; 0x7793
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d018      	beq.n	8003f62 <invertDisplay+0x112>
 8003f30:	f247 7293 	movw	r2, #30611	; 0x7793
 8003f34:	4293      	cmp	r3, r2
 8003f36:	dc1f      	bgt.n	8003f78 <invertDisplay+0x128>
 8003f38:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003f3c:	d004      	beq.n	8003f48 <invertDisplay+0xf8>
 8003f3e:	f245 4220 	movw	r2, #21536	; 0x5420
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00d      	beq.n	8003f62 <invertDisplay+0x112>
 8003f46:	e017      	b.n	8003f78 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <invertDisplay+0x140>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	b21b      	sxth	r3, r3
 8003f50:	f043 0313 	orr.w	r3, r3, #19
 8003f54:	b21b      	sxth	r3, r3
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	4619      	mov	r1, r3
 8003f5a:	2007      	movs	r0, #7
 8003f5c:	f7fc ff23 	bl	8000da6 <WriteCmdData>
        break;
 8003f60:	e011      	b.n	8003f86 <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <invertDisplay+0x140>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	f043 0302 	orr.w	r3, r3, #2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f240 4001 	movw	r0, #1025	; 0x401
 8003f72:	f7fc ff18 	bl	8000da6 <WriteCmdData>
        break;
 8003f76:	e006      	b.n	8003f86 <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <invertDisplay+0x140>)
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	2061      	movs	r0, #97	; 0x61
 8003f80:	f7fc ff11 	bl	8000da6 <WriteCmdData>
        break;
 8003f84:	bf00      	nop
    }
}
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200000d2 	.word	0x200000d2
 8003f90:	200000d6 	.word	0x200000d6
 8003f94:	2000002f 	.word	0x2000002f
 8003f98:	200000e0 	.word	0x200000e0

08003f9c <drawFastVLine>:


void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	80fb      	strh	r3, [r7, #6]
 8003fae:	4603      	mov	r3, r0
 8003fb0:	80bb      	strh	r3, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	807b      	strh	r3, [r7, #2]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 8003fba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003fbe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003fc2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003fc6:	883b      	ldrh	r3, [r7, #0]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f000 f903 	bl	80041d8 <fillRect>
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd90      	pop	{r4, r7, pc}

08003fda <fillCircle>:
    }
}


void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8003fda:	b590      	push	{r4, r7, lr}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af02      	add	r7, sp, #8
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	4608      	mov	r0, r1
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4623      	mov	r3, r4
 8003fea:	80fb      	strh	r3, [r7, #6]
 8003fec:	4603      	mov	r3, r0
 8003fee:	80bb      	strh	r3, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8003ff8:	88ba      	ldrh	r2, [r7, #4]
 8003ffa:	887b      	ldrh	r3, [r7, #2]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	b219      	sxth	r1, r3
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	b29b      	uxth	r3, r3
 8004008:	3301      	adds	r3, #1
 800400a:	b29b      	uxth	r3, r3
 800400c:	b21a      	sxth	r2, r3
 800400e:	883b      	ldrh	r3, [r7, #0]
 8004010:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004014:	f7ff ffc2 	bl	8003f9c <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8004018:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800401c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004020:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004024:	883b      	ldrh	r3, [r7, #0]
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2303      	movs	r3, #3
 800402e:	f000 f804 	bl	800403a <fillCircleHelper>
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bd90      	pop	{r4, r7, pc}

0800403a <fillCircleHelper>:


void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800403a:	b590      	push	{r4, r7, lr}
 800403c:	b087      	sub	sp, #28
 800403e:	af00      	add	r7, sp, #0
 8004040:	4604      	mov	r4, r0
 8004042:	4608      	mov	r0, r1
 8004044:	4611      	mov	r1, r2
 8004046:	461a      	mov	r2, r3
 8004048:	4623      	mov	r3, r4
 800404a:	80fb      	strh	r3, [r7, #6]
 800404c:	4603      	mov	r3, r0
 800404e:	80bb      	strh	r3, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	f1c3 0301 	rsb	r3, r3, #1
 800405e:	b29b      	uxth	r3, r3
 8004060:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	461a      	mov	r2, r3
 800406a:	03d2      	lsls	r2, r2, #15
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	b29b      	uxth	r3, r3
 8004072:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8004078:	887b      	ldrh	r3, [r7, #2]
 800407a:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 800407c:	8a3b      	ldrh	r3, [r7, #16]
 800407e:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8004084:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004088:	b29b      	uxth	r3, r3
 800408a:	3301      	adds	r3, #1
 800408c:	b29b      	uxth	r3, r3
 800408e:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8004090:	e095      	b.n	80041be <fillCircleHelper+0x184>
        if (f >= 0) {
 8004092:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004096:	2b00      	cmp	r3, #0
 8004098:	db0e      	blt.n	80040b8 <fillCircleHelper+0x7e>
            y--;
 800409a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80040a6:	8a7b      	ldrh	r3, [r7, #18]
 80040a8:	3302      	adds	r3, #2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80040ae:	8afa      	ldrh	r2, [r7, #22]
 80040b0:	8a7b      	ldrh	r3, [r7, #18]
 80040b2:	4413      	add	r3, r2
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80040b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3301      	adds	r3, #1
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80040c4:	8abb      	ldrh	r3, [r7, #20]
 80040c6:	3302      	adds	r3, #2
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80040cc:	8afa      	ldrh	r2, [r7, #22]
 80040ce:	8abb      	ldrh	r3, [r7, #20]
 80040d0:	4413      	add	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 80040d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80040da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040de:	429a      	cmp	r2, r3
 80040e0:	db31      	blt.n	8004146 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80040e2:	787b      	ldrb	r3, [r7, #1]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <fillCircleHelper+0xda>
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	8a3b      	ldrh	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	b218      	sxth	r0, r3
 80040f6:	88ba      	ldrh	r2, [r7, #4]
 80040f8:	89fb      	ldrh	r3, [r7, #14]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	b219      	sxth	r1, r3
 8004100:	89fb      	ldrh	r3, [r7, #14]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004108:	4413      	add	r3, r2
 800410a:	b29b      	uxth	r3, r3
 800410c:	b21a      	sxth	r2, r3
 800410e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004110:	f7ff ff44 	bl	8003f9c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8004114:	787b      	ldrb	r3, [r7, #1]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d013      	beq.n	8004146 <fillCircleHelper+0x10c>
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	8a3b      	ldrh	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	b29b      	uxth	r3, r3
 8004126:	b218      	sxth	r0, r3
 8004128:	88ba      	ldrh	r2, [r7, #4]
 800412a:	89fb      	ldrh	r3, [r7, #14]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	b219      	sxth	r1, r3
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800413a:	4413      	add	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	b21a      	sxth	r2, r3
 8004140:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004142:	f7ff ff2b 	bl	8003f9c <drawFastVLine>
        }
        if(y != py) {
 8004146:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800414a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800414e:	429a      	cmp	r2, r3
 8004150:	d033      	beq.n	80041ba <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8004152:	787b      	ldrb	r3, [r7, #1]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <fillCircleHelper+0x14a>
 800415c:	88fa      	ldrh	r2, [r7, #6]
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	4413      	add	r3, r2
 8004162:	b29b      	uxth	r3, r3
 8004164:	b218      	sxth	r0, r3
 8004166:	88ba      	ldrh	r2, [r7, #4]
 8004168:	89bb      	ldrh	r3, [r7, #12]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	b29b      	uxth	r3, r3
 800416e:	b219      	sxth	r1, r3
 8004170:	89bb      	ldrh	r3, [r7, #12]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004178:	4413      	add	r3, r2
 800417a:	b29b      	uxth	r3, r3
 800417c:	b21a      	sxth	r2, r3
 800417e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004180:	f7ff ff0c 	bl	8003f9c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8004184:	787b      	ldrb	r3, [r7, #1]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d013      	beq.n	80041b6 <fillCircleHelper+0x17c>
 800418e:	88fa      	ldrh	r2, [r7, #6]
 8004190:	897b      	ldrh	r3, [r7, #10]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	b29b      	uxth	r3, r3
 8004196:	b218      	sxth	r0, r3
 8004198:	88ba      	ldrh	r2, [r7, #4]
 800419a:	89bb      	ldrh	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	b29b      	uxth	r3, r3
 80041a0:	b219      	sxth	r1, r3
 80041a2:	89bb      	ldrh	r3, [r7, #12]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041aa:	4413      	add	r3, r2
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b21a      	sxth	r2, r3
 80041b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80041b2:	f7ff fef3 	bl	8003f9c <drawFastVLine>
            py = y;
 80041b6:	89fb      	ldrh	r3, [r7, #14]
 80041b8:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 80041ba:	8a3b      	ldrh	r3, [r7, #16]
 80041bc:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 80041be:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80041c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	f6ff af63 	blt.w	8004092 <fillCircleHelper+0x58>
    }
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}
	...

080041d8 <fillRect>:
    drawFastVLine(x+w-1, y, h, color);
}


void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	461a      	mov	r2, r3
 80041e6:	4623      	mov	r3, r4
 80041e8:	80fb      	strh	r3, [r7, #6]
 80041ea:	4603      	mov	r3, r0
 80041ec:	80bb      	strh	r3, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	807b      	strh	r3, [r7, #2]
 80041f2:	4613      	mov	r3, r2
 80041f4:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 80041f6:	4b95      	ldr	r3, [pc, #596]	; (800444c <fillRect+0x274>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <fillRect+0x32>
 80041fe:	8c3b      	ldrh	r3, [r7, #32]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc fd21 	bl	8000c48 <color565_to_555>
 8004206:	4603      	mov	r3, r0
 8004208:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 800420a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800420e:	2b00      	cmp	r3, #0
 8004210:	da08      	bge.n	8004224 <fillRect+0x4c>
        w = -w;
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	425b      	negs	r3, r3
 8004216:	b29b      	uxth	r3, r3
 8004218:	807b      	strh	r3, [r7, #2]
        x -= w;
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	887b      	ldrh	r3, [r7, #2]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	b29b      	uxth	r3, r3
 8004222:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	887b      	ldrh	r3, [r7, #2]
 8004228:	4413      	add	r3, r2
 800422a:	b29b      	uxth	r3, r3
 800422c:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 800422e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004232:	2b00      	cmp	r3, #0
 8004234:	da01      	bge.n	800423a <fillRect+0x62>
        x = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 800423a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800423e:	f7fc fceb 	bl	8000c18 <width>
 8004242:	4603      	mov	r3, r0
 8004244:	429c      	cmp	r4, r3
 8004246:	dd03      	ble.n	8004250 <fillRect+0x78>
        end = width();
 8004248:	f7fc fce6 	bl	8000c18 <width>
 800424c:	4603      	mov	r3, r0
 800424e:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8004250:	89fa      	ldrh	r2, [r7, #14]
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 800425a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	da08      	bge.n	8004274 <fillRect+0x9c>
        h = -h;
 8004262:	883b      	ldrh	r3, [r7, #0]
 8004264:	425b      	negs	r3, r3
 8004266:	b29b      	uxth	r3, r3
 8004268:	803b      	strh	r3, [r7, #0]
        y -= h;
 800426a:	88ba      	ldrh	r2, [r7, #4]
 800426c:	883b      	ldrh	r3, [r7, #0]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	b29b      	uxth	r3, r3
 8004272:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8004274:	88ba      	ldrh	r2, [r7, #4]
 8004276:	883b      	ldrh	r3, [r7, #0]
 8004278:	4413      	add	r3, r2
 800427a:	b29b      	uxth	r3, r3
 800427c:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 800427e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	da01      	bge.n	800428a <fillRect+0xb2>
        y = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 800428a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800428e:	f7fc fccf 	bl	8000c30 <height>
 8004292:	4603      	mov	r3, r0
 8004294:	429c      	cmp	r4, r3
 8004296:	dd03      	ble.n	80042a0 <fillRect+0xc8>
        end = height();
 8004298:	f7fc fcca 	bl	8000c30 <height>
 800429c:	4603      	mov	r3, r0
 800429e:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 80042a0:	89fa      	ldrh	r2, [r7, #14]
 80042a2:	88bb      	ldrh	r3, [r7, #4]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	4413      	add	r3, r2
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	b21c      	sxth	r4, r3
 80042b8:	88ba      	ldrh	r2, [r7, #4]
 80042ba:	883b      	ldrh	r3, [r7, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	b21b      	sxth	r3, r3
 80042c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80042ca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80042ce:	4622      	mov	r2, r4
 80042d0:	f7ff fb5a 	bl	8003988 <setAddrWindow>
    CS_ACTIVE;
 80042d4:	2101      	movs	r1, #1
 80042d6:	485e      	ldr	r0, [pc, #376]	; (8004450 <fillRect+0x278>)
 80042d8:	f7fc fc50 	bl	8000b7c <PIN_LOW>
    WriteCmd(_MW);
 80042dc:	2110      	movs	r1, #16
 80042de:	485d      	ldr	r0, [pc, #372]	; (8004454 <fillRect+0x27c>)
 80042e0:	f7fc fc4c 	bl	8000b7c <PIN_LOW>
 80042e4:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <fillRect+0x280>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	737b      	strb	r3, [r7, #13]
 80042ee:	4b5a      	ldr	r3, [pc, #360]	; (8004458 <fillRect+0x280>)
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	733b      	strb	r3, [r7, #12]
 80042f4:	4b57      	ldr	r3, [pc, #348]	; (8004454 <fillRect+0x27c>)
 80042f6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80042fa:	619a      	str	r2, [r3, #24]
 80042fc:	4b54      	ldr	r3, [pc, #336]	; (8004450 <fillRect+0x278>)
 80042fe:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004302:	619a      	str	r2, [r3, #24]
 8004304:	4b55      	ldr	r3, [pc, #340]	; (800445c <fillRect+0x284>)
 8004306:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800430a:	619a      	str	r2, [r3, #24]
 800430c:	7b7b      	ldrb	r3, [r7, #13]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004314:	7b7b      	ldrb	r3, [r7, #13]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	431a      	orrs	r2, r3
 800431e:	7b7b      	ldrb	r3, [r7, #13]
 8004320:	025b      	lsls	r3, r3, #9
 8004322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004326:	431a      	orrs	r2, r3
 8004328:	4b4a      	ldr	r3, [pc, #296]	; (8004454 <fillRect+0x27c>)
 800432a:	619a      	str	r2, [r3, #24]
 800432c:	7b7b      	ldrb	r3, [r7, #13]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004334:	7b7b      	ldrb	r3, [r7, #13]
 8004336:	105b      	asrs	r3, r3, #1
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	431a      	orrs	r2, r3
 800433e:	7b7b      	ldrb	r3, [r7, #13]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	431a      	orrs	r2, r3
 8004348:	7b7b      	ldrb	r3, [r7, #13]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	431a      	orrs	r2, r3
 8004350:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <fillRect+0x278>)
 8004352:	619a      	str	r2, [r3, #24]
 8004354:	7b7b      	ldrb	r3, [r7, #13]
 8004356:	019b      	lsls	r3, r3, #6
 8004358:	4a40      	ldr	r2, [pc, #256]	; (800445c <fillRect+0x284>)
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	6193      	str	r3, [r2, #24]
 8004360:	2102      	movs	r1, #2
 8004362:	483c      	ldr	r0, [pc, #240]	; (8004454 <fillRect+0x27c>)
 8004364:	f7fc fc0a 	bl	8000b7c <PIN_LOW>
 8004368:	2102      	movs	r1, #2
 800436a:	483a      	ldr	r0, [pc, #232]	; (8004454 <fillRect+0x27c>)
 800436c:	f7fc fc06 	bl	8000b7c <PIN_LOW>
 8004370:	2102      	movs	r1, #2
 8004372:	4838      	ldr	r0, [pc, #224]	; (8004454 <fillRect+0x27c>)
 8004374:	f7fc fc02 	bl	8000b7c <PIN_LOW>
 8004378:	2102      	movs	r1, #2
 800437a:	4836      	ldr	r0, [pc, #216]	; (8004454 <fillRect+0x27c>)
 800437c:	f7fc fc0e 	bl	8000b9c <PIN_HIGH>
 8004380:	2102      	movs	r1, #2
 8004382:	4834      	ldr	r0, [pc, #208]	; (8004454 <fillRect+0x27c>)
 8004384:	f7fc fc0a 	bl	8000b9c <PIN_HIGH>
 8004388:	4b32      	ldr	r3, [pc, #200]	; (8004454 <fillRect+0x27c>)
 800438a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800438e:	619a      	str	r2, [r3, #24]
 8004390:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <fillRect+0x278>)
 8004392:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004396:	619a      	str	r2, [r3, #24]
 8004398:	4b30      	ldr	r3, [pc, #192]	; (800445c <fillRect+0x284>)
 800439a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800439e:	619a      	str	r2, [r3, #24]
 80043a0:	7b3b      	ldrb	r3, [r7, #12]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80043a8:	7b3b      	ldrb	r3, [r7, #12]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	431a      	orrs	r2, r3
 80043b2:	7b3b      	ldrb	r3, [r7, #12]
 80043b4:	025b      	lsls	r3, r3, #9
 80043b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ba:	431a      	orrs	r2, r3
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <fillRect+0x27c>)
 80043be:	619a      	str	r2, [r3, #24]
 80043c0:	7b3b      	ldrb	r3, [r7, #12]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80043c8:	7b3b      	ldrb	r3, [r7, #12]
 80043ca:	105b      	asrs	r3, r3, #1
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	431a      	orrs	r2, r3
 80043d2:	7b3b      	ldrb	r3, [r7, #12]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	431a      	orrs	r2, r3
 80043dc:	7b3b      	ldrb	r3, [r7, #12]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	431a      	orrs	r2, r3
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <fillRect+0x278>)
 80043e6:	619a      	str	r2, [r3, #24]
 80043e8:	7b3b      	ldrb	r3, [r7, #12]
 80043ea:	019b      	lsls	r3, r3, #6
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <fillRect+0x284>)
 80043ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f2:	6193      	str	r3, [r2, #24]
 80043f4:	2102      	movs	r1, #2
 80043f6:	4817      	ldr	r0, [pc, #92]	; (8004454 <fillRect+0x27c>)
 80043f8:	f7fc fbc0 	bl	8000b7c <PIN_LOW>
 80043fc:	2102      	movs	r1, #2
 80043fe:	4815      	ldr	r0, [pc, #84]	; (8004454 <fillRect+0x27c>)
 8004400:	f7fc fbbc 	bl	8000b7c <PIN_LOW>
 8004404:	2102      	movs	r1, #2
 8004406:	4813      	ldr	r0, [pc, #76]	; (8004454 <fillRect+0x27c>)
 8004408:	f7fc fbb8 	bl	8000b7c <PIN_LOW>
 800440c:	2102      	movs	r1, #2
 800440e:	4811      	ldr	r0, [pc, #68]	; (8004454 <fillRect+0x27c>)
 8004410:	f7fc fbc4 	bl	8000b9c <PIN_HIGH>
 8004414:	2102      	movs	r1, #2
 8004416:	480f      	ldr	r0, [pc, #60]	; (8004454 <fillRect+0x27c>)
 8004418:	f7fc fbc0 	bl	8000b9c <PIN_HIGH>
 800441c:	2110      	movs	r1, #16
 800441e:	480d      	ldr	r0, [pc, #52]	; (8004454 <fillRect+0x27c>)
 8004420:	f7fc fbbc 	bl	8000b9c <PIN_HIGH>
    if (h > w) {
 8004424:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004428:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800442c:	429a      	cmp	r2, r3
 800442e:	dd05      	ble.n	800443c <fillRect+0x264>
        end = h;
 8004430:	883b      	ldrh	r3, [r7, #0]
 8004432:	81fb      	strh	r3, [r7, #14]
        h = w;
 8004434:	887b      	ldrh	r3, [r7, #2]
 8004436:	803b      	strh	r3, [r7, #0]
        w = end;
 8004438:	89fb      	ldrh	r3, [r7, #14]
 800443a:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 800443c:	8c3b      	ldrh	r3, [r7, #32]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	b29b      	uxth	r3, r3
 8004442:	72fb      	strb	r3, [r7, #11]
 8004444:	8c3b      	ldrh	r3, [r7, #32]
 8004446:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8004448:	e0a9      	b.n	800459e <fillRect+0x3c6>
 800444a:	bf00      	nop
 800444c:	20000030 	.word	0x20000030
 8004450:	40020400 	.word	0x40020400
 8004454:	40020000 	.word	0x40020000
 8004458:	200000d0 	.word	0x200000d0
 800445c:	40020800 	.word	0x40020800
        end = w;
 8004460:	887b      	ldrh	r3, [r7, #2]
 8004462:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8004464:	4b68      	ldr	r3, [pc, #416]	; (8004608 <fillRect+0x430>)
 8004466:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800446a:	619a      	str	r2, [r3, #24]
 800446c:	4b67      	ldr	r3, [pc, #412]	; (800460c <fillRect+0x434>)
 800446e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004472:	619a      	str	r2, [r3, #24]
 8004474:	4b66      	ldr	r3, [pc, #408]	; (8004610 <fillRect+0x438>)
 8004476:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800447a:	619a      	str	r2, [r3, #24]
 800447c:	7afb      	ldrb	r3, [r7, #11]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004484:	7afb      	ldrb	r3, [r7, #11]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448c:	431a      	orrs	r2, r3
 800448e:	7afb      	ldrb	r3, [r7, #11]
 8004490:	025b      	lsls	r3, r3, #9
 8004492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004496:	431a      	orrs	r2, r3
 8004498:	4b5b      	ldr	r3, [pc, #364]	; (8004608 <fillRect+0x430>)
 800449a:	619a      	str	r2, [r3, #24]
 800449c:	7afb      	ldrb	r3, [r7, #11]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	105b      	asrs	r3, r3, #1
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	431a      	orrs	r2, r3
 80044ae:	7afb      	ldrb	r3, [r7, #11]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	431a      	orrs	r2, r3
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	431a      	orrs	r2, r3
 80044c0:	4b52      	ldr	r3, [pc, #328]	; (800460c <fillRect+0x434>)
 80044c2:	619a      	str	r2, [r3, #24]
 80044c4:	7afb      	ldrb	r3, [r7, #11]
 80044c6:	019b      	lsls	r3, r3, #6
 80044c8:	4a51      	ldr	r2, [pc, #324]	; (8004610 <fillRect+0x438>)
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	6193      	str	r3, [r2, #24]
 80044d0:	2102      	movs	r1, #2
 80044d2:	484d      	ldr	r0, [pc, #308]	; (8004608 <fillRect+0x430>)
 80044d4:	f7fc fb52 	bl	8000b7c <PIN_LOW>
 80044d8:	2102      	movs	r1, #2
 80044da:	484b      	ldr	r0, [pc, #300]	; (8004608 <fillRect+0x430>)
 80044dc:	f7fc fb4e 	bl	8000b7c <PIN_LOW>
 80044e0:	2102      	movs	r1, #2
 80044e2:	4849      	ldr	r0, [pc, #292]	; (8004608 <fillRect+0x430>)
 80044e4:	f7fc fb4a 	bl	8000b7c <PIN_LOW>
 80044e8:	2102      	movs	r1, #2
 80044ea:	4847      	ldr	r0, [pc, #284]	; (8004608 <fillRect+0x430>)
 80044ec:	f7fc fb56 	bl	8000b9c <PIN_HIGH>
 80044f0:	2102      	movs	r1, #2
 80044f2:	4845      	ldr	r0, [pc, #276]	; (8004608 <fillRect+0x430>)
 80044f4:	f7fc fb52 	bl	8000b9c <PIN_HIGH>
            write8(lo);
 80044f8:	4b43      	ldr	r3, [pc, #268]	; (8004608 <fillRect+0x430>)
 80044fa:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80044fe:	619a      	str	r2, [r3, #24]
 8004500:	4b42      	ldr	r3, [pc, #264]	; (800460c <fillRect+0x434>)
 8004502:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004506:	619a      	str	r2, [r3, #24]
 8004508:	4b41      	ldr	r3, [pc, #260]	; (8004610 <fillRect+0x438>)
 800450a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800450e:	619a      	str	r2, [r3, #24]
 8004510:	7abb      	ldrb	r3, [r7, #10]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004518:	7abb      	ldrb	r3, [r7, #10]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004520:	431a      	orrs	r2, r3
 8004522:	7abb      	ldrb	r3, [r7, #10]
 8004524:	025b      	lsls	r3, r3, #9
 8004526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452a:	431a      	orrs	r2, r3
 800452c:	4b36      	ldr	r3, [pc, #216]	; (8004608 <fillRect+0x430>)
 800452e:	619a      	str	r2, [r3, #24]
 8004530:	7abb      	ldrb	r3, [r7, #10]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004538:	7abb      	ldrb	r3, [r7, #10]
 800453a:	105b      	asrs	r3, r3, #1
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	431a      	orrs	r2, r3
 8004542:	7abb      	ldrb	r3, [r7, #10]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	431a      	orrs	r2, r3
 800454c:	7abb      	ldrb	r3, [r7, #10]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	431a      	orrs	r2, r3
 8004554:	4b2d      	ldr	r3, [pc, #180]	; (800460c <fillRect+0x434>)
 8004556:	619a      	str	r2, [r3, #24]
 8004558:	7abb      	ldrb	r3, [r7, #10]
 800455a:	019b      	lsls	r3, r3, #6
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <fillRect+0x438>)
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	6193      	str	r3, [r2, #24]
 8004564:	2102      	movs	r1, #2
 8004566:	4828      	ldr	r0, [pc, #160]	; (8004608 <fillRect+0x430>)
 8004568:	f7fc fb08 	bl	8000b7c <PIN_LOW>
 800456c:	2102      	movs	r1, #2
 800456e:	4826      	ldr	r0, [pc, #152]	; (8004608 <fillRect+0x430>)
 8004570:	f7fc fb04 	bl	8000b7c <PIN_LOW>
 8004574:	2102      	movs	r1, #2
 8004576:	4824      	ldr	r0, [pc, #144]	; (8004608 <fillRect+0x430>)
 8004578:	f7fc fb00 	bl	8000b7c <PIN_LOW>
 800457c:	2102      	movs	r1, #2
 800457e:	4822      	ldr	r0, [pc, #136]	; (8004608 <fillRect+0x430>)
 8004580:	f7fc fb0c 	bl	8000b9c <PIN_HIGH>
 8004584:	2102      	movs	r1, #2
 8004586:	4820      	ldr	r0, [pc, #128]	; (8004608 <fillRect+0x430>)
 8004588:	f7fc fb08 	bl	8000b9c <PIN_HIGH>
        } while (--end != 0);
 800458c:	89fb      	ldrh	r3, [r7, #14]
 800458e:	3b01      	subs	r3, #1
 8004590:	b29b      	uxth	r3, r3
 8004592:	81fb      	strh	r3, [r7, #14]
 8004594:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f af63 	bne.w	8004464 <fillRect+0x28c>
    while (h-- > 0) {
 800459e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	3a01      	subs	r2, #1
 80045a6:	b292      	uxth	r2, r2
 80045a8:	803a      	strh	r2, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f73f af58 	bgt.w	8004460 <fillRect+0x288>
#endif
    }
    CS_IDLE;
 80045b0:	2101      	movs	r1, #1
 80045b2:	4816      	ldr	r0, [pc, #88]	; (800460c <fillRect+0x434>)
 80045b4:	f7fc faf2 	bl	8000b9c <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80045b8:	4b16      	ldr	r3, [pc, #88]	; (8004614 <fillRect+0x43c>)
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <fillRect+0x404>
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <fillRect+0x440>)
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	f241 5226 	movw	r2, #5414	; 0x1526
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d116      	bne.n	80045fe <fillRect+0x426>
 80045d0:	4b12      	ldr	r3, [pc, #72]	; (800461c <fillRect+0x444>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <fillRect+0x426>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80045dc:	f7fc fb1c 	bl	8000c18 <width>
 80045e0:	4603      	mov	r3, r0
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b21c      	sxth	r4, r3
 80045e8:	f7fc fb22 	bl	8000c30 <height>
 80045ec:	4603      	mov	r3, r0
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	b21b      	sxth	r3, r3
 80045f4:	4622      	mov	r2, r4
 80045f6:	2100      	movs	r1, #0
 80045f8:	2000      	movs	r0, #0
 80045fa:	f7ff f9c5 	bl	8003988 <setAddrWindow>
}
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bd90      	pop	{r4, r7, pc}
 8004606:	bf00      	nop
 8004608:	40020000 	.word	0x40020000
 800460c:	40020400 	.word	0x40020400
 8004610:	40020800 	.word	0x40020800
 8004614:	200000d2 	.word	0x200000d2
 8004618:	200000e0 	.word	0x200000e0
 800461c:	20000032 	.word	0x20000032

08004620 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004628:	4b08      	ldr	r3, [pc, #32]	; (800464c <delay+0x2c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2200      	movs	r2, #0
 800462e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8004630:	bf00      	nop
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <delay+0x2c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d8f9      	bhi.n	8004632 <delay+0x12>
}
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000038 	.word	0x20000038

08004650 <tft_gpio_init>:
}


/****************** Inicialização de GPIOs **********************/
void tft_gpio_init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4b32      	ldr	r3, [pc, #200]	; (8004724 <tft_gpio_init+0xd4>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4a31      	ldr	r2, [pc, #196]	; (8004724 <tft_gpio_init+0xd4>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	6313      	str	r3, [r2, #48]	; 0x30
 8004666:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <tft_gpio_init+0xd4>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <tft_gpio_init+0xd4>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <tft_gpio_init+0xd4>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6313      	str	r3, [r2, #48]	; 0x30
 8004682:	4b28      	ldr	r3, [pc, #160]	; (8004724 <tft_gpio_init+0xd4>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <tft_gpio_init+0xd4>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a23      	ldr	r2, [pc, #140]	; (8004724 <tft_gpio_init+0xd4>)
 8004698:	f043 0302 	orr.w	r3, r3, #2
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b21      	ldr	r3, [pc, #132]	; (8004724 <tft_gpio_init+0xd4>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 80046aa:	2101      	movs	r1, #1
 80046ac:	481e      	ldr	r0, [pc, #120]	; (8004728 <tft_gpio_init+0xd8>)
 80046ae:	f7fc fa9b 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 80046b2:	2102      	movs	r1, #2
 80046b4:	481c      	ldr	r0, [pc, #112]	; (8004728 <tft_gpio_init+0xd8>)
 80046b6:	f7fc fa97 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 80046ba:	2110      	movs	r1, #16
 80046bc:	481a      	ldr	r0, [pc, #104]	; (8004728 <tft_gpio_init+0xd8>)
 80046be:	f7fc fa93 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 80046c2:	2101      	movs	r1, #1
 80046c4:	4819      	ldr	r0, [pc, #100]	; (800472c <tft_gpio_init+0xdc>)
 80046c6:	f7fc fa8f 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 80046ca:	2102      	movs	r1, #2
 80046cc:	4818      	ldr	r0, [pc, #96]	; (8004730 <tft_gpio_init+0xe0>)
 80046ce:	f7fc fa8b 	bl	8000be8 <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 80046d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046d6:	4814      	ldr	r0, [pc, #80]	; (8004728 <tft_gpio_init+0xd8>)
 80046d8:	f7fc fa86 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	4814      	ldr	r0, [pc, #80]	; (8004730 <tft_gpio_init+0xe0>)
 80046e0:	f7fc fa82 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80046e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046e8:	480f      	ldr	r0, [pc, #60]	; (8004728 <tft_gpio_init+0xd8>)
 80046ea:	f7fc fa7d 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80046ee:	2108      	movs	r1, #8
 80046f0:	480e      	ldr	r0, [pc, #56]	; (800472c <tft_gpio_init+0xdc>)
 80046f2:	f7fc fa79 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80046f6:	2120      	movs	r1, #32
 80046f8:	480c      	ldr	r0, [pc, #48]	; (800472c <tft_gpio_init+0xdc>)
 80046fa:	f7fc fa75 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80046fe:	2110      	movs	r1, #16
 8004700:	480a      	ldr	r0, [pc, #40]	; (800472c <tft_gpio_init+0xdc>)
 8004702:	f7fc fa71 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8004706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800470a:	4808      	ldr	r0, [pc, #32]	; (800472c <tft_gpio_init+0xdc>)
 800470c:	f7fc fa6c 	bl	8000be8 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8004710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004714:	4804      	ldr	r0, [pc, #16]	; (8004728 <tft_gpio_init+0xd8>)
 8004716:	f7fc fa67 	bl	8000be8 <PIN_OUTPUT>
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800
 8004728:	40020000 	.word	0x40020000
 800472c:	40020400 	.word	0x40020400
 8004730:	40020800 	.word	0x40020800

08004734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800476c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004738:	480d      	ldr	r0, [pc, #52]	; (8004770 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800473a:	490e      	ldr	r1, [pc, #56]	; (8004774 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800473c:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800473e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004740:	e002      	b.n	8004748 <LoopCopyDataInit>

08004742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004746:	3304      	adds	r3, #4

08004748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800474a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800474c:	d3f9      	bcc.n	8004742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800474e:	4a0b      	ldr	r2, [pc, #44]	; (800477c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004750:	4c0b      	ldr	r4, [pc, #44]	; (8004780 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004754:	e001      	b.n	800475a <LoopFillZerobss>

08004756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004758:	3204      	adds	r2, #4

0800475a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800475a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800475c:	d3fb      	bcc.n	8004756 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800475e:	f7fc f9fb 	bl	8000b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004762:	f001 ff09 	bl	8006578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004766:	f7fb fec9 	bl	80004fc <main>
  bx  lr    
 800476a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800476c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004774:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8004778:	08006b48 	.word	0x08006b48
  ldr r2, =_sbss
 800477c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004780:	200000ec 	.word	0x200000ec

08004784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004784:	e7fe      	b.n	8004784 <ADC_IRQHandler>
	...

08004788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <HAL_Init+0x40>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0d      	ldr	r2, [pc, #52]	; (80047c8 <HAL_Init+0x40>)
 8004792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_Init+0x40>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <HAL_Init+0x40>)
 800479e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <HAL_Init+0x40>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <HAL_Init+0x40>)
 80047aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047b0:	2003      	movs	r0, #3
 80047b2:	f000 f931 	bl	8004a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047b6:	2000      	movs	r0, #0
 80047b8:	f000 f808 	bl	80047cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047bc:	f7fc f910 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023c00 	.word	0x40023c00

080047cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047d4:	4b12      	ldr	r3, [pc, #72]	; (8004820 <HAL_InitTick+0x54>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b12      	ldr	r3, [pc, #72]	; (8004824 <HAL_InitTick+0x58>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f93b 	bl	8004a66 <HAL_SYSTICK_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e00e      	b.n	8004818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b0f      	cmp	r3, #15
 80047fe:	d80a      	bhi.n	8004816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004800:	2200      	movs	r2, #0
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	f000 f911 	bl	8004a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800480c:	4a06      	ldr	r2, [pc, #24]	; (8004828 <HAL_InitTick+0x5c>)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	e000      	b.n	8004818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000000 	.word	0x20000000
 8004824:	2000000c 	.word	0x2000000c
 8004828:	20000008 	.word	0x20000008

0800482c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_IncTick+0x20>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_IncTick+0x24>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4413      	add	r3, r2
 800483c:	4a04      	ldr	r2, [pc, #16]	; (8004850 <HAL_IncTick+0x24>)
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	2000000c 	.word	0x2000000c
 8004850:	200000e8 	.word	0x200000e8

08004854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return uwTick;
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <HAL_GetTick+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	200000e8 	.word	0x200000e8

0800486c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004874:	f7ff ffee 	bl	8004854 <HAL_GetTick>
 8004878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d005      	beq.n	8004892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <HAL_Delay+0x44>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004892:	bf00      	nop
 8004894:	f7ff ffde 	bl	8004854 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d8f7      	bhi.n	8004894 <HAL_Delay+0x28>
  {
  }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	2000000c 	.word	0x2000000c

080048b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048d0:	4013      	ands	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048e6:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	60d3      	str	r3, [r2, #12]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <__NVIC_GetPriorityGrouping+0x18>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	f003 0307 	and.w	r3, r3, #7
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004928:	2b00      	cmp	r3, #0
 800492a:	db0a      	blt.n	8004942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	490c      	ldr	r1, [pc, #48]	; (8004964 <__NVIC_SetPriority+0x4c>)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	0112      	lsls	r2, r2, #4
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	440b      	add	r3, r1
 800493c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004940:	e00a      	b.n	8004958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4908      	ldr	r1, [pc, #32]	; (8004968 <__NVIC_SetPriority+0x50>)
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3b04      	subs	r3, #4
 8004950:	0112      	lsls	r2, r2, #4
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	440b      	add	r3, r1
 8004956:	761a      	strb	r2, [r3, #24]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000e100 	.word	0xe000e100
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	; 0x24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f1c3 0307 	rsb	r3, r3, #7
 8004986:	2b04      	cmp	r3, #4
 8004988:	bf28      	it	cs
 800498a:	2304      	movcs	r3, #4
 800498c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3304      	adds	r3, #4
 8004992:	2b06      	cmp	r3, #6
 8004994:	d902      	bls.n	800499c <NVIC_EncodePriority+0x30>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3b03      	subs	r3, #3
 800499a:	e000      	b.n	800499e <NVIC_EncodePriority+0x32>
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43da      	mvns	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	401a      	ands	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b4:	f04f 31ff 	mov.w	r1, #4294967295
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	43d9      	mvns	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c4:	4313      	orrs	r3, r2
         );
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3724      	adds	r7, #36	; 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049e4:	d301      	bcc.n	80049ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049e6:	2301      	movs	r3, #1
 80049e8:	e00f      	b.n	8004a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <SysTick_Config+0x40>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049f2:	210f      	movs	r1, #15
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	f7ff ff8e 	bl	8004918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <SysTick_Config+0x40>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a02:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <SysTick_Config+0x40>)
 8004a04:	2207      	movs	r2, #7
 8004a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	e000e010 	.word	0xe000e010

08004a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff47 	bl	80048b4 <__NVIC_SetPriorityGrouping>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b086      	sub	sp, #24
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4603      	mov	r3, r0
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a40:	f7ff ff5c 	bl	80048fc <__NVIC_GetPriorityGrouping>
 8004a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	6978      	ldr	r0, [r7, #20]
 8004a4c:	f7ff ff8e 	bl	800496c <NVIC_EncodePriority>
 8004a50:	4602      	mov	r2, r0
 8004a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a56:	4611      	mov	r1, r2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff5d 	bl	8004918 <__NVIC_SetPriority>
}
 8004a5e:	bf00      	nop
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff ffb0 	bl	80049d4 <SysTick_Config>
 8004a74:	4603      	mov	r3, r0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b089      	sub	sp, #36	; 0x24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	e165      	b.n	8004d68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	f040 8154 	bne.w	8004d62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d005      	beq.n	8004ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d130      	bne.n	8004b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	2203      	movs	r2, #3
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b08:	2201      	movs	r2, #1
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 0201 	and.w	r2, r3, #1
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d017      	beq.n	8004b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d123      	bne.n	8004bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	08da      	lsrs	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3208      	adds	r2, #8
 8004b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	220f      	movs	r2, #15
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	08da      	lsrs	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3208      	adds	r2, #8
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	2203      	movs	r2, #3
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 0203 	and.w	r2, r3, #3
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80ae 	beq.w	8004d62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	4b5d      	ldr	r3, [pc, #372]	; (8004d80 <HAL_GPIO_Init+0x300>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	4a5c      	ldr	r2, [pc, #368]	; (8004d80 <HAL_GPIO_Init+0x300>)
 8004c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c14:	6453      	str	r3, [r2, #68]	; 0x44
 8004c16:	4b5a      	ldr	r3, [pc, #360]	; (8004d80 <HAL_GPIO_Init+0x300>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c22:	4a58      	ldr	r2, [pc, #352]	; (8004d84 <HAL_GPIO_Init+0x304>)
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	3302      	adds	r3, #2
 8004c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	220f      	movs	r2, #15
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4013      	ands	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a4f      	ldr	r2, [pc, #316]	; (8004d88 <HAL_GPIO_Init+0x308>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d025      	beq.n	8004c9a <HAL_GPIO_Init+0x21a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a4e      	ldr	r2, [pc, #312]	; (8004d8c <HAL_GPIO_Init+0x30c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01f      	beq.n	8004c96 <HAL_GPIO_Init+0x216>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a4d      	ldr	r2, [pc, #308]	; (8004d90 <HAL_GPIO_Init+0x310>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d019      	beq.n	8004c92 <HAL_GPIO_Init+0x212>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a4c      	ldr	r2, [pc, #304]	; (8004d94 <HAL_GPIO_Init+0x314>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <HAL_GPIO_Init+0x20e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a4b      	ldr	r2, [pc, #300]	; (8004d98 <HAL_GPIO_Init+0x318>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00d      	beq.n	8004c8a <HAL_GPIO_Init+0x20a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a4a      	ldr	r2, [pc, #296]	; (8004d9c <HAL_GPIO_Init+0x31c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <HAL_GPIO_Init+0x206>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a49      	ldr	r2, [pc, #292]	; (8004da0 <HAL_GPIO_Init+0x320>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d101      	bne.n	8004c82 <HAL_GPIO_Init+0x202>
 8004c7e:	2306      	movs	r3, #6
 8004c80:	e00c      	b.n	8004c9c <HAL_GPIO_Init+0x21c>
 8004c82:	2307      	movs	r3, #7
 8004c84:	e00a      	b.n	8004c9c <HAL_GPIO_Init+0x21c>
 8004c86:	2305      	movs	r3, #5
 8004c88:	e008      	b.n	8004c9c <HAL_GPIO_Init+0x21c>
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	e006      	b.n	8004c9c <HAL_GPIO_Init+0x21c>
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e004      	b.n	8004c9c <HAL_GPIO_Init+0x21c>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e002      	b.n	8004c9c <HAL_GPIO_Init+0x21c>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_GPIO_Init+0x21c>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	f002 0203 	and.w	r2, r2, #3
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	4093      	lsls	r3, r2
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cac:	4935      	ldr	r1, [pc, #212]	; (8004d84 <HAL_GPIO_Init+0x304>)
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cba:	4b3a      	ldr	r3, [pc, #232]	; (8004da4 <HAL_GPIO_Init+0x324>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cde:	4a31      	ldr	r2, [pc, #196]	; (8004da4 <HAL_GPIO_Init+0x324>)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ce4:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <HAL_GPIO_Init+0x324>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d08:	4a26      	ldr	r2, [pc, #152]	; (8004da4 <HAL_GPIO_Init+0x324>)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d0e:	4b25      	ldr	r3, [pc, #148]	; (8004da4 <HAL_GPIO_Init+0x324>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d32:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <HAL_GPIO_Init+0x324>)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <HAL_GPIO_Init+0x324>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d5c:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <HAL_GPIO_Init+0x324>)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3301      	adds	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	f67f ae96 	bls.w	8004a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3724      	adds	r7, #36	; 0x24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40013800 	.word	0x40013800
 8004d88:	40020000 	.word	0x40020000
 8004d8c:	40020400 	.word	0x40020400
 8004d90:	40020800 	.word	0x40020800
 8004d94:	40020c00 	.word	0x40020c00
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40021400 	.word	0x40021400
 8004da0:	40021800 	.word	0x40021800
 8004da4:	40013c00 	.word	0x40013c00

08004da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	e001      	b.n	8004dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	807b      	strh	r3, [r7, #2]
 8004de4:	4613      	mov	r3, r2
 8004de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004de8:	787b      	ldrb	r3, [r7, #1]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004df4:	e003      	b.n	8004dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004df6:	887b      	ldrh	r3, [r7, #2]
 8004df8:	041a      	lsls	r2, r3, #16
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	619a      	str	r2, [r3, #24]
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0cc      	b.n	8004fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e20:	4b68      	ldr	r3, [pc, #416]	; (8004fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d90c      	bls.n	8004e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b65      	ldr	r3, [pc, #404]	; (8004fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e36:	4b63      	ldr	r3, [pc, #396]	; (8004fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d001      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0b8      	b.n	8004fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d020      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e60:	4b59      	ldr	r3, [pc, #356]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4a58      	ldr	r2, [pc, #352]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e78:	4b53      	ldr	r3, [pc, #332]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4a52      	ldr	r2, [pc, #328]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e84:	4b50      	ldr	r3, [pc, #320]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	494d      	ldr	r1, [pc, #308]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d044      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	4b47      	ldr	r3, [pc, #284]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d119      	bne.n	8004eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e07f      	b.n	8004fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d003      	beq.n	8004eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d107      	bne.n	8004eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eca:	4b3f      	ldr	r3, [pc, #252]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e06f      	b.n	8004fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eda:	4b3b      	ldr	r3, [pc, #236]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e067      	b.n	8004fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eea:	4b37      	ldr	r3, [pc, #220]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 0203 	bic.w	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4934      	ldr	r1, [pc, #208]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004efc:	f7ff fcaa 	bl	8004854 <HAL_GetTick>
 8004f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f04:	f7ff fca6 	bl	8004854 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e04f      	b.n	8004fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 020c 	and.w	r2, r3, #12
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d1eb      	bne.n	8004f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f2c:	4b25      	ldr	r3, [pc, #148]	; (8004fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d20c      	bcs.n	8004f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	4b22      	ldr	r3, [pc, #136]	; (8004fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f42:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e032      	b.n	8004fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f60:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4916      	ldr	r1, [pc, #88]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	490e      	ldr	r1, [pc, #56]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f92:	f000 f855 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8004f96:	4602      	mov	r2, r0
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	490a      	ldr	r1, [pc, #40]	; (8004fcc <HAL_RCC_ClockConfig+0x1c0>)
 8004fa4:	5ccb      	ldrb	r3, [r1, r3]
 8004fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fc0a 	bl	80047cc <HAL_InitTick>

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40023c00 	.word	0x40023c00
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	0800661c 	.word	0x0800661c
 8004fd0:	20000000 	.word	0x20000000
 8004fd4:	20000008 	.word	0x20000008

08004fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <HAL_RCC_GetHCLKFreq+0x14>)
 8004fde:	681b      	ldr	r3, [r3, #0]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000000 	.word	0x20000000

08004ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ff4:	f7ff fff0 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	0a9b      	lsrs	r3, r3, #10
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4903      	ldr	r1, [pc, #12]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40023800 	.word	0x40023800
 8005014:	0800662c 	.word	0x0800662c

08005018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800501c:	f7ff ffdc 	bl	8004fd8 <HAL_RCC_GetHCLKFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0b5b      	lsrs	r3, r3, #13
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4903      	ldr	r1, [pc, #12]	; (800503c <HAL_RCC_GetPCLK2Freq+0x24>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40023800 	.word	0x40023800
 800503c:	0800662c 	.word	0x0800662c

08005040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005044:	b088      	sub	sp, #32
 8005046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800505c:	4bce      	ldr	r3, [pc, #824]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b0c      	cmp	r3, #12
 8005066:	f200 818d 	bhi.w	8005384 <HAL_RCC_GetSysClockFreq+0x344>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <HAL_RCC_GetSysClockFreq+0x30>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	080050a5 	.word	0x080050a5
 8005074:	08005385 	.word	0x08005385
 8005078:	08005385 	.word	0x08005385
 800507c:	08005385 	.word	0x08005385
 8005080:	080050ab 	.word	0x080050ab
 8005084:	08005385 	.word	0x08005385
 8005088:	08005385 	.word	0x08005385
 800508c:	08005385 	.word	0x08005385
 8005090:	080050b1 	.word	0x080050b1
 8005094:	08005385 	.word	0x08005385
 8005098:	08005385 	.word	0x08005385
 800509c:	08005385 	.word	0x08005385
 80050a0:	08005225 	.word	0x08005225
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4bbd      	ldr	r3, [pc, #756]	; (800539c <HAL_RCC_GetSysClockFreq+0x35c>)
 80050a6:	61bb      	str	r3, [r7, #24]
       break;
 80050a8:	e16f      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050aa:	4bbd      	ldr	r3, [pc, #756]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x360>)
 80050ac:	61bb      	str	r3, [r7, #24]
      break;
 80050ae:	e16c      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b0:	4bb9      	ldr	r3, [pc, #740]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ba:	4bb7      	ldr	r3, [pc, #732]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d053      	beq.n	800516e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c6:	4bb4      	ldr	r3, [pc, #720]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	461a      	mov	r2, r3
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050d6:	f04f 0100 	mov.w	r1, #0
 80050da:	ea02 0400 	and.w	r4, r2, r0
 80050de:	603c      	str	r4, [r7, #0]
 80050e0:	400b      	ands	r3, r1
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050e8:	4620      	mov	r0, r4
 80050ea:	4629      	mov	r1, r5
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	014b      	lsls	r3, r1, #5
 80050f6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050fa:	0142      	lsls	r2, r0, #5
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	4623      	mov	r3, r4
 8005102:	1ac0      	subs	r0, r0, r3
 8005104:	462b      	mov	r3, r5
 8005106:	eb61 0103 	sbc.w	r1, r1, r3
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	018b      	lsls	r3, r1, #6
 8005114:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005118:	0182      	lsls	r2, r0, #6
 800511a:	1a12      	subs	r2, r2, r0
 800511c:	eb63 0301 	sbc.w	r3, r3, r1
 8005120:	f04f 0000 	mov.w	r0, #0
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	00d9      	lsls	r1, r3, #3
 800512a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800512e:	00d0      	lsls	r0, r2, #3
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4621      	mov	r1, r4
 8005136:	1852      	adds	r2, r2, r1
 8005138:	4629      	mov	r1, r5
 800513a:	eb43 0101 	adc.w	r1, r3, r1
 800513e:	460b      	mov	r3, r1
 8005140:	f04f 0000 	mov.w	r0, #0
 8005144:	f04f 0100 	mov.w	r1, #0
 8005148:	0259      	lsls	r1, r3, #9
 800514a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800514e:	0250      	lsls	r0, r2, #9
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	461a      	mov	r2, r3
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	f7fb f850 	bl	8000204 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4613      	mov	r3, r2
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	e04c      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516e:	4b8a      	ldr	r3, [pc, #552]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	461a      	mov	r2, r3
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800517e:	f04f 0100 	mov.w	r1, #0
 8005182:	ea02 0a00 	and.w	sl, r2, r0
 8005186:	ea03 0b01 	and.w	fp, r3, r1
 800518a:	4650      	mov	r0, sl
 800518c:	4659      	mov	r1, fp
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	014b      	lsls	r3, r1, #5
 8005198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800519c:	0142      	lsls	r2, r0, #5
 800519e:	4610      	mov	r0, r2
 80051a0:	4619      	mov	r1, r3
 80051a2:	ebb0 000a 	subs.w	r0, r0, sl
 80051a6:	eb61 010b 	sbc.w	r1, r1, fp
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	018b      	lsls	r3, r1, #6
 80051b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051b8:	0182      	lsls	r2, r0, #6
 80051ba:	1a12      	subs	r2, r2, r0
 80051bc:	eb63 0301 	sbc.w	r3, r3, r1
 80051c0:	f04f 0000 	mov.w	r0, #0
 80051c4:	f04f 0100 	mov.w	r1, #0
 80051c8:	00d9      	lsls	r1, r3, #3
 80051ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051ce:	00d0      	lsls	r0, r2, #3
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	eb12 020a 	adds.w	r2, r2, sl
 80051d8:	eb43 030b 	adc.w	r3, r3, fp
 80051dc:	f04f 0000 	mov.w	r0, #0
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	0299      	lsls	r1, r3, #10
 80051e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051ea:	0290      	lsls	r0, r2, #10
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4610      	mov	r0, r2
 80051f2:	4619      	mov	r1, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	f7fb f802 	bl	8000204 <__aeabi_uldivmod>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4613      	mov	r3, r2
 8005206:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005208:	4b63      	ldr	r3, [pc, #396]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	3301      	adds	r3, #1
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005220:	61bb      	str	r3, [r7, #24]
      break;
 8005222:	e0b2      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005224:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800522c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800522e:	4b5a      	ldr	r3, [pc, #360]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d04d      	beq.n	80052d6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523a:	4b57      	ldr	r3, [pc, #348]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	099b      	lsrs	r3, r3, #6
 8005240:	461a      	mov	r2, r3
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	f240 10ff 	movw	r0, #511	; 0x1ff
 800524a:	f04f 0100 	mov.w	r1, #0
 800524e:	ea02 0800 	and.w	r8, r2, r0
 8005252:	ea03 0901 	and.w	r9, r3, r1
 8005256:	4640      	mov	r0, r8
 8005258:	4649      	mov	r1, r9
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	014b      	lsls	r3, r1, #5
 8005264:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005268:	0142      	lsls	r2, r0, #5
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	ebb0 0008 	subs.w	r0, r0, r8
 8005272:	eb61 0109 	sbc.w	r1, r1, r9
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	018b      	lsls	r3, r1, #6
 8005280:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005284:	0182      	lsls	r2, r0, #6
 8005286:	1a12      	subs	r2, r2, r0
 8005288:	eb63 0301 	sbc.w	r3, r3, r1
 800528c:	f04f 0000 	mov.w	r0, #0
 8005290:	f04f 0100 	mov.w	r1, #0
 8005294:	00d9      	lsls	r1, r3, #3
 8005296:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800529a:	00d0      	lsls	r0, r2, #3
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	eb12 0208 	adds.w	r2, r2, r8
 80052a4:	eb43 0309 	adc.w	r3, r3, r9
 80052a8:	f04f 0000 	mov.w	r0, #0
 80052ac:	f04f 0100 	mov.w	r1, #0
 80052b0:	0259      	lsls	r1, r3, #9
 80052b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80052b6:	0250      	lsls	r0, r2, #9
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	f7fa ff9c 	bl	8000204 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4613      	mov	r3, r2
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e04a      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d6:	4b30      	ldr	r3, [pc, #192]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	461a      	mov	r2, r3
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	ea02 0400 	and.w	r4, r2, r0
 80052ee:	ea03 0501 	and.w	r5, r3, r1
 80052f2:	4620      	mov	r0, r4
 80052f4:	4629      	mov	r1, r5
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	014b      	lsls	r3, r1, #5
 8005300:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005304:	0142      	lsls	r2, r0, #5
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	1b00      	subs	r0, r0, r4
 800530c:	eb61 0105 	sbc.w	r1, r1, r5
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	018b      	lsls	r3, r1, #6
 800531a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800531e:	0182      	lsls	r2, r0, #6
 8005320:	1a12      	subs	r2, r2, r0
 8005322:	eb63 0301 	sbc.w	r3, r3, r1
 8005326:	f04f 0000 	mov.w	r0, #0
 800532a:	f04f 0100 	mov.w	r1, #0
 800532e:	00d9      	lsls	r1, r3, #3
 8005330:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005334:	00d0      	lsls	r0, r2, #3
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	1912      	adds	r2, r2, r4
 800533c:	eb45 0303 	adc.w	r3, r5, r3
 8005340:	f04f 0000 	mov.w	r0, #0
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	0299      	lsls	r1, r3, #10
 800534a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800534e:	0290      	lsls	r0, r2, #10
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	461a      	mov	r2, r3
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	f7fa ff50 	bl	8000204 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <HAL_RCC_GetSysClockFreq+0x358>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	0f1b      	lsrs	r3, r3, #28
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	61bb      	str	r3, [r7, #24]
      break;
 8005382:	e002      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005386:	61bb      	str	r3, [r7, #24]
      break;
 8005388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538a:	69bb      	ldr	r3, [r7, #24]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800
 800539c:	00f42400 	.word	0x00f42400
 80053a0:	007a1200 	.word	0x007a1200

080053a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e28d      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8083 	beq.w	80054ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053c4:	4b94      	ldr	r3, [pc, #592]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d019      	beq.n	8005404 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053d0:	4b91      	ldr	r3, [pc, #580]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d106      	bne.n	80053ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053dc:	4b8e      	ldr	r3, [pc, #568]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e8:	d00c      	beq.n	8005404 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ea:	4b8b      	ldr	r3, [pc, #556]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	d112      	bne.n	800541c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f6:	4b88      	ldr	r3, [pc, #544]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005402:	d10b      	bne.n	800541c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005404:	4b84      	ldr	r3, [pc, #528]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d05b      	beq.n	80054c8 <HAL_RCC_OscConfig+0x124>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d157      	bne.n	80054c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e25a      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005424:	d106      	bne.n	8005434 <HAL_RCC_OscConfig+0x90>
 8005426:	4b7c      	ldr	r3, [pc, #496]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a7b      	ldr	r2, [pc, #492]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 800542c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e01d      	b.n	8005470 <HAL_RCC_OscConfig+0xcc>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800543c:	d10c      	bne.n	8005458 <HAL_RCC_OscConfig+0xb4>
 800543e:	4b76      	ldr	r3, [pc, #472]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a75      	ldr	r2, [pc, #468]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	4b73      	ldr	r3, [pc, #460]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a72      	ldr	r2, [pc, #456]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e00b      	b.n	8005470 <HAL_RCC_OscConfig+0xcc>
 8005458:	4b6f      	ldr	r3, [pc, #444]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a6e      	ldr	r2, [pc, #440]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 800545e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	4b6c      	ldr	r3, [pc, #432]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a6b      	ldr	r2, [pc, #428]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 800546a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d013      	beq.n	80054a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7ff f9ec 	bl	8004854 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005480:	f7ff f9e8 	bl	8004854 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	; 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e21f      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005492:	4b61      	ldr	r3, [pc, #388]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0xdc>
 800549e:	e014      	b.n	80054ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7ff f9d8 	bl	8004854 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a8:	f7ff f9d4 	bl	8004854 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	; 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e20b      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ba:	4b57      	ldr	r3, [pc, #348]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x104>
 80054c6:	e000      	b.n	80054ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d06f      	beq.n	80055b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054d6:	4b50      	ldr	r3, [pc, #320]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d017      	beq.n	8005512 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054e2:	4b4d      	ldr	r3, [pc, #308]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d105      	bne.n	80054fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054ee:	4b4a      	ldr	r3, [pc, #296]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054fa:	4b47      	ldr	r3, [pc, #284]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005502:	2b0c      	cmp	r3, #12
 8005504:	d11c      	bne.n	8005540 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005506:	4b44      	ldr	r3, [pc, #272]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d116      	bne.n	8005540 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005512:	4b41      	ldr	r3, [pc, #260]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_RCC_OscConfig+0x186>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d001      	beq.n	800552a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e1d3      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552a:	4b3b      	ldr	r3, [pc, #236]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4937      	ldr	r1, [pc, #220]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800553e:	e03a      	b.n	80055b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d020      	beq.n	800558a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005548:	4b34      	ldr	r3, [pc, #208]	; (800561c <HAL_RCC_OscConfig+0x278>)
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554e:	f7ff f981 	bl	8004854 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005556:	f7ff f97d 	bl	8004854 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e1b4      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005568:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005574:	4b28      	ldr	r3, [pc, #160]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4925      	ldr	r1, [pc, #148]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 8005584:	4313      	orrs	r3, r2
 8005586:	600b      	str	r3, [r1, #0]
 8005588:	e015      	b.n	80055b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800558a:	4b24      	ldr	r3, [pc, #144]	; (800561c <HAL_RCC_OscConfig+0x278>)
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7ff f960 	bl	8004854 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005598:	f7ff f95c 	bl	8004854 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e193      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055aa:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d036      	beq.n	8005630 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d016      	beq.n	80055f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <HAL_RCC_OscConfig+0x27c>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7ff f940 	bl	8004854 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055d8:	f7ff f93c 	bl	8004854 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e173      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80055ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0x234>
 80055f6:	e01b      	b.n	8005630 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f8:	4b09      	ldr	r3, [pc, #36]	; (8005620 <HAL_RCC_OscConfig+0x27c>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fe:	f7ff f929 	bl	8004854 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005604:	e00e      	b.n	8005624 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005606:	f7ff f925 	bl	8004854 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d907      	bls.n	8005624 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e15c      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
 8005618:	40023800 	.word	0x40023800
 800561c:	42470000 	.word	0x42470000
 8005620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005624:	4b8a      	ldr	r3, [pc, #552]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1ea      	bne.n	8005606 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8097 	beq.w	800576c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005642:	4b83      	ldr	r3, [pc, #524]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10f      	bne.n	800566e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	4b7f      	ldr	r3, [pc, #508]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	4a7e      	ldr	r2, [pc, #504]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565c:	6413      	str	r3, [r2, #64]	; 0x40
 800565e:	4b7c      	ldr	r3, [pc, #496]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566e:	4b79      	ldr	r3, [pc, #484]	; (8005854 <HAL_RCC_OscConfig+0x4b0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d118      	bne.n	80056ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800567a:	4b76      	ldr	r3, [pc, #472]	; (8005854 <HAL_RCC_OscConfig+0x4b0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a75      	ldr	r2, [pc, #468]	; (8005854 <HAL_RCC_OscConfig+0x4b0>)
 8005680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005686:	f7ff f8e5 	bl	8004854 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568e:	f7ff f8e1 	bl	8004854 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e118      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a0:	4b6c      	ldr	r3, [pc, #432]	; (8005854 <HAL_RCC_OscConfig+0x4b0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d106      	bne.n	80056c2 <HAL_RCC_OscConfig+0x31e>
 80056b4:	4b66      	ldr	r3, [pc, #408]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b8:	4a65      	ldr	r2, [pc, #404]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6713      	str	r3, [r2, #112]	; 0x70
 80056c0:	e01c      	b.n	80056fc <HAL_RCC_OscConfig+0x358>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b05      	cmp	r3, #5
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x340>
 80056ca:	4b61      	ldr	r3, [pc, #388]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	4a60      	ldr	r2, [pc, #384]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056d0:	f043 0304 	orr.w	r3, r3, #4
 80056d4:	6713      	str	r3, [r2, #112]	; 0x70
 80056d6:	4b5e      	ldr	r3, [pc, #376]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	4a5d      	ldr	r2, [pc, #372]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	6713      	str	r3, [r2, #112]	; 0x70
 80056e2:	e00b      	b.n	80056fc <HAL_RCC_OscConfig+0x358>
 80056e4:	4b5a      	ldr	r3, [pc, #360]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	4a59      	ldr	r2, [pc, #356]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	6713      	str	r3, [r2, #112]	; 0x70
 80056f0:	4b57      	ldr	r3, [pc, #348]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	4a56      	ldr	r2, [pc, #344]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80056f6:	f023 0304 	bic.w	r3, r3, #4
 80056fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d015      	beq.n	8005730 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7ff f8a6 	bl	8004854 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570a:	e00a      	b.n	8005722 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800570c:	f7ff f8a2 	bl	8004854 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f241 3288 	movw	r2, #5000	; 0x1388
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e0d7      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005722:	4b4b      	ldr	r3, [pc, #300]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0ee      	beq.n	800570c <HAL_RCC_OscConfig+0x368>
 800572e:	e014      	b.n	800575a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7ff f890 	bl	8004854 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005736:	e00a      	b.n	800574e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005738:	f7ff f88c 	bl	8004854 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	; 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e0c1      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574e:	4b40      	ldr	r3, [pc, #256]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ee      	bne.n	8005738 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d105      	bne.n	800576c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005760:	4b3b      	ldr	r3, [pc, #236]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	4a3a      	ldr	r2, [pc, #232]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80ad 	beq.w	80058d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005776:	4b36      	ldr	r3, [pc, #216]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b08      	cmp	r3, #8
 8005780:	d060      	beq.n	8005844 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d145      	bne.n	8005816 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578a:	4b33      	ldr	r3, [pc, #204]	; (8005858 <HAL_RCC_OscConfig+0x4b4>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7ff f860 	bl	8004854 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005798:	f7ff f85c 	bl	8004854 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e093      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057aa:	4b29      	ldr	r3, [pc, #164]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69da      	ldr	r2, [r3, #28]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	019b      	lsls	r3, r3, #6
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	3b01      	subs	r3, #1
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	071b      	lsls	r3, r3, #28
 80057e2:	491b      	ldr	r1, [pc, #108]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e8:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <HAL_RCC_OscConfig+0x4b4>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ee:	f7ff f831 	bl	8004854 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f6:	f7ff f82d 	bl	8004854 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e064      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005808:	4b11      	ldr	r3, [pc, #68]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x452>
 8005814:	e05c      	b.n	80058d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <HAL_RCC_OscConfig+0x4b4>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7ff f81a 	bl	8004854 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005824:	f7ff f816 	bl	8004854 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e04d      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005836:	4b06      	ldr	r3, [pc, #24]	; (8005850 <HAL_RCC_OscConfig+0x4ac>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x480>
 8005842:	e045      	b.n	80058d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e040      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
 8005850:	40023800 	.word	0x40023800
 8005854:	40007000 	.word	0x40007000
 8005858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800585c:	4b1f      	ldr	r3, [pc, #124]	; (80058dc <HAL_RCC_OscConfig+0x538>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d030      	beq.n	80058cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d129      	bne.n	80058cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d122      	bne.n	80058cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800588c:	4013      	ands	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005894:	4293      	cmp	r3, r2
 8005896:	d119      	bne.n	80058cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	3b01      	subs	r3, #1
 80058a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d10f      	bne.n	80058cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d107      	bne.n	80058cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800

080058e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e041      	b.n	8005976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb f892 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3304      	adds	r3, #4
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f000 f95e 	bl	8005be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d001      	beq.n	8005998 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e046      	b.n	8005a26 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a23      	ldr	r2, [pc, #140]	; (8005a34 <HAL_TIM_Base_Start+0xb4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d022      	beq.n	80059f0 <HAL_TIM_Base_Start+0x70>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b2:	d01d      	beq.n	80059f0 <HAL_TIM_Base_Start+0x70>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_TIM_Base_Start+0xb8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <HAL_TIM_Base_Start+0x70>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <HAL_TIM_Base_Start+0xbc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <HAL_TIM_Base_Start+0x70>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <HAL_TIM_Base_Start+0xc0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <HAL_TIM_Base_Start+0x70>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <HAL_TIM_Base_Start+0xc4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_TIM_Base_Start+0x70>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <HAL_TIM_Base_Start+0xc8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_TIM_Base_Start+0x70>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <HAL_TIM_Base_Start+0xcc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d111      	bne.n	8005a14 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b06      	cmp	r3, #6
 8005a00:	d010      	beq.n	8005a24 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a12:	e007      	b.n	8005a24 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40010400 	.word	0x40010400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40001800 	.word	0x40001800

08005a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIM_ConfigClockSource+0x1c>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e0b4      	b.n	8005bd6 <HAL_TIM_ConfigClockSource+0x186>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa4:	d03e      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0xd4>
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aaa:	f200 8087 	bhi.w	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab2:	f000 8086 	beq.w	8005bc2 <HAL_TIM_ConfigClockSource+0x172>
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	d87f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b70      	cmp	r3, #112	; 0x70
 8005abe:	d01a      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0xa6>
 8005ac0:	2b70      	cmp	r3, #112	; 0x70
 8005ac2:	d87b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d050      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x11a>
 8005ac8:	2b60      	cmp	r3, #96	; 0x60
 8005aca:	d877      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b50      	cmp	r3, #80	; 0x50
 8005ace:	d03c      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0xfa>
 8005ad0:	2b50      	cmp	r3, #80	; 0x50
 8005ad2:	d873      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d058      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x13a>
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d86f      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b30      	cmp	r3, #48	; 0x30
 8005ade:	d064      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x15a>
 8005ae0:	2b30      	cmp	r3, #48	; 0x30
 8005ae2:	d86b      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d060      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x15a>
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d867      	bhi.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05c      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x15a>
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d05a      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x15a>
 8005af4:	e062      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6899      	ldr	r1, [r3, #8]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f000 f985 	bl	8005e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	609a      	str	r2, [r3, #8]
      break;
 8005b22:	e04f      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6899      	ldr	r1, [r3, #8]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f000 f96e 	bl	8005e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b46:	609a      	str	r2, [r3, #8]
      break;
 8005b48:	e03c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 f8e2 	bl	8005d20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2150      	movs	r1, #80	; 0x50
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f93b 	bl	8005dde <TIM_ITRx_SetConfig>
      break;
 8005b68:	e02c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6859      	ldr	r1, [r3, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f000 f901 	bl	8005d7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2160      	movs	r1, #96	; 0x60
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f92b 	bl	8005dde <TIM_ITRx_SetConfig>
      break;
 8005b88:	e01c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6859      	ldr	r1, [r3, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f000 f8c2 	bl	8005d20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2140      	movs	r1, #64	; 0x40
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f91b 	bl	8005dde <TIM_ITRx_SetConfig>
      break;
 8005ba8:	e00c      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f000 f912 	bl	8005dde <TIM_ITRx_SetConfig>
      break;
 8005bba:	e003      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc0:	e000      	b.n	8005bc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a40      	ldr	r2, [pc, #256]	; (8005cf4 <TIM_Base_SetConfig+0x114>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfe:	d00f      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3d      	ldr	r2, [pc, #244]	; (8005cf8 <TIM_Base_SetConfig+0x118>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00b      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3c      	ldr	r2, [pc, #240]	; (8005cfc <TIM_Base_SetConfig+0x11c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3b      	ldr	r2, [pc, #236]	; (8005d00 <TIM_Base_SetConfig+0x120>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a3a      	ldr	r2, [pc, #232]	; (8005d04 <TIM_Base_SetConfig+0x124>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d108      	bne.n	8005c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2f      	ldr	r2, [pc, #188]	; (8005cf4 <TIM_Base_SetConfig+0x114>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d02b      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c40:	d027      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2c      	ldr	r2, [pc, #176]	; (8005cf8 <TIM_Base_SetConfig+0x118>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d023      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2b      	ldr	r2, [pc, #172]	; (8005cfc <TIM_Base_SetConfig+0x11c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d01f      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2a      	ldr	r2, [pc, #168]	; (8005d00 <TIM_Base_SetConfig+0x120>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01b      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a29      	ldr	r2, [pc, #164]	; (8005d04 <TIM_Base_SetConfig+0x124>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d017      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a28      	ldr	r2, [pc, #160]	; (8005d08 <TIM_Base_SetConfig+0x128>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a27      	ldr	r2, [pc, #156]	; (8005d0c <TIM_Base_SetConfig+0x12c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00f      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <TIM_Base_SetConfig+0x130>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00b      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a25      	ldr	r2, [pc, #148]	; (8005d14 <TIM_Base_SetConfig+0x134>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d007      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a24      	ldr	r2, [pc, #144]	; (8005d18 <TIM_Base_SetConfig+0x138>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <TIM_Base_SetConfig+0x13c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d108      	bne.n	8005ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a0a      	ldr	r2, [pc, #40]	; (8005cf4 <TIM_Base_SetConfig+0x114>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_Base_SetConfig+0xf8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a0c      	ldr	r2, [pc, #48]	; (8005d04 <TIM_Base_SetConfig+0x124>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d103      	bne.n	8005ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	615a      	str	r2, [r3, #20]
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40000c00 	.word	0x40000c00
 8005d04:	40010400 	.word	0x40010400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800
 8005d14:	40001800 	.word	0x40001800
 8005d18:	40001c00 	.word	0x40001c00
 8005d1c:	40002000 	.word	0x40002000

08005d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f023 0201 	bic.w	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f023 030a 	bic.w	r3, r3, #10
 8005d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b087      	sub	sp, #28
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0210 	bic.w	r2, r3, #16
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005da8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f043 0307 	orr.w	r3, r3, #7
 8005e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	609a      	str	r2, [r3, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	021a      	lsls	r2, r3, #8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	609a      	str	r2, [r3, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e05a      	b.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d022      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d018      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1b      	ldr	r2, [pc, #108]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d10c      	bne.n	8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40000400 	.word	0x40000400
 8005f38:	40000800 	.word	0x40000800
 8005f3c:	40000c00 	.word	0x40000c00
 8005f40:	40010400 	.word	0x40010400
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40001800 	.word	0x40001800

08005f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e03f      	b.n	8005fde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fa fd7e 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2224      	movs	r2, #36	; 0x24
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f929 	bl	80061e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b08a      	sub	sp, #40	; 0x28
 8005fea:	af02      	add	r7, sp, #8
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b20      	cmp	r3, #32
 8006004:	d17c      	bne.n	8006100 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_UART_Transmit+0x2c>
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e075      	b.n	8006102 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_UART_Transmit+0x3e>
 8006020:	2302      	movs	r3, #2
 8006022:	e06e      	b.n	8006102 <HAL_UART_Transmit+0x11c>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2221      	movs	r2, #33	; 0x21
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800603a:	f7fe fc0b 	bl	8004854 <HAL_GetTick>
 800603e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	88fa      	ldrh	r2, [r7, #6]
 8006044:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006054:	d108      	bne.n	8006068 <HAL_UART_Transmit+0x82>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	e003      	b.n	8006070 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006078:	e02a      	b.n	80060d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2200      	movs	r2, #0
 8006082:	2180      	movs	r1, #128	; 0x80
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f840 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e036      	b.n	8006102 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	3302      	adds	r3, #2
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	e007      	b.n	80060c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	781a      	ldrb	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3301      	adds	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1cf      	bne.n	800607a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2200      	movs	r2, #0
 80060e2:	2140      	movs	r1, #64	; 0x40
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f810 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e006      	b.n	8006102 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b090      	sub	sp, #64	; 0x40
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611a:	e050      	b.n	80061be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d04c      	beq.n	80061be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <UART_WaitOnFlagUntilTimeout+0x30>
 800612a:	f7fe fb93 	bl	8004854 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006136:	429a      	cmp	r2, r3
 8006138:	d241      	bcs.n	80061be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800615a:	637a      	str	r2, [r7, #52]	; 0x34
 800615c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e5      	bne.n	800613a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	613b      	str	r3, [r7, #16]
   return(result);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	63bb      	str	r3, [r7, #56]	; 0x38
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618e:	623a      	str	r2, [r7, #32]
 8006190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	69f9      	ldr	r1, [r7, #28]
 8006194:	6a3a      	ldr	r2, [r7, #32]
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	61bb      	str	r3, [r7, #24]
   return(result);
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e5      	bne.n	800616e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e00f      	b.n	80061de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4013      	ands	r3, r2
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	bf0c      	ite	eq
 80061ce:	2301      	moveq	r3, #1
 80061d0:	2300      	movne	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d09f      	beq.n	800611c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3740      	adds	r7, #64	; 0x40
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	b09f      	sub	sp, #124	; 0x7c
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fe:	68d9      	ldr	r1, [r3, #12]
 8006200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	ea40 0301 	orr.w	r3, r0, r1
 8006208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800620a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	431a      	orrs	r2, r3
 8006214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	431a      	orrs	r2, r3
 800621a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	4313      	orrs	r3, r2
 8006220:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800622c:	f021 010c 	bic.w	r1, r1, #12
 8006230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006236:	430b      	orrs	r3, r1
 8006238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800623a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006246:	6999      	ldr	r1, [r3, #24]
 8006248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	ea40 0301 	orr.w	r3, r0, r1
 8006250:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4bc5      	ldr	r3, [pc, #788]	; (800656c <UART_SetConfig+0x384>)
 8006258:	429a      	cmp	r2, r3
 800625a:	d004      	beq.n	8006266 <UART_SetConfig+0x7e>
 800625c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4bc3      	ldr	r3, [pc, #780]	; (8006570 <UART_SetConfig+0x388>)
 8006262:	429a      	cmp	r2, r3
 8006264:	d103      	bne.n	800626e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006266:	f7fe fed7 	bl	8005018 <HAL_RCC_GetPCLK2Freq>
 800626a:	6778      	str	r0, [r7, #116]	; 0x74
 800626c:	e002      	b.n	8006274 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800626e:	f7fe febf 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8006272:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627c:	f040 80b6 	bne.w	80063ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006282:	461c      	mov	r4, r3
 8006284:	f04f 0500 	mov.w	r5, #0
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	1891      	adds	r1, r2, r2
 800628e:	6439      	str	r1, [r7, #64]	; 0x40
 8006290:	415b      	adcs	r3, r3
 8006292:	647b      	str	r3, [r7, #68]	; 0x44
 8006294:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006298:	1912      	adds	r2, r2, r4
 800629a:	eb45 0303 	adc.w	r3, r5, r3
 800629e:	f04f 0000 	mov.w	r0, #0
 80062a2:	f04f 0100 	mov.w	r1, #0
 80062a6:	00d9      	lsls	r1, r3, #3
 80062a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062ac:	00d0      	lsls	r0, r2, #3
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	1911      	adds	r1, r2, r4
 80062b4:	6639      	str	r1, [r7, #96]	; 0x60
 80062b6:	416b      	adcs	r3, r5
 80062b8:	667b      	str	r3, [r7, #100]	; 0x64
 80062ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	461a      	mov	r2, r3
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	1891      	adds	r1, r2, r2
 80062c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062c8:	415b      	adcs	r3, r3
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80062d4:	f7f9 ff96 	bl	8000204 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4ba5      	ldr	r3, [pc, #660]	; (8006574 <UART_SetConfig+0x38c>)
 80062de:	fba3 2302 	umull	r2, r3, r3, r2
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	011e      	lsls	r6, r3, #4
 80062e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e8:	461c      	mov	r4, r3
 80062ea:	f04f 0500 	mov.w	r5, #0
 80062ee:	4622      	mov	r2, r4
 80062f0:	462b      	mov	r3, r5
 80062f2:	1891      	adds	r1, r2, r2
 80062f4:	6339      	str	r1, [r7, #48]	; 0x30
 80062f6:	415b      	adcs	r3, r3
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
 80062fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80062fe:	1912      	adds	r2, r2, r4
 8006300:	eb45 0303 	adc.w	r3, r5, r3
 8006304:	f04f 0000 	mov.w	r0, #0
 8006308:	f04f 0100 	mov.w	r1, #0
 800630c:	00d9      	lsls	r1, r3, #3
 800630e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006312:	00d0      	lsls	r0, r2, #3
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	1911      	adds	r1, r2, r4
 800631a:	65b9      	str	r1, [r7, #88]	; 0x58
 800631c:	416b      	adcs	r3, r5
 800631e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	461a      	mov	r2, r3
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	1891      	adds	r1, r2, r2
 800632c:	62b9      	str	r1, [r7, #40]	; 0x28
 800632e:	415b      	adcs	r3, r3
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006336:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800633a:	f7f9 ff63 	bl	8000204 <__aeabi_uldivmod>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4b8c      	ldr	r3, [pc, #560]	; (8006574 <UART_SetConfig+0x38c>)
 8006344:	fba3 1302 	umull	r1, r3, r3, r2
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	2164      	movs	r1, #100	; 0x64
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	3332      	adds	r3, #50	; 0x32
 8006356:	4a87      	ldr	r2, [pc, #540]	; (8006574 <UART_SetConfig+0x38c>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006364:	441e      	add	r6, r3
 8006366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006368:	4618      	mov	r0, r3
 800636a:	f04f 0100 	mov.w	r1, #0
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	1894      	adds	r4, r2, r2
 8006374:	623c      	str	r4, [r7, #32]
 8006376:	415b      	adcs	r3, r3
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
 800637a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800637e:	1812      	adds	r2, r2, r0
 8006380:	eb41 0303 	adc.w	r3, r1, r3
 8006384:	f04f 0400 	mov.w	r4, #0
 8006388:	f04f 0500 	mov.w	r5, #0
 800638c:	00dd      	lsls	r5, r3, #3
 800638e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006392:	00d4      	lsls	r4, r2, #3
 8006394:	4622      	mov	r2, r4
 8006396:	462b      	mov	r3, r5
 8006398:	1814      	adds	r4, r2, r0
 800639a:	653c      	str	r4, [r7, #80]	; 0x50
 800639c:	414b      	adcs	r3, r1
 800639e:	657b      	str	r3, [r7, #84]	; 0x54
 80063a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	461a      	mov	r2, r3
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	1891      	adds	r1, r2, r2
 80063ac:	61b9      	str	r1, [r7, #24]
 80063ae:	415b      	adcs	r3, r3
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80063ba:	f7f9 ff23 	bl	8000204 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4b6c      	ldr	r3, [pc, #432]	; (8006574 <UART_SetConfig+0x38c>)
 80063c4:	fba3 1302 	umull	r1, r3, r3, r2
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	2164      	movs	r1, #100	; 0x64
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	3332      	adds	r3, #50	; 0x32
 80063d6:	4a67      	ldr	r2, [pc, #412]	; (8006574 <UART_SetConfig+0x38c>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	f003 0207 	and.w	r2, r3, #7
 80063e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4432      	add	r2, r6
 80063e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063ea:	e0b9      	b.n	8006560 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ee:	461c      	mov	r4, r3
 80063f0:	f04f 0500 	mov.w	r5, #0
 80063f4:	4622      	mov	r2, r4
 80063f6:	462b      	mov	r3, r5
 80063f8:	1891      	adds	r1, r2, r2
 80063fa:	6139      	str	r1, [r7, #16]
 80063fc:	415b      	adcs	r3, r3
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006404:	1912      	adds	r2, r2, r4
 8006406:	eb45 0303 	adc.w	r3, r5, r3
 800640a:	f04f 0000 	mov.w	r0, #0
 800640e:	f04f 0100 	mov.w	r1, #0
 8006412:	00d9      	lsls	r1, r3, #3
 8006414:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006418:	00d0      	lsls	r0, r2, #3
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	eb12 0804 	adds.w	r8, r2, r4
 8006422:	eb43 0905 	adc.w	r9, r3, r5
 8006426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	4618      	mov	r0, r3
 800642c:	f04f 0100 	mov.w	r1, #0
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	008b      	lsls	r3, r1, #2
 800643a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800643e:	0082      	lsls	r2, r0, #2
 8006440:	4640      	mov	r0, r8
 8006442:	4649      	mov	r1, r9
 8006444:	f7f9 fede 	bl	8000204 <__aeabi_uldivmod>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4b49      	ldr	r3, [pc, #292]	; (8006574 <UART_SetConfig+0x38c>)
 800644e:	fba3 2302 	umull	r2, r3, r3, r2
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	011e      	lsls	r6, r3, #4
 8006456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006458:	4618      	mov	r0, r3
 800645a:	f04f 0100 	mov.w	r1, #0
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	1894      	adds	r4, r2, r2
 8006464:	60bc      	str	r4, [r7, #8]
 8006466:	415b      	adcs	r3, r3
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800646e:	1812      	adds	r2, r2, r0
 8006470:	eb41 0303 	adc.w	r3, r1, r3
 8006474:	f04f 0400 	mov.w	r4, #0
 8006478:	f04f 0500 	mov.w	r5, #0
 800647c:	00dd      	lsls	r5, r3, #3
 800647e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006482:	00d4      	lsls	r4, r2, #3
 8006484:	4622      	mov	r2, r4
 8006486:	462b      	mov	r3, r5
 8006488:	1814      	adds	r4, r2, r0
 800648a:	64bc      	str	r4, [r7, #72]	; 0x48
 800648c:	414b      	adcs	r3, r1
 800648e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	4618      	mov	r0, r3
 8006496:	f04f 0100 	mov.w	r1, #0
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	008b      	lsls	r3, r1, #2
 80064a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064a8:	0082      	lsls	r2, r0, #2
 80064aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064ae:	f7f9 fea9 	bl	8000204 <__aeabi_uldivmod>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <UART_SetConfig+0x38c>)
 80064b8:	fba3 1302 	umull	r1, r3, r3, r2
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	2164      	movs	r1, #100	; 0x64
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	3332      	adds	r3, #50	; 0x32
 80064ca:	4a2a      	ldr	r2, [pc, #168]	; (8006574 <UART_SetConfig+0x38c>)
 80064cc:	fba2 2303 	umull	r2, r3, r2, r3
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d6:	441e      	add	r6, r3
 80064d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064da:	4618      	mov	r0, r3
 80064dc:	f04f 0100 	mov.w	r1, #0
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	1894      	adds	r4, r2, r2
 80064e6:	603c      	str	r4, [r7, #0]
 80064e8:	415b      	adcs	r3, r3
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f0:	1812      	adds	r2, r2, r0
 80064f2:	eb41 0303 	adc.w	r3, r1, r3
 80064f6:	f04f 0400 	mov.w	r4, #0
 80064fa:	f04f 0500 	mov.w	r5, #0
 80064fe:	00dd      	lsls	r5, r3, #3
 8006500:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006504:	00d4      	lsls	r4, r2, #3
 8006506:	4622      	mov	r2, r4
 8006508:	462b      	mov	r3, r5
 800650a:	eb12 0a00 	adds.w	sl, r2, r0
 800650e:	eb43 0b01 	adc.w	fp, r3, r1
 8006512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4618      	mov	r0, r3
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	008b      	lsls	r3, r1, #2
 8006526:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800652a:	0082      	lsls	r2, r0, #2
 800652c:	4650      	mov	r0, sl
 800652e:	4659      	mov	r1, fp
 8006530:	f7f9 fe68 	bl	8000204 <__aeabi_uldivmod>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <UART_SetConfig+0x38c>)
 800653a:	fba3 1302 	umull	r1, r3, r3, r2
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	2164      	movs	r1, #100	; 0x64
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	3332      	adds	r3, #50	; 0x32
 800654c:	4a09      	ldr	r2, [pc, #36]	; (8006574 <UART_SetConfig+0x38c>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	f003 020f 	and.w	r2, r3, #15
 8006558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4432      	add	r2, r6
 800655e:	609a      	str	r2, [r3, #8]
}
 8006560:	bf00      	nop
 8006562:	377c      	adds	r7, #124	; 0x7c
 8006564:	46bd      	mov	sp, r7
 8006566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656a:	bf00      	nop
 800656c:	40011000 	.word	0x40011000
 8006570:	40011400 	.word	0x40011400
 8006574:	51eb851f 	.word	0x51eb851f

08006578 <__libc_init_array>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	4d0d      	ldr	r5, [pc, #52]	; (80065b0 <__libc_init_array+0x38>)
 800657c:	4c0d      	ldr	r4, [pc, #52]	; (80065b4 <__libc_init_array+0x3c>)
 800657e:	1b64      	subs	r4, r4, r5
 8006580:	10a4      	asrs	r4, r4, #2
 8006582:	2600      	movs	r6, #0
 8006584:	42a6      	cmp	r6, r4
 8006586:	d109      	bne.n	800659c <__libc_init_array+0x24>
 8006588:	4d0b      	ldr	r5, [pc, #44]	; (80065b8 <__libc_init_array+0x40>)
 800658a:	4c0c      	ldr	r4, [pc, #48]	; (80065bc <__libc_init_array+0x44>)
 800658c:	f000 f820 	bl	80065d0 <_init>
 8006590:	1b64      	subs	r4, r4, r5
 8006592:	10a4      	asrs	r4, r4, #2
 8006594:	2600      	movs	r6, #0
 8006596:	42a6      	cmp	r6, r4
 8006598:	d105      	bne.n	80065a6 <__libc_init_array+0x2e>
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a0:	4798      	blx	r3
 80065a2:	3601      	adds	r6, #1
 80065a4:	e7ee      	b.n	8006584 <__libc_init_array+0xc>
 80065a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065aa:	4798      	blx	r3
 80065ac:	3601      	adds	r6, #1
 80065ae:	e7f2      	b.n	8006596 <__libc_init_array+0x1e>
 80065b0:	08006b40 	.word	0x08006b40
 80065b4:	08006b40 	.word	0x08006b40
 80065b8:	08006b40 	.word	0x08006b40
 80065bc:	08006b44 	.word	0x08006b44

080065c0 <memset>:
 80065c0:	4402      	add	r2, r0
 80065c2:	4603      	mov	r3, r0
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d100      	bne.n	80065ca <memset+0xa>
 80065c8:	4770      	bx	lr
 80065ca:	f803 1b01 	strb.w	r1, [r3], #1
 80065ce:	e7f9      	b.n	80065c4 <memset+0x4>

080065d0 <_init>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	bf00      	nop
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr

080065dc <_fini>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr
